{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v10.json", "dbt_version": "1.6.8", "generated_at": "2023-11-28T19:47:23.934446Z", "invocation_id": "ea6c0c9c-33c8-4a8c-b95c-6598093d9841", "env": {}, "project_name": "tpch", "project_id": "8330e1b1d54365ea716dbeca47bf2cf6", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "snowflake"}, "nodes": {"model.tpch.stg_dbtc__pages": {"database": "PABLOC", "schema": "MARTS", "name": "stg_dbtc__pages", "resource_type": "model", "package_name": "tpch", "path": "staging/segment/dbtc/stg_dbtc__pages.sql", "original_file_path": "models/staging/segment/dbtc/stg_dbtc__pages.sql", "unique_id": "model.tpch.stg_dbtc__pages", "fqn": ["tpch", "staging", "segment", "dbtc", "stg_dbtc__pages"], "alias": "stg_dbtc__pages", "checksum": {"name": "sha256", "checksum": "d58e8e34c7f6a76b38c820ee7d1e691d3afc70d6676a0db259624423d98db00a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "view"}, "created_at": 1701200844.4111779, "relation_name": "PABLOC.MARTS.stg_dbtc__pages", "raw_code": "with source as (\n\n    select * from {{ source('dbtc', 'pages') }}\n\n),\n\nrenamed as (\n\n    select\n        anonymous_id,\n        context_locale,\n        context_page_referrer,\n        url,\n        uuid_ts,\n        context_library_name,\n        context_library_version,\n        id,\n        received_at,\n        title,\n        context_page_title,\n        path,\n        referrer,\n        timestamp,\n        original_timestamp,\n        sent_at,\n        context_ip,\n        context_page_path,\n        context_page_url,\n        context_user_agent,\n\n        -- calculated\n        {{ dbt_utils.get_url_host('url') }} as page_url_host,\n        replace(\n            {{ dbt_utils.get_url_host('referrer') }},\n            'www.',\n            ''\n        ) as referrer_host,\n        {{ dbt_utils.get_url_parameter('url', 'gclid') }} as gclid,\n        case\n            when lower(context_user_agent) like '%android%' then 'Android'\n            else replace(\n                {{ dbt.split_part(dbt.split_part('context_user_agent', \"'('\", 2), \"' '\", 1) }},\n                ';', '')\n        end as device,\n        case\n            when device = 'iPhone' then 'iPhone'\n            when device = 'Android' then 'Android'\n            when device in ('iPad', 'iPod') then 'Tablet'\n            when device in ('Windows', 'Macintosh', 'X11') then 'Desktop'\n            else 'Uncategorized'\n        end as device_category\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["dbtc", "pages"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.split_part"], "nodes": ["source.tpch.dbtc.pages"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.tpch.stg_dbtc__tracks": {"database": "PABLOC", "schema": "MARTS", "name": "stg_dbtc__tracks", "resource_type": "model", "package_name": "tpch", "path": "staging/segment/dbtc/stg_dbtc__tracks.sql", "original_file_path": "models/staging/segment/dbtc/stg_dbtc__tracks.sql", "unique_id": "model.tpch.stg_dbtc__tracks", "fqn": ["tpch", "staging", "segment", "dbtc", "stg_dbtc__tracks"], "alias": "stg_dbtc__tracks", "checksum": {"name": "sha256", "checksum": "c488b0869bb2572ce630118efb6541d6beb02b4cbd12592459268e53ca6a8118"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "view"}, "created_at": 1701200844.423393, "relation_name": "PABLOC.MARTS.stg_dbtc__tracks", "raw_code": "with source as (\n\n    select * from {{ source('dbtc', 'tracks') }}\n\n),\n\nrenamed as (\n\n    select\n        event_text,\n        context_library_version,\n        context_page_referrer,\n        context_page_url,\n        event,\n        context_ip,\n        context_page_path,\n        context_page_title,\n        received_at,\n        sent_at,\n        timestamp,\n        uuid_ts,\n        context_locale,\n        context_user_agent,\n        id,\n        original_timestamp,\n        anonymous_id,\n        context_library_name\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["dbtc", "tracks"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.tpch.dbtc.tracks"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.tpch.stg_dbtc__link_clicked": {"database": "PABLOC", "schema": "MARTS", "name": "stg_dbtc__link_clicked", "resource_type": "model", "package_name": "tpch", "path": "staging/segment/dbtc/stg_dbtc__link_clicked.sql", "original_file_path": "models/staging/segment/dbtc/stg_dbtc__link_clicked.sql", "unique_id": "model.tpch.stg_dbtc__link_clicked", "fqn": ["tpch", "staging", "segment", "dbtc", "stg_dbtc__link_clicked"], "alias": "stg_dbtc__link_clicked", "checksum": {"name": "sha256", "checksum": "93a000e2bfa2722caaf358b33032644e406b2fc27c3e8a281c56290e8d881836"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "view"}, "created_at": 1701200844.4253, "relation_name": "PABLOC.MARTS.stg_dbtc__link_clicked", "raw_code": "with source as (\n\n    select * from {{ source('dbtc', 'link_clicked') }}\n\n),\n\nrenamed as (\n\n    select\n        id,\n        original_timestamp,\n        received_at,\n        timestamp,\n        anonymous_id,\n        context_ip,\n        context_user_agent,\n        link,\n        context_library_version,\n        event,\n        event_text,\n        uuid_ts,\n        context_page_title,\n        context_page_url,\n        sent_at,\n        context_library_name,\n        context_locale,\n        context_page_path,\n        context_page_referrer\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["dbtc", "link_clicked"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.tpch.dbtc.link_clicked"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.tpch.stg_yahooquery__pages": {"database": "PABLOC", "schema": "MARTS", "name": "stg_yahooquery__pages", "resource_type": "model", "package_name": "tpch", "path": "staging/segment/yahooquery/stg_yahooquery__pages.sql", "original_file_path": "models/staging/segment/yahooquery/stg_yahooquery__pages.sql", "unique_id": "model.tpch.stg_yahooquery__pages", "fqn": ["tpch", "staging", "segment", "yahooquery", "stg_yahooquery__pages"], "alias": "stg_yahooquery__pages", "checksum": {"name": "sha256", "checksum": "8b4e3955c836a77e3c882e01fc14ebae5dc8bb468c5519e306266c28d7781cf5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "view"}, "created_at": 1701200844.4267032, "relation_name": "PABLOC.MARTS.stg_yahooquery__pages", "raw_code": "with source as (\n\n    select * from {{ source('yahooquery', 'pages') }}\n\n),\n\nrenamed as (\n\n    select\n        anonymous_id,\n        context_locale,\n        context_page_referrer,\n        url,\n        uuid_ts,\n        context_library_name,\n        context_library_version,\n        id,\n        received_at,\n        title,\n        context_page_title,\n        path,\n        referrer,\n        timestamp,\n        original_timestamp,\n        sent_at,\n        context_ip,\n        context_page_path,\n        context_page_url,\n        context_user_agent,\n\n        -- calculated\n        {{ dbt_utils.get_url_host('url') }} as page_url_host,\n        replace(\n            {{ dbt_utils.get_url_host('referrer') }},\n            'www.',\n            ''\n        ) as referrer_host,\n        {{ dbt_utils.get_url_parameter('url', 'gclid') }} as gclid,\n        case\n            when lower(context_user_agent) like '%android%' then 'Android'\n            else replace(\n                {{ dbt.split_part(dbt.split_part('context_user_agent', \"'('\", 2), \"' '\", 1) }},\n                ';', '')\n        end as device,\n        case\n            when device = 'iPhone' then 'iPhone'\n            when device = 'Android' then 'Android'\n            when device in ('iPad', 'iPod') then 'Tablet'\n            when device in ('Windows', 'Macintosh', 'X11') then 'Desktop'\n            else 'Uncategorized'\n        end as device_category\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["yahooquery", "pages"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.split_part"], "nodes": ["source.tpch.yahooquery.pages"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.tpch.stg_yahooquery__link_clicked": {"database": "PABLOC", "schema": "MARTS", "name": "stg_yahooquery__link_clicked", "resource_type": "model", "package_name": "tpch", "path": "staging/segment/yahooquery/stg_yahooquery__link_clicked.sql", "original_file_path": "models/staging/segment/yahooquery/stg_yahooquery__link_clicked.sql", "unique_id": "model.tpch.stg_yahooquery__link_clicked", "fqn": ["tpch", "staging", "segment", "yahooquery", "stg_yahooquery__link_clicked"], "alias": "stg_yahooquery__link_clicked", "checksum": {"name": "sha256", "checksum": "1553239b69adaabc2b75523e88ff8fa985fb2821d5e6c36f4f4a655da3618a42"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "view"}, "created_at": 1701200844.430479, "relation_name": "PABLOC.MARTS.stg_yahooquery__link_clicked", "raw_code": "with source as (\n\n    select * from {{ source('yahooquery', 'link_clicked') }}\n\n),\n\nrenamed as (\n\n    select\n        id,\n        original_timestamp,\n        received_at,\n        timestamp,\n        anonymous_id,\n        context_ip,\n        context_user_agent,\n        link,\n        context_library_version,\n        event,\n        event_text,\n        uuid_ts,\n        context_page_title,\n        context_page_url,\n        sent_at,\n        context_library_name,\n        context_locale,\n        context_page_path,\n        context_page_referrer\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["yahooquery", "link_clicked"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.tpch.yahooquery.link_clicked"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.tpch.stg_yahooquery__tracks": {"database": "PABLOC", "schema": "MARTS", "name": "stg_yahooquery__tracks", "resource_type": "model", "package_name": "tpch", "path": "staging/segment/yahooquery/stg_yahooquery__tracks.sql", "original_file_path": "models/staging/segment/yahooquery/stg_yahooquery__tracks.sql", "unique_id": "model.tpch.stg_yahooquery__tracks", "fqn": ["tpch", "staging", "segment", "yahooquery", "stg_yahooquery__tracks"], "alias": "stg_yahooquery__tracks", "checksum": {"name": "sha256", "checksum": "8d253cc96ccc5299a4b65f5ad0d918c735f2a6e6404b54401a4f12c759e22dfb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "view"}, "created_at": 1701200844.431814, "relation_name": "PABLOC.MARTS.stg_yahooquery__tracks", "raw_code": "with source as (\n\n    select * from {{ source('yahooquery', 'tracks') }}\n\n),\n\nrenamed as (\n\n    select\n        event_text,\n        context_library_version,\n        context_page_referrer,\n        context_page_url,\n        event,\n        context_ip,\n        context_page_path,\n        context_page_title,\n        received_at,\n        sent_at,\n        timestamp,\n        uuid_ts,\n        context_locale,\n        context_user_agent,\n        id,\n        original_timestamp,\n        anonymous_id,\n        context_library_name\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["yahooquery", "tracks"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.tpch.yahooquery.tracks"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.tpch.stg_tpch_orders": {"database": "PABLOC", "schema": "MARTS", "name": "stg_tpch_orders", "resource_type": "model", "package_name": "tpch", "path": "staging/tpch/stg_tpch_orders.sql", "original_file_path": "models/staging/tpch/stg_tpch_orders.sql", "unique_id": "model.tpch.stg_tpch_orders", "fqn": ["tpch", "staging", "tpch", "stg_tpch_orders"], "alias": "stg_tpch_orders", "checksum": {"name": "sha256", "checksum": "02a26a4c251753961aa02f8a9589a452943214af1c420c2a90459bcc505845ce"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "staging layer for orders data", "columns": {"order_key": {"name": "order_key", "description": "primary key of the model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_key": {"name": "customer_key", "description": "foreign key to stg_tpch_customers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status_code": {"name": "status_code", "description": "status of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_price": {"name": "total_price", "description": "raw price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_date": {"name": "order_date", "description": "date the order was made", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "priority_code": {"name": "priority_code", "description": "code associated with the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "clerk_name": {"name": "clerk_name", "description": "id of the clerk", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ship_priority": {"name": "ship_priority", "description": "numeric representation of the shipping priority, zero being the default", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comment": {"name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://models/staging/tpch/_tpch__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "view"}, "created_at": 1701200844.621828, "relation_name": "PABLOC.MARTS.stg_tpch_orders", "raw_code": "with source as (\n\n    select * from {{ source('tpch', 'orders') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        o_orderkey as order_key,\n        o_custkey as customer_key,\n        o_orderstatus as status_code,\n        o_totalprice as total_price,\n        o_orderdate as order_date,\n        o_orderpriority as priority_code,\n        o_clerk as clerk_name,\n        o_shippriority as ship_priority,\n        o_comment as comment\n\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["tpch", "orders"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.tpch.tpch.orders"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.tpch.stg_tpch_part_suppliers": {"database": "PABLOC", "schema": "MARTS", "name": "stg_tpch_part_suppliers", "resource_type": "model", "package_name": "tpch", "path": "staging/tpch/stg_tpch_part_suppliers.sql", "original_file_path": "models/staging/tpch/stg_tpch_part_suppliers.sql", "unique_id": "model.tpch.stg_tpch_part_suppliers", "fqn": ["tpch", "staging", "tpch", "stg_tpch_part_suppliers"], "alias": "stg_tpch_part_suppliers", "checksum": {"name": "sha256", "checksum": "8d6fd06f1a895d7dcff7fe7c806b575e6bacc1380863ae8f6455e1272ef75dd8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"joins": [{"join": "stg_tpch_suppliers", "sql_on": "${stg_tpch_part_suppliers.supplier_key} = ${stg_tpch_suppliers.supplier_key}"}]}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "staging layer for suppliers data", "columns": {"part_supplier_key": {"name": "part_supplier_key", "description": "surrogate key for the model -- combo of ps_partkey + ps_suppkey", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "part_key": {"name": "part_key", "description": "foreign key to stg_tpch_parts", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supplier_key": {"name": "supplier_key", "description": "foreign key to stg_tpch_suppliers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "available_quantity": {"name": "available_quantity", "description": "raw available quantity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost": {"name": "cost", "description": "raw cost", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comment": {"name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"joins": [{"join": "stg_tpch_suppliers", "sql_on": "${stg_tpch_part_suppliers.supplier_key} = ${stg_tpch_suppliers.supplier_key}"}]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://models/staging/tpch/_tpch__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "view", "meta": {"joins": [{"join": "stg_tpch_suppliers", "sql_on": "${stg_tpch_part_suppliers.supplier_key} = ${stg_tpch_suppliers.supplier_key}"}]}}, "created_at": 1701200844.623626, "relation_name": "PABLOC.MARTS.stg_tpch_part_suppliers", "raw_code": "with source as (\n\n    select * from {{ source('tpch', 'partsupp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{ dbt_utils.generate_surrogate_key(\n            ['ps_partkey', \n            'ps_suppkey']) }} \n                as part_supplier_key,\n        ps_partkey as part_key,\n        ps_suppkey as supplier_key,\n        ps_availqty as available_quantity,\n        ps_supplycost as cost,\n        ps_comment as comment\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["tpch", "partsupp"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.tpch.tpch.partsupp"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.tpch.stg_tpch_suppliers": {"database": "PABLOC", "schema": "MARTS", "name": "stg_tpch_suppliers", "resource_type": "model", "package_name": "tpch", "path": "staging/tpch/stg_tpch_suppliers.sql", "original_file_path": "models/staging/tpch/stg_tpch_suppliers.sql", "unique_id": "model.tpch.stg_tpch_suppliers", "fqn": ["tpch", "staging", "tpch", "stg_tpch_suppliers"], "alias": "stg_tpch_suppliers", "checksum": {"name": "sha256", "checksum": "39e217e9757437fcc72c0938f2729a5f5fec76f79d911f216377459f8890a766"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"joins": [{"join": "stg_tpch_nations", "sql_on": "${stg_tpch_suppliers.nation_key} = ${stg_tpch_nations.nation_key}"}]}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "staging layer for suppliers data", "columns": {"supplier_key": {"name": "supplier_key", "description": "primary key of the model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supplier_name": {"name": "supplier_name", "description": "id of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supplier_address": {"name": "supplier_address", "description": "address of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "nation_key": {"name": "nation_key", "description": "foreign key to stg_tpch_nations", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "phone number of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_balance": {"name": "account_balance", "description": "raw account balance", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comment": {"name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"joins": [{"join": "stg_tpch_nations", "sql_on": "${stg_tpch_suppliers.nation_key} = ${stg_tpch_nations.nation_key}"}]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://models/staging/tpch/_tpch__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "view", "meta": {"joins": [{"join": "stg_tpch_nations", "sql_on": "${stg_tpch_suppliers.nation_key} = ${stg_tpch_nations.nation_key}"}]}}, "created_at": 1701200844.626741, "relation_name": "PABLOC.MARTS.stg_tpch_suppliers", "raw_code": "with source as (\n\n    select * from {{ source('tpch', 'supplier') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        s_suppkey as supplier_key,\n        s_name as supplier_name,\n        s_address as supplier_address,\n        s_nationkey as nation_key,\n        s_phone as phone_number,\n        s_acctbal as account_balance,\n        s_comment as comment\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["tpch", "supplier"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.tpch.tpch.supplier"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.tpch.stg_tpch_regions": {"database": "PABLOC", "schema": "MARTS", "name": "stg_tpch_regions", "resource_type": "model", "package_name": "tpch", "path": "staging/tpch/stg_tpch_regions.sql", "original_file_path": "models/staging/tpch/stg_tpch_regions.sql", "unique_id": "model.tpch.stg_tpch_regions", "fqn": ["tpch", "staging", "tpch", "stg_tpch_regions"], "alias": "stg_tpch_regions", "checksum": {"name": "sha256", "checksum": "5c45bba024d6d0699e21c20e64896613725601f2f269a33888c66cf659937ca1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "staging layer for regions data", "columns": {"region_key": {"name": "region_key", "description": "primary key of the model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "region name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comment": {"name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://models/staging/tpch/_tpch__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "view"}, "created_at": 1701200844.6251829, "relation_name": "PABLOC.MARTS.stg_tpch_regions", "raw_code": "with source as (\n\n    select * from {{ source('tpch', 'region') }}\n\n),\n\nrenamed as (\n\n    select\n        r_regionkey as region_key,\n        r_name as name,\n        r_comment as comment\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["tpch", "region"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.tpch.tpch.region"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.tpch.stg_tpch_customers": {"database": "PABLOC", "schema": "MARTS", "name": "stg_tpch_customers", "resource_type": "model", "package_name": "tpch", "path": "staging/tpch/stg_tpch_customers.sql", "original_file_path": "models/staging/tpch/stg_tpch_customers.sql", "unique_id": "model.tpch.stg_tpch_customers", "fqn": ["tpch", "staging", "tpch", "stg_tpch_customers"], "alias": "stg_tpch_customers", "checksum": {"name": "sha256", "checksum": "b8ea082ce88a039607bc8ec6561bc6b32bc24e4af61807efa93564e3e005d0bd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"joins": [{"join": "stg_tpch_nations", "sql_on": "${stg_tpch_customers.nation_key} = ${stg_tpch_nations.nation_key}"}]}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "staging layer for customers data", "columns": {"customer_key": {"name": "customer_key", "description": "primary key of the model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "customer id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address": {"name": "address", "description": "address of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "nation_key": {"name": "nation_key", "description": "foreign key to stg_tpch_nations", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "phone number of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_balance": {"name": "account_balance", "description": "total account balance from the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "market_segment": {"name": "market_segment", "description": "market segment of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comment": {"name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"joins": [{"join": "stg_tpch_nations", "sql_on": "${stg_tpch_customers.nation_key} = ${stg_tpch_nations.nation_key}"}]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://models/staging/tpch/_tpch__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "view", "meta": {"joins": [{"join": "stg_tpch_nations", "sql_on": "${stg_tpch_customers.nation_key} = ${stg_tpch_nations.nation_key}"}]}}, "created_at": 1701200844.6162481, "relation_name": "PABLOC.MARTS.stg_tpch_customers", "raw_code": "with source as (\n\n    select * from {{ source('tpch', 'customer') }}\n\n),\n\ncleanup as (\n\n    select\n    \n        c_custkey as customer_key,\n        c_name as name,\n        c_address as address, \n        c_nationkey as nation_key,\n        c_phone as phone_number,\n        c_acctbal as account_balance,\n        c_mktsegment as market_segment,\n        c_comment as comment,\n        'hello world' as col\n\n    from source\n\n)\n\nselect * from cleanup", "language": "sql", "refs": [], "sources": [["tpch", "customer"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.tpch.tpch.customer"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.tpch.stg_tpch_nations": {"database": "PABLOC", "schema": "MARTS", "name": "stg_tpch_nations", "resource_type": "model", "package_name": "tpch", "path": "staging/tpch/stg_tpch_nations.sql", "original_file_path": "models/staging/tpch/stg_tpch_nations.sql", "unique_id": "model.tpch.stg_tpch_nations", "fqn": ["tpch", "staging", "tpch", "stg_tpch_nations"], "alias": "stg_tpch_nations", "checksum": {"name": "sha256", "checksum": "b864eb71cb7121aaa9324c726e4b731790d1051663f5d0800cc333984f469a07"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"joins": [{"join": "stg_tpch_regions", "sql_on": "${stg_tpch_nations.region_key} = ${stg_tpch_regions.region_key}"}]}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "staging layer for nations data", "columns": {"nation_key": {"name": "nation_key", "description": "primary key of the model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "nation name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "region_key": {"name": "region_key", "description": "foreign key to stg_tpch_regions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comment": {"name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"joins": [{"join": "stg_tpch_regions", "sql_on": "${stg_tpch_nations.region_key} = ${stg_tpch_regions.region_key}"}]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://models/staging/tpch/_tpch__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "view", "meta": {"joins": [{"join": "stg_tpch_regions", "sql_on": "${stg_tpch_nations.region_key} = ${stg_tpch_regions.region_key}"}]}}, "created_at": 1701200844.6205661, "relation_name": "PABLOC.MARTS.stg_tpch_nations", "raw_code": "with source as (\n\n    select * from {{ source('tpch', 'nation') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        n_nationkey as nation_key,\n        n_name as name,\n        n_regionkey as region_key,\n        n_comment as comment\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["tpch", "nation"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.tpch.tpch.nation"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.tpch.stg_tpch_line_items": {"database": "PABLOC", "schema": "MARTS", "name": "stg_tpch_line_items", "resource_type": "model", "package_name": "tpch", "path": "staging/tpch/stg_tpch_line_items.sql", "original_file_path": "models/staging/tpch/stg_tpch_line_items.sql", "unique_id": "model.tpch.stg_tpch_line_items", "fqn": ["tpch", "staging", "tpch", "stg_tpch_line_items"], "alias": "stg_tpch_line_items", "checksum": {"name": "sha256", "checksum": "f6b2ba6705c49b2e2263b3fc9fcb43454a7b9df0073790517b917396f7ca71cb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "staging layer for line items data", "columns": {"order_item_key": {"name": "order_item_key", "description": "surrogate key for the model -- combo of order_key + line_number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_key": {"name": "order_key", "description": "foreign key to stg_tpch_orders", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "part_key": {"name": "part_key", "description": "foreign key to stg_tpch_part_suppliers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supplier_key": {"name": "supplier_key", "description": "foreign key to stg_tpch_suppliers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "line_number": {"name": "line_number", "description": "sequence of the order items within the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "total units", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "extended_price": {"name": "extended_price", "description": "line item price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_percentage": {"name": "discount_percentage", "description": "percentage of the discount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_rate": {"name": "tax_rate", "description": "tax rate of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "return_flag": {"name": "return_flag", "description": "letter determining the status of the return", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status_code": {"name": "status_code", "description": "status code of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ship_date": {"name": "ship_date", "description": "the date the order item is being shipped", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "commit_date": {"name": "commit_date", "description": "the date the order item is being commited", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "receipt_date": {"name": "receipt_date", "description": "the receipt date of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ship_instructions": {"name": "ship_instructions", "description": "additional instructions on the shipment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ship_mode": {"name": "ship_mode", "description": "method of shipping", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comment": {"name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://models/staging/tpch/_tpch__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "view"}, "created_at": 1701200844.61917, "relation_name": "PABLOC.MARTS.stg_tpch_line_items", "raw_code": "with source as (\n\n    select * from {{ source('tpch', 'lineitem') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{ dbt_utils.generate_surrogate_key(\n            ['l_orderkey', \n            'l_linenumber']) }}\n                as order_item_key,\n        l_orderkey as order_key,\n        l_partkey as part_key,\n        l_suppkey as supplier_key,\n        l_linenumber as line_number,\n        l_quantity as quantity,\n        l_extendedprice as extended_price,\n        l_discount as discount_percentage,\n        l_tax as tax_rate,\n        l_returnflag as return_flag,\n        l_linestatus as status_code,\n        l_shipdate as ship_date,\n        l_commitdate as commit_date,\n        l_receiptdate as receipt_date,\n        l_shipinstruct as ship_instructions,\n        l_shipmode as ship_mode,\n        l_comment as comment\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["tpch", "lineitem"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.tpch.tpch.lineitem"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.tpch.stg_tpch_parts": {"database": "PABLOC", "schema": "MARTS", "name": "stg_tpch_parts", "resource_type": "model", "package_name": "tpch", "path": "staging/tpch/stg_tpch_parts.sql", "original_file_path": "models/staging/tpch/stg_tpch_parts.sql", "unique_id": "model.tpch.stg_tpch_parts", "fqn": ["tpch", "staging", "tpch", "stg_tpch_parts"], "alias": "stg_tpch_parts", "checksum": {"name": "sha256", "checksum": "8ffc7b305f598ea1db84ec708219e456b237e7de5e2048b3bb3efc4c230192ef"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "staging layer for parts data", "columns": {"part_key": {"name": "part_key", "description": "primary key of the model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "name of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manufacturer": {"name": "manufacturer", "description": "manufacturer of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "brand": {"name": "brand", "description": "brand of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "type of part including material", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "size": {"name": "size", "description": "size of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "container": {"name": "container", "description": "container of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "retail_price": {"name": "retail_price", "description": "raw retail price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comment": {"name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://models/staging/tpch/_tpch__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "view"}, "created_at": 1701200844.624993, "relation_name": "PABLOC.MARTS.stg_tpch_parts", "raw_code": "with source as (\n\n    select * from {{ source('tpch', 'part') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        p_partkey as part_key,\n        p_name as name,\n        p_mfgr as manufacturer,\n        p_brand as brand,\n        p_type as type,\n        p_size as size,\n        p_container as container,\n        p_retailprice as retail_price,\n        p_comment as comment\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["tpch", "part"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.tpch.tpch.part"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.tpch.dim_suppliers": {"database": "PABLOC", "schema": "MARTS", "name": "dim_suppliers", "resource_type": "model", "package_name": "tpch", "path": "marts/core/dim_suppliers.sql", "original_file_path": "models/marts/core/dim_suppliers.sql", "unique_id": "model.tpch.dim_suppliers", "fqn": ["tpch", "marts", "core", "dim_suppliers"], "alias": "dim_suppliers", "checksum": {"name": "sha256", "checksum": "ecdf5d788fb87a00fe8c6e089a5a3e0e6e5e7d0ae6ac0076d68a675dae309518"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"joins": [{"join": "stg_tpch_suppliers", "sql_on": "${dim_suppliers.supplier_key} = ${stg_tpch_suppliers.supplier_key}"}]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Suppliers dimensions table", "columns": {"supplier_key": {"name": "supplier_key", "description": "primary key of the model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supplier_name": {"name": "supplier_name", "description": "id of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supplier_address": {"name": "supplier_address", "description": "address of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "nation": {"name": "nation", "description": "nation name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "region": {"name": "region", "description": "region name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "phone number of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_balance": {"name": "account_balance", "description": "raw account balance", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"joins": [{"join": "stg_tpch_suppliers", "sql_on": "${dim_suppliers.supplier_key} = ${stg_tpch_suppliers.supplier_key}"}]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://models/marts/core/core.yml", "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "table", "meta": {"joins": [{"join": "stg_tpch_suppliers", "sql_on": "${dim_suppliers.supplier_key} = ${stg_tpch_suppliers.supplier_key}"}]}}, "created_at": 1701200844.666049, "relation_name": "PABLOC.MARTS.dim_suppliers", "raw_code": "{{\n    config(\n        materialized = 'table'\n    )\n}}\n\nwith supplier as (\n\n    select * from {{ ref('stg_tpch_suppliers') }}\n\n),\nnation as (\n\n    select * from {{ ref('stg_tpch_nations') }}\n),\nregion as (\n\n    select * from {{ ref('stg_tpch_regions') }}\n\n),\nfinal as (\n\n    select \n        supplier.supplier_key,\n        supplier.supplier_name,\n        supplier.supplier_address,\n        nation.name as nation,\n        region.name as region,\n        supplier.phone_number,\n        supplier.account_balance\n    from\n        supplier\n    inner join nation\n            on supplier.nation_key = nation.nation_key\n    inner join region \n            on nation.region_key = region.region_key\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "stg_tpch_suppliers", "package": null, "version": null}, {"name": "stg_tpch_nations", "package": null, "version": null}, {"name": "stg_tpch_regions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.tpch.stg_tpch_suppliers", "model.tpch.stg_tpch_nations", "model.tpch.stg_tpch_regions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.tpch.dim_parts": {"database": "PABLOC", "schema": "MARTS", "name": "dim_parts", "resource_type": "model", "package_name": "tpch", "path": "marts/core/dim_parts.sql", "original_file_path": "models/marts/core/dim_parts.sql", "unique_id": "model.tpch.dim_parts", "fqn": ["tpch", "marts", "core", "dim_parts"], "alias": "dim_parts", "checksum": {"name": "sha256", "checksum": "d219372a8f9f61e7f76d160ba914834de7fc5883f1fdc81c03da59c08ad262ba"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Parts dimensions table", "columns": {"part_key": {"name": "part_key", "description": "primary key of the model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manufacturer": {"name": "manufacturer", "description": "manufacturer of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "name of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "brand": {"name": "brand", "description": "brand of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "type of part including material", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "size": {"name": "size", "description": "size of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "container": {"name": "container", "description": "container of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "retail_price": {"name": "retail_price", "description": "raw retail price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://models/marts/core/core.yml", "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "table"}, "created_at": 1701200844.6646678, "relation_name": "PABLOC.MARTS.dim_parts", "raw_code": "{{\n    config(\n        materialized = 'table'\n    )\n}}\nwith part as (\n\n    select * from {{ref('stg_tpch_parts')}}\n\n),\n\nfinal as (\n    select \n        part_key,\n        manufacturer,\n        name,\n        brand,\n        type,\n        size,\n        container,\n        retail_price\n    from\n        part\n)\nselect *\nfrom final  \norder by part_key", "language": "sql", "refs": [{"name": "stg_tpch_parts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.tpch.stg_tpch_parts"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.tpch.dim_customers": {"database": "PABLOC", "schema": "MARTS", "name": "dim_customers", "resource_type": "model", "package_name": "tpch", "path": "marts/core/dim_customers.sql", "original_file_path": "models/marts/core/dim_customers.sql", "unique_id": "model.tpch.dim_customers", "fqn": ["tpch", "marts", "core", "dim_customers"], "alias": "dim_customers", "checksum": {"name": "sha256", "checksum": "92da2905a5e766655b67182c48fa8243b3fbfa91c7a42e3433adbd1b45cf248f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"joins": [{"join": "stg_tpch_customers", "sql_on": "${dim_customers.customer_key} = ${stg_tpch_customers.customer_key}"}, {"join": "stg_tpch_nations", "sql_on": "${stg_tpch_customers.nation_key} = ${stg_tpch_nations.nation_key}"}]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "transient": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Customer dimensions table", "columns": {"customer_key": {"name": "customer_key", "description": "Primary key on the customers table", "meta": {"metrics": {"total_unique_customers": {"type": "count"}}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "region": {"name": "region", "description": "region name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "customer id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address": {"name": "address", "description": "address of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "nation": {"name": "nation", "description": "nation name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "phone number of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_balance": {"name": "account_balance", "description": "raw account balance", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "market_segment": {"name": "market_segment", "description": "market segment of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"joins": [{"join": "stg_tpch_customers", "sql_on": "${dim_customers.customer_key} = ${stg_tpch_customers.customer_key}"}, {"join": "stg_tpch_nations", "sql_on": "${stg_tpch_customers.nation_key} = ${stg_tpch_nations.nation_key}"}]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://models/marts/core/core.yml", "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "table", "meta": {"joins": [{"join": "stg_tpch_customers", "sql_on": "${dim_customers.customer_key} = ${stg_tpch_customers.customer_key}"}, {"join": "stg_tpch_nations", "sql_on": "${stg_tpch_customers.nation_key} = ${stg_tpch_nations.nation_key}"}]}, "transient": false}, "created_at": 1701200844.664068, "relation_name": "PABLOC.MARTS.dim_customers", "raw_code": "{{\n    config(\n        materialized = 'table',\n        transient=false\n    )\n}}\n\nwith customer as (\n\n    select * from {{ ref('stg_tpch_customers') }}\n\n),\nnation as (\n\n    select * from {{ ref('stg_tpch_nations') }}\n),\nregion as (\n\n    select * from {{ ref('stg_tpch_regions') }}\n\n),\nfinal as (\n    select \n        customer.customer_key,\n        customer.name,\n        customer.address,\n        nation.nation_key,\n        nation.name as nation,\n        region.region_key,\n        region.name as region,\n        customer.phone_number,\n        customer.account_balance,\n        customer.market_segment\n    from\n        customer\n        inner join nation\n            on customer.nation_key = nation.nation_key\n        inner join region\n            on nation.region_key = region.region_key\n)\nselect \n    *\nfrom\n    final\norder by\n    customer_key", "language": "sql", "refs": [{"name": "stg_tpch_customers", "package": null, "version": null}, {"name": "stg_tpch_nations", "package": null, "version": null}, {"name": "stg_tpch_regions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.tpch.stg_tpch_customers", "model.tpch.stg_tpch_nations", "model.tpch.stg_tpch_regions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.tpch.fct_orders_stats_sql": {"database": "PABLOC", "schema": "MARTS", "name": "fct_orders_stats_sql", "resource_type": "model", "package_name": "tpch", "path": "marts/core/fct_orders_stats_sql.sql", "original_file_path": "models/marts/core/fct_orders_stats_sql.sql", "unique_id": "model.tpch.fct_orders_stats_sql", "fqn": ["tpch", "marts", "core", "fct_orders_stats_sql"], "alias": "fct_orders_stats_sql", "checksum": {"name": "sha256", "checksum": "68216d76f0de26925f55aa75b56a11a9b3ce8ee8c4204352e1e993ef8e276212"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "table"}, "created_at": 1701200844.4532921, "relation_name": "PABLOC.MARTS.fct_orders_stats_sql", "raw_code": "{% set ref_orders = ref('fct_orders') %}\n\nwith \n\norders as (\n\n    select * from {{ ref_orders }}\n\n),\n\ndescribed as (\n\n    {% set columns = adapter.get_columns_in_relation(ref_orders) %}\n    {% set numeric_cols = [] %}\n    {% for col in columns %}\n        {% if col.dtype in ('NUMBER', 'FLOAT') %}\n            {% do numeric_cols.append(col) %}\n        {% endif %}\n    {% endfor %}\n    \n    {% set stats = {\n        'stddev': 'stddev(...)',\n        'min': 'min(...)',\n        'mean': 'avg(...)',\n        'count': 'count(...)',\n        'max': 'max(...)',\n    } %}\n    \n    {% for stat_name, stat_calc in stats.items() %}\n    \n    select\n    '{{ stat_name }}' as metric,\n    {% for col in numeric_cols %}\n        {{ stat_calc | replace('...', col.name) }} as {{ col.name }}{{ ',' if not loop.last }}\n    {% endfor %}\n    \n    from {{ ref_orders }}\n      \n    {{ 'union all' if not loop.last }}\n    \n    {% endfor %}\n  \n)\n\nselect * from described", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.tpch.fct_orders"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.tpch.fct_order_items": {"database": "PABLOC", "schema": "MARTS", "name": "fct_order_items", "resource_type": "model", "package_name": "tpch", "path": "marts/core/fct_order_items.sql", "original_file_path": "models/marts/core/fct_order_items.sql", "unique_id": "model.tpch.fct_order_items", "fqn": ["tpch", "marts", "core", "fct_order_items"], "alias": "fct_order_items", "checksum": {"name": "sha256", "checksum": "707189d860cd0eaed22a64f1b96d43fdf92148435a79bc0fd4d4c29009922664"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["finance"], "meta": {"joins": [{"join": "dim_customers", "sql_on": "${fct_order_items.customer_key} = ${dim_customers.customer_key}"}, {"join": "stg_tpch_suppliers", "sql_on": "${fct_order_items.supplier_key} = ${stg_tpch_suppliers.supplier_key}"}]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": []}, "tags": ["finance"], "description": "order items fact table", "columns": {"order_item_key": {"name": "order_item_key", "description": "surrogate key for the model -- combo of order_key + line_number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_key": {"name": "order_key", "description": "foreign key for orders", "meta": {"metrics": {"items_in_order": {"type": "count_distinct"}}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_date": {"name": "order_date", "description": "date of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_key": {"name": "customer_key", "description": "foreign key for customers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "part_key": {"name": "part_key", "description": "foreign key for part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supplier_key": {"name": "supplier_key", "description": "foreign key for suppliers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_item_status_code": {"name": "order_item_status_code", "description": "status of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "return_flag": {"name": "return_flag", "description": "letter determining the status of the return", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "line_number": {"name": "line_number", "description": "sequence of the order items within the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ship_date": {"name": "ship_date", "description": "the date the order item is being shipped", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "commit_date": {"name": "commit_date", "description": "the date the order item is being commited", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "receipt_date": {"name": "receipt_date", "description": "the receipt date of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ship_mode": {"name": "ship_mode", "description": "method of shipping", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supplier_cost": {"name": "supplier_cost", "description": "raw cost", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "base_price": {"name": "base_price", "description": "since extended_price is the line item total, we back out the price per item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_percentage": {"name": "discount_percentage", "description": "percentage of the discount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discounted_price": {"name": "discounted_price", "description": "factoring in the discount_percentage, the line item discount total", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_rate": {"name": "tax_rate", "description": "tax rate of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_item_count": {"name": "order_item_count", "description": "count of order items", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "total units", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gross_item_sales_amount": {"name": "gross_item_sales_amount", "description": "same as extended_price", "meta": {"metrics": {"total_revenue": {"type": "sum", "show_underlying_values": ["return_flag", "order_item_status_code", "supplier_key", "ship_mode"]}}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discounted_item_sales_amount": {"name": "discounted_item_sales_amount", "description": "line item (includes quantity) discount amount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_discount_amount": {"name": "item_discount_amount", "description": "item level discount amount. this is always a negative number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_tax_amount": {"name": "item_tax_amount", "description": "item level tax total", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "net_item_sales_amount": {"name": "net_item_sales_amount", "description": "the net total which factors in discount and tax", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"joins": [{"join": "dim_customers", "sql_on": "${fct_order_items.customer_key} = ${dim_customers.customer_key}"}, {"join": "stg_tpch_suppliers", "sql_on": "${fct_order_items.supplier_key} = ${stg_tpch_suppliers.supplier_key}"}]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://models/marts/core/core.yml", "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "table", "meta": {"joins": [{"join": "dim_customers", "sql_on": "${fct_order_items.customer_key} = ${dim_customers.customer_key}"}, {"join": "stg_tpch_suppliers", "sql_on": "${fct_order_items.supplier_key} = ${stg_tpch_suppliers.supplier_key}"}]}, "tags": ["finance"]}, "created_at": 1701200844.6696188, "relation_name": "PABLOC.MARTS.fct_order_items", "raw_code": "{{\n    config(\n        materialized = 'table',\n        tags = ['finance']\n    )\n}}\n\nwith order_item as (\n    \n    select * from {{ ref('order_items') }}\n\n),\n\npart_supplier as (\n\n    select * from {{ ref('part_suppliers') }}\n\n),\n\nfinal as (\n    select \n        order_item.order_item_key,\n        order_item.order_key,\n        order_item.order_date,\n        order_item.customer_key,\n        order_item.part_key,\n        order_item.supplier_key,\n        order_item.order_item_status_code,\n        order_item.return_flag,\n        order_item.line_number,\n        order_item.ship_date,\n        order_item.commit_date,\n        order_item.receipt_date,\n        order_item.ship_mode,\n        part_supplier.cost as supplier_cost,\n        {# ps.retail_price, #}\n        order_item.base_price,\n        order_item.discount_percentage,\n        order_item.discounted_price,\n        order_item.tax_rate,\n        \n        1 as order_item_count,\n        order_item.quantity,\n        order_item.gross_item_sales_amount,\n        order_item.discounted_item_sales_amount,\n        order_item.item_discount_amount,\n        order_item.item_tax_amount,\n        order_item.net_item_sales_amount\n\n    from\n        order_item\n        inner join part_supplier\n            on order_item.part_key = part_supplier.part_key and\n                order_item.supplier_key = part_supplier.supplier_key\n)\nselect \n    *\nfrom\n    final\norder by\n    order_date", "language": "sql", "refs": [{"name": "order_items", "package": null, "version": null}, {"name": "part_suppliers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.tpch.order_items", "model.tpch.part_suppliers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.tpch.fct_orders": {"database": "PABLOC", "schema": "MARTS", "name": "fct_orders", "resource_type": "model", "package_name": "tpch", "path": "marts/core/fct_orders.sql", "original_file_path": "models/marts/core/fct_orders.sql", "unique_id": "model.tpch.fct_orders", "fqn": ["tpch", "marts", "core", "fct_orders"], "alias": "fct_orders", "checksum": {"name": "sha256", "checksum": "d40495d41ae87c331218f92d695995b8d6a42935ea8bd90606194d193a492bf2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["finance"], "meta": {"joins": [{"join": "dim_customers", "sql_on": "${fct_orders.customer_key} = ${dim_customers.customer_key}"}]}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": []}, "tags": ["finance"], "description": "orders fact table", "columns": {"order_key": {"name": "order_key", "description": "primary key of the model", "meta": {"metrics": {"total_orders": {"type": "sum"}}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_key": {"name": "customer_key", "description": "foreign key for customers", "meta": {"metrics": {"total_unique_customers": {"type": "count_distinct"}}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_date": {"name": "order_date", "description": "date of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status_code": {"name": "status_code", "description": "status of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "priority_code": {"name": "priority_code", "description": "code associated with the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "clerk_name": {"name": "clerk_name", "description": "id of the clerk", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ship_priority": {"name": "ship_priority", "description": "numeric representation of the shipping priority, zero being the default", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_count": {"name": "order_count", "description": "count of order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gross_item_sales_amount": {"name": "gross_item_sales_amount", "description": "same as extended_price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_discount_amount": {"name": "item_discount_amount", "description": "item level discount amount. this is always a negative number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_tax_amount": {"name": "item_tax_amount", "description": "item level tax total", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "net_item_sales_amount": {"name": "net_item_sales_amount", "description": "the net total which factors in discount and tax", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"joins": [{"join": "dim_customers", "sql_on": "${fct_orders.customer_key} = ${dim_customers.customer_key}"}]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://models/marts/core/core.yml", "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "table", "meta": {"joins": [{"join": "dim_customers", "sql_on": "${fct_orders.customer_key} = ${dim_customers.customer_key}"}]}, "tags": ["finance"]}, "created_at": 1701200844.671372, "relation_name": "PABLOC.MARTS.fct_orders", "raw_code": "{{\n    config(\n        materialized = 'table',\n        tags=['finance']\n    )\n}}\n\n\nwith orders as (\n    \n    select * from {{ ref('stg_tpch_orders') }}\n\n),\norder_item as (\n    \n    select * from {{ ref('order_items') }}\n\n),\norder_item_summary as (\n\n    select \n        order_key,\n        sum(gross_item_sales_amount) as gross_item_sales_amount,\n        sum(item_discount_amount) as item_discount_amount,\n        sum(item_tax_amount) as item_tax_amount,\n        sum(net_item_sales_amount) as net_item_sales_amount\n    from order_item\n    group by\n        1\n),\nfinal as (\n\n    select \n\n        orders.order_key, \n        orders.order_date,\n        orders.customer_key,\n        orders.status_code,\n        orders.priority_code,\n        orders.ship_priority,\n        orders.clerk_name,\n        1 as order_count,\n        order_item_summary.gross_item_sales_amount,\n        order_item_summary.item_discount_amount,\n        order_item_summary.item_tax_amount,\n        order_item_summary.net_item_sales_amount\n    from\n        orders\n        inner join order_item_summary\n            on orders.order_key = order_item_summary.order_key\n)\nselect \n    *\nfrom\n    final\n\norder by\n    order_date", "language": "sql", "refs": [{"name": "stg_tpch_orders", "package": null, "version": null}, {"name": "order_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.tpch.stg_tpch_orders", "model.tpch.order_items"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.tpch.agg_ship_modes_hardcoded_pivot": {"database": "PABLOC", "schema": "MARTS", "name": "agg_ship_modes_hardcoded_pivot", "resource_type": "model", "package_name": "tpch", "path": "marts/aggregates/agg_ship_modes_hardcoded_pivot.sql", "original_file_path": "models/marts/aggregates/agg_ship_modes_hardcoded_pivot.sql", "unique_id": "model.tpch.agg_ship_modes_hardcoded_pivot", "fqn": ["tpch", "marts", "aggregates", "agg_ship_modes_hardcoded_pivot"], "alias": "agg_ship_modes_hardcoded_pivot", "checksum": {"name": "sha256", "checksum": "fb4d45e5eeb79b20f3daa52029cb340a75fa52c2e6516c9f921ee34b21d604dd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Example of creating a pivot table with dynamic columns based on the ship modes that are in the system", "columns": {"order_year": {"name": "order_year", "description": "year of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://models/marts/aggregates/aggregates.yml", "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "table"}, "created_at": 1701200844.725406, "relation_name": "PABLOC.MARTS.agg_ship_modes_hardcoded_pivot", "raw_code": "/* Create a pivot table with hard-coded columns based on a query of the ship modes that are in the system */\n\nwith merged as (\n    select\n        date_part('year', order_date) as order_year,\n        ship_mode,\n        gross_item_sales_amount\n    from {{ ref('fct_order_items') }}\n)\n\nselect\n    * \nfrom\n    merged\n    -- have to manually map strings in the pivot operation\n    pivot(sum(gross_item_sales_amount) for ship_mode in (\n        'AIR',\n        'REG AIR',\n        'FOB',\n        'RAIL',\n        'MAIL',\n        'SHIP',\n        'TRUCK'\n    )) as p \n\norder by order_year", "language": "sql", "refs": [{"name": "fct_order_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.tpch.fct_order_items"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.tpch.agg_ship_modes_dynamic_pivot": {"database": "PABLOC", "schema": "MARTS", "name": "agg_ship_modes_dynamic_pivot", "resource_type": "model", "package_name": "tpch", "path": "marts/aggregates/agg_ship_modes_dynamic_pivot.sql", "original_file_path": "models/marts/aggregates/agg_ship_modes_dynamic_pivot.sql", "unique_id": "model.tpch.agg_ship_modes_dynamic_pivot", "fqn": ["tpch", "marts", "aggregates", "agg_ship_modes_dynamic_pivot"], "alias": "agg_ship_modes_dynamic_pivot", "checksum": {"name": "sha256", "checksum": "7bb902ee2f121900dface286424b53cbf8a3b6955f4323df0621f760385ce5df"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Example of creating a pivot table with hard-coded columns based on a query of the ship modes that are in the system", "columns": {"order_year": {"name": "order_year", "description": "year of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://models/marts/aggregates/aggregates.yml", "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "table"}, "created_at": 1701200844.725667, "relation_name": "PABLOC.MARTS.agg_ship_modes_dynamic_pivot", "raw_code": "/* Create a pivot table with dynamic columns based on the ship modes that are in the system */\n\n{%- call statement('result', fetch_result=True) -%}\n\n    {# this pulls the unique ship modes from the fct_order_items table #}\n    select ship_mode from {{ ref('fct_order_items') }} group by 1 \n\n{%- endcall %}\n\n{% set ship_modes = load_result('result').table.columns[0].values() %}\n\nselect\n    date_part('year', order_date) as order_year,\n\n    {# Loop over ship_modes array from above, and sum based on whether the record matches the ship mode #}\n    {%- for ship_mode in ship_modes -%}\n        sum(case when ship_mode = '{{ship_mode}}' then gross_item_sales_amount end) as \"{{ship_mode|replace(' ', '_')}}_amount\"\n        {%- if not loop.last -%},{% endif %}\n    {% endfor %}\n\nfrom {{ ref('fct_order_items') }}\ngroup by 1", "language": "sql", "refs": [{"name": "fct_order_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.statement"], "nodes": ["model.tpch.fct_order_items"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.tpch.int_segment__link_clicked": {"database": "PABLOC", "schema": "MARTS", "name": "int_segment__link_clicked", "resource_type": "model", "package_name": "tpch", "path": "marts/marketing/int_segment__link_clicked.sql", "original_file_path": "models/marts/marketing/int_segment__link_clicked.sql", "unique_id": "model.tpch.int_segment__link_clicked", "fqn": ["tpch", "marts", "marketing", "int_segment__link_clicked"], "alias": "int_segment__link_clicked", "checksum": {"name": "sha256", "checksum": "ae8566edce8ff3273d052a23fd02863797d1dbfca2445b5092ad52e97b4b4eee"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://models/marts/marketing/_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "table"}, "created_at": 1701200844.730968, "relation_name": "PABLOC.MARTS.int_segment__link_clicked", "raw_code": "{% set sources = ['dbtc', 'yahooquery'] %}\n\nwith\n\n{% for source in sources %}\n\n{{ source }}_source as (\n    select\n        id,\n        original_timestamp,\n        received_at,\n        timestamp,\n        anonymous_id,\n        context_ip,\n        context_user_agent,\n        link,\n        context_library_version,\n        event,\n        event_text,\n        uuid_ts,\n        context_page_title,\n        context_page_url,\n        sent_at,\n        context_library_name,\n        context_locale,\n        context_page_path,\n        context_page_referrer,\n        '{{ source }}' as src\n\n    from {{ ref('stg_' ~ source ~ '__link_clicked') }}\n),\n\n{% endfor %}\n\nunioned_sources as (\n    {% for source in sources %}\n        select * from {{ source }}_source\n        {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n)\n\nselect * from unioned_sources", "language": "sql", "refs": [{"name": "stg_dbtc__link_clicked", "package": null, "version": null}, {"name": "stg_yahooquery__link_clicked", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.tpch.stg_dbtc__link_clicked", "model.tpch.stg_yahooquery__link_clicked"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.tpch.int_segment__pages": {"database": "PABLOC", "schema": "MARTS", "name": "int_segment__pages", "resource_type": "model", "package_name": "tpch", "path": "marts/marketing/int_segment__pages.sql", "original_file_path": "models/marts/marketing/int_segment__pages.sql", "unique_id": "model.tpch.int_segment__pages", "fqn": ["tpch", "marts", "marketing", "int_segment__pages"], "alias": "int_segment__pages", "checksum": {"name": "sha256", "checksum": "490ff30adb4f43d9c4debf3bfd98b0ce24253986d450a70cbeca35f564d0ea8c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"anonymous_id": {"name": "anonymous_id", "description": "A pseudo-unique substitute for a User ID, for cases when you don\u2019t have an absolutely unique identifier. A userId or an anonymousId is required. See the Identities docs for more details.", "meta": {"dimension": {"type": "string"}, "metrics": {"number_of_unique_users": {"type": "sum"}}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "context_locale": {"name": "context_locale", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "context_page_referrer": {"name": "context_page_referrer", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "url": {"name": "url", "description": "Page\u2019s full URL. Segment first looks for the canonical URL. If the canonical URL is not provided, Segment uses `location.href` from the DOM API.", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uuid_ts": {"name": "uuid_ts", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "context_library_name": {"name": "context_library_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "context_library_version": {"name": "context_library_version", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {"dimension": {"type": "string"}, "metrics": {"total_page_views": {"type": "count_distinct"}}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "received_at": {"name": "received_at", "description": "Automatically set by Segment, the timestamp of when a message is received by Segment It is an ISO-8601 date string. See the Timestamps fields docs for more detail.", "meta": {"dimension": {"type": "timestamp"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "title": {"name": "title", "description": "Page\u2019s title. Equivalent to `document.title` from the DOM API.", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "context_page_title": {"name": "context_page_title", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "Path portion of the page's URL.  Equivalent to `canonical_path` which defaults to `location.pathname` from the DOM API.", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "referrer": {"name": "referrer", "description": "Previous page\u2019s full URL. Equivalent to `document.referrer` from the DOM API.", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "Timestamp when the message itself took place, defaulted to the current time by the Segment Tracking API, as a ISO-8601 format date string. If the event just happened, leave it out and we\u2019ll use the server\u2019s time. If you\u2019re importing data from the past, make sure you to provide a timestamp.See the Timestamps fields docs for more detail.", "meta": {"dimension": {"type": "timestamp"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "original_timestamp": {"name": "original_timestamp", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sent_at": {"name": "sent_at", "description": "Timestamp of when a message is sent to Segment, used for clock skew correction It is set automatically by the Segment tracking libraries. It is an ISO-8601 date string. See the Timestamps fields docs for more detail.", "meta": {"dimension": {"type": "timestamp"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "context_ip": {"name": "context_ip", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "context_page_path": {"name": "context_page_path", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "context_page_url": {"name": "context_page_url", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "context_user_agent": {"name": "context_user_agent", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "src": {"name": "src", "description": "The application source", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device": {"name": "device", "description": "Type of device accessing the page", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_category": {"name": "device_category", "description": "Category of device accessing the page", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "page_url_host": {"name": "page_url_host", "description": "Page URL Host", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "referrer_host": {"name": "referrer_host", "description": "Host of the referrer", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://models/marts/marketing/_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "table"}, "created_at": 1701200844.729816, "relation_name": "PABLOC.MARTS.int_segment__pages", "raw_code": "{% set sources = ['dbtc', 'yahooquery'] %}\n\nwith\n\n{% for source in sources %}\n\n{{ source }}_source as (\n    select\n        anonymous_id,\n        context_locale,\n        context_page_referrer,\n        url,\n        uuid_ts,\n        context_library_name,\n        context_library_version,\n        id,\n        received_at,\n        title,\n        context_page_title,\n        path,\n        referrer,\n        timestamp,\n        original_timestamp,\n        sent_at,\n        context_ip,\n        context_page_path,\n        context_page_url,\n        context_user_agent,\n        page_url_host,\n        referrer_host,\n        gclid,\n        device,\n        device_category,\n        '{{ source }}' as src\n\n    from {{ ref('stg_' ~ source ~ '__pages') }}\n    where url not like 'http://127.0.0.1:8000%'\n        and url not like 'http://localhost:8000%'\n),\n\n{% endfor %}\n\nunioned_sources as (\n    {% for source in sources %}\n        select * from {{ source }}_source\n        {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n)\n\nselect * from unioned_sources", "language": "sql", "refs": [{"name": "stg_dbtc__pages", "package": null, "version": null}, {"name": "stg_yahooquery__pages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.tpch.stg_dbtc__pages", "model.tpch.stg_yahooquery__pages"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.tpch.int_segment__tracks": {"database": "PABLOC", "schema": "MARTS", "name": "int_segment__tracks", "resource_type": "model", "package_name": "tpch", "path": "marts/marketing/int_segment__tracks.sql", "original_file_path": "models/marts/marketing/int_segment__tracks.sql", "unique_id": "model.tpch.int_segment__tracks", "fqn": ["tpch", "marts", "marketing", "int_segment__tracks"], "alias": "int_segment__tracks", "checksum": {"name": "sha256", "checksum": "71ffeaa5ceaf9d0ac868ce62f7185e3ab0754c43ed04e8d5088a662565bf654e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"event_text": {"name": "event_text", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "context_library_version": {"name": "context_library_version", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "context_page_referrer": {"name": "context_page_referrer", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "context_page_url": {"name": "context_page_url", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event": {"name": "event", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "context_ip": {"name": "context_ip", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "context_page_path": {"name": "context_page_path", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "context_page_title": {"name": "context_page_title", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "received_at": {"name": "received_at", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sent_at": {"name": "sent_at", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uuid_ts": {"name": "uuid_ts", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "context_locale": {"name": "context_locale", "description": "Locale string for the current user, for example en-US.", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "context_user_agent": {"name": "context_user_agent", "description": "User agent of the device making the request.", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id g": {"name": "id g", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "original_timestamp": {"name": "original_timestamp", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anonymous_id": {"name": "anonymous_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "context_library_name": {"name": "context_library_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "src": {"name": "src", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://models/marts/marketing/_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "table"}, "created_at": 1701200844.730773, "relation_name": "PABLOC.MARTS.int_segment__tracks", "raw_code": "{% set sources = ['dbtc', 'yahooquery'] -%}\n\nwith\n\n{% for source in sources -%}\n\n{{ source }}_source as (\n    select\n        event_text,\n        context_library_version,\n        context_page_referrer,\n        context_page_url,\n        event,\n        context_ip,\n        context_page_path,\n        context_page_title,\n        received_at,\n        sent_at,\n        timestamp,\n        uuid_ts,\n        context_locale,\n        context_user_agent,\n        id,\n        original_timestamp,\n        anonymous_id,\n        context_library_name,\n        '{{ source }}' as src\n\n    from {{ ref('stg_' ~ source ~ '__tracks') }}\n),\n\n{% endfor -%}\n\nunioned_sources as (\n    {% for source in sources -%}\n        select * from {{ source }}_source\n        {% if not loop.last %}union all{% endif %}\n    {% endfor -%}\n)\n\nselect * from unioned_sources", "language": "sql", "refs": [{"name": "stg_dbtc__tracks", "package": null, "version": null}, {"name": "stg_yahooquery__tracks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.tpch.stg_dbtc__tracks", "model.tpch.stg_yahooquery__tracks"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.tpch.part_suppliers": {"database": "PABLOC", "schema": "MARTS", "name": "part_suppliers", "resource_type": "model", "package_name": "tpch", "path": "marts/intermediate/part_suppliers.sql", "original_file_path": "models/marts/intermediate/part_suppliers.sql", "unique_id": "model.tpch.part_suppliers", "fqn": ["tpch", "marts", "intermediate", "part_suppliers"], "alias": "part_suppliers", "checksum": {"name": "sha256", "checksum": "b91609b8b02af6d8690f13bbfd816df2e35444657ae9777bc5977d1af64c7553"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Intermediate model where we join part, supplier and part_supplier. This model is at the part supplier level.", "columns": {"part_supplier_key": {"name": "part_supplier_key", "description": "primary key of the models", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "part_key": {"name": "part_key", "description": "foreign key for part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "part_name": {"name": "part_name", "description": "name of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manufacturer": {"name": "manufacturer", "description": "manufacturer of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "brand": {"name": "brand", "description": "brand of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "part_type": {"name": "part_type", "description": "type of part including material", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "part_size": {"name": "part_size", "description": "size of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "container": {"name": "container", "description": "container of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "retail_price": {"name": "retail_price", "description": "raw retail price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supplier_key": {"name": "supplier_key", "description": "foreign key for supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supplier_name": {"name": "supplier_name", "description": "id of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supplier_address": {"name": "supplier_address", "description": "address of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "phone number of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_balance": {"name": "account_balance", "description": "raw account balance", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "nation_key": {"name": "nation_key", "description": "foreign key for nation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "available_quantity": {"name": "available_quantity", "description": "raw available quantity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost": {"name": "cost", "description": "raw cost", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://models/marts/intermediate/intermediate.yml", "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "table"}, "created_at": 1701200844.7333279, "relation_name": "PABLOC.MARTS.part_suppliers", "raw_code": "with part as (\n    \n    select * from {{ ref('stg_tpch_parts') }}\n\n),\n\nsupplier as (\n\n    select * from {{ ref('stg_tpch_suppliers') }}\n\n),\n\npart_supplier as (\n\n    select * from {{ ref('stg_tpch_part_suppliers') }}\n\n),\n\nfinal as (\n    select \n\n    part_supplier.part_supplier_key,\n    part.part_key,\n    part.name as part_name,\n    part.manufacturer,\n    part.brand,\n    part.type as part_type,\n    part.size as part_size,\n    part.container,\n    part.retail_price,\n\n    supplier.supplier_key,\n    supplier.supplier_name,\n    supplier.supplier_address,\n    supplier.phone_number,\n    supplier.account_balance,\n    supplier.nation_key,\n\n    part_supplier.available_quantity,\n    part_supplier.cost\nfrom\n    part \ninner join \n    part_supplier\n        on part.part_key = part_supplier.part_key\ninner join\n    supplier\n        on part_supplier.supplier_key = supplier.supplier_key\norder by\n    part.part_key\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "stg_tpch_parts", "package": null, "version": null}, {"name": "stg_tpch_suppliers", "package": null, "version": null}, {"name": "stg_tpch_part_suppliers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.tpch.stg_tpch_parts", "model.tpch.stg_tpch_suppliers", "model.tpch.stg_tpch_part_suppliers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.tpch.order_items": {"database": "PABLOC", "schema": "MARTS", "name": "order_items", "resource_type": "model", "package_name": "tpch", "path": "marts/intermediate/order_items.sql", "original_file_path": "models/marts/intermediate/order_items.sql", "unique_id": "model.tpch.order_items", "fqn": ["tpch", "marts", "intermediate", "order_items"], "alias": "order_items", "checksum": {"name": "sha256", "checksum": "f2e191f05857c25b4519f79c948f909a068245b05042eb7227d8723772bae1b1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Intermediate model where we calculate item price, discounts and tax. This model is at the order item level.", "columns": {"order_item_key": {"name": "order_item_key", "description": "surrogate key for the model -- combo of order_key + line_number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_key": {"name": "order_key", "description": "foreign key for orders", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_key": {"name": "customer_key", "description": "foreign key for customers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "part_key": {"name": "part_key", "description": "foreign key for part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supplier_key": {"name": "supplier_key", "description": "foreign key for suppliers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_date": {"name": "order_date", "description": "date of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_status_code": {"name": "order_status_code", "description": "status of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "return_flag": {"name": "return_flag", "description": "letter determining the status of the return", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "line_number": {"name": "line_number", "description": "sequence of the order items within the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_item_status_code": {"name": "order_item_status_code", "description": "status of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ship_date": {"name": "ship_date", "description": "the date the order item is being shipped", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "commit_date": {"name": "commit_date", "description": "the date the order item is being commited", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "receipt_date": {"name": "receipt_date", "description": "the receipt date of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ship_mode": {"name": "ship_mode", "description": "method of shipping", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "extended_price": {"name": "extended_price", "description": "line item price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "total units", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "base_price": {"name": "base_price", "description": "since extended_price is the line item total, we back out the price per item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_percentage": {"name": "discount_percentage", "description": "percentage of the discount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discounted_price": {"name": "discounted_price", "description": "factoring in the discount_percentage, the line item discount total", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gross_item_sales_amount": {"name": "gross_item_sales_amount", "description": "same as extended_price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discounted_item_sales_amount": {"name": "discounted_item_sales_amount", "description": "line item (includes quantity) discount amount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_discount_amount": {"name": "item_discount_amount", "description": "item level discount amount. this is always a negative number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_rate": {"name": "tax_rate", "description": "tax rate of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_tax_amount": {"name": "item_tax_amount", "description": "item level tax total", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "net_item_sales_amount": {"name": "net_item_sales_amount", "description": "the net total which factors in discount and tax", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://models/marts/intermediate/intermediate.yml", "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "table"}, "created_at": 1701200844.7322052, "relation_name": "PABLOC.MARTS.order_items", "raw_code": "with orders as (\n    \n    select * from {{ ref('stg_tpch_orders') }}\n\n),\n\nline_item as (\n\n    select * from {{ ref('stg_tpch_line_items') }}\n\n)\nselect \n\n    line_item.order_item_key,\n    orders.order_key,\n    orders.customer_key,\n    line_item.part_key,\n    line_item.supplier_key,\n    orders.order_date,\n    orders.status_code as order_status_code,\n\n\n    line_item.return_flag,\n    \n    line_item.line_number,\n    line_item.status_code as order_item_status_code,\n    line_item.ship_date,\n    line_item.commit_date,\n    line_item.receipt_date,\n    line_item.ship_mode,\n    line_item.extended_price,\n    line_item.quantity,\n    \n    -- extended_price is actually the line item total,\n    -- so we back out the extended price per item\n    (line_item.extended_price/nullif(line_item.quantity, 0)){{ money() }} as base_price,\n    line_item.discount_percentage,\n    (base_price * (1 - line_item.discount_percentage)){{ money() }} as discounted_price,\n\n    line_item.extended_price as gross_item_sales_amount,\n    (line_item.extended_price * (1 - line_item.discount_percentage)){{ money() }} as discounted_item_sales_amount,\n    -- We model discounts as negative amounts\n    (-1 * line_item.extended_price * line_item.discount_percentage){{ money() }} as item_discount_amount,\n    line_item.tax_rate,\n    ((gross_item_sales_amount + item_discount_amount) * line_item.tax_rate){{ money() }} as item_tax_amount,\n    (\n        gross_item_sales_amount + \n        item_discount_amount + \n        item_tax_amount\n    ){{ money() }} as net_item_sales_amount\n\nfrom\n    orders\ninner join line_item\n        on orders.order_key = line_item.order_key\norder by\n    orders.order_date", "language": "sql", "refs": [{"name": "stg_tpch_orders", "package": null, "version": null}, {"name": "stg_tpch_line_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.tpch.money"], "nodes": ["model.tpch.stg_tpch_orders", "model.tpch.stg_tpch_line_items"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.tpch.all_days": {"database": "PABLOC", "schema": "MARTS", "name": "all_days", "resource_type": "model", "package_name": "tpch", "path": "utils/all_days.sql", "original_file_path": "models/utils/all_days.sql", "unique_id": "model.tpch.all_days", "fqn": ["tpch", "utils", "all_days"], "alias": "all_days", "checksum": {"name": "sha256", "checksum": "07511c8cce5ac1b93c721a9691612940e28736da2cfc79705eb706a1b5ed8ccf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This model is an example of how to create a date spine using dbt_utils. Rather than writing a bunch of code to create this, we're able to three lines of code.", "columns": {"date_day": {"name": "date_day", "description": "date generated by the macro", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://models/utils/utils.yml", "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "table"}, "created_at": 1701200844.7377641, "relation_name": "PABLOC.MARTS.all_days", "raw_code": "{{ dbt_utils.date_spine(\n    datepart=\"day\",\n    start_date=\"to_date('01/01/1992', 'mm/dd/yyyy')\",\n    end_date=\"dateadd(year, 1, current_date)\"\n   )\n}}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.tpch.use_variables": {"database": "PABLOC", "schema": "MARTS", "name": "use_variables", "resource_type": "model", "package_name": "tpch", "path": "demo_examples/use_variables.sql", "original_file_path": "models/demo_examples/use_variables.sql", "unique_id": "model.tpch.use_variables", "fqn": ["tpch", "demo_examples", "use_variables"], "alias": "use_variables", "checksum": {"name": "sha256", "checksum": "6645070a7fa501a6fa7ce26684617a5a70ed16d0e6c63c9f98d26d7861360e71"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "demo to show variables", "columns": {"order_item_key": {"name": "order_item_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://models/demo_examples/demo_examples.yml", "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "table"}, "created_at": 1701200844.743447, "relation_name": "PABLOC.MARTS.use_variables", "raw_code": "-- This is here to show that data older than start_date exists - run this first\n-- select min(order_date) from {{ ref('fct_order_items') }}\n\n-- start_date is defined in the dbt_project.yml \n-- to illustrate overriding variables from the command line, run dbt run -m use_variables --vars '{\"start_date\": \"1996-01-01\"}'\nselect * from {{ ref('fct_order_items') }} where order_date >= '{{ var(\"start_date\") }}'", "language": "sql", "refs": [{"name": "fct_order_items", "package": null, "version": null}, {"name": "fct_order_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.tpch.fct_order_items"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.tpch.materialization_incremental": {"database": "PABLOC", "schema": "MARTS", "name": "materialization_incremental", "resource_type": "model", "package_name": "tpch", "path": "demo_examples/materialization_incremental.sql", "original_file_path": "models/demo_examples/materialization_incremental.sql", "unique_id": "model.tpch.materialization_incremental", "fqn": ["tpch", "demo_examples", "materialization_incremental"], "alias": "materialization_incremental", "checksum": {"name": "sha256", "checksum": "2921d9e7dcbf49d7fb31b020db2b9e3ce1fa88b418c833f40738c937d4f92cae"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "demo to show incremental model", "columns": {"customer_key": {"name": "customer_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://models/demo_examples/demo_examples.yml", "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "incremental"}, "created_at": 1701200844.743166, "relation_name": "PABLOC.MARTS.materialization_incremental", "raw_code": "{{ config(materialized='incremental') }}\n\nwith source as (\n\n    select * from {{ source('tpch', 'customer') }}\n\n),\n\n\nrenamed as (\n\n    select\n        c_custkey as customer_key,\n        c_name as name,\n        c_address as address, \n        c_nationkey as nation_key,\n        c_phone as phone_number,\n        c_acctbal as account_balance,\n        c_mktsegment as market_segment,\n        c_comment as comment\n\n    from source\n\n)\n\nselect * from renamed\n\n{% if is_incremental() %}\n  -- this filter will only be applied on an incremental run\n  where customer_key not in (select customer_key from {{this}} )\n\n{% endif %}", "language": "sql", "refs": [], "sources": [["tpch", "customer"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.tpch.tpch.customer"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "snapshot.tpch.tpch_supplier_snapshot": {"database": "doug_demo_v2", "schema": "snapshots", "name": "tpch_supplier_snapshot", "resource_type": "snapshot", "package_name": "tpch", "path": "tpch/tpch_supplier_snapshot.sql", "original_file_path": "snapshots/tpch/tpch_supplier_snapshot.sql", "unique_id": "snapshot.tpch.tpch_supplier_snapshot", "fqn": ["tpch", "tpch", "tpch_supplier_snapshot", "tpch_supplier_snapshot"], "alias": "tpch_supplier_snapshot", "checksum": {"name": "sha256", "checksum": "18b69c9e200356c4b6a0bcd1ef3bf95834e5c1f1f3e4435f6806f8af758bf4a9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "s_suppkey", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "strategy": "timestamp", "target_schema": "snapshots", "target_database": "doug_demo_v2", "updated_at": "_etl_updated_timestamp", "check_cols": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_database": "doug_demo_v2", "target_schema": "snapshots", "unique_key": "s_suppkey", "strategy": "timestamp", "updated_at": "_etl_updated_timestamp"}, "created_at": 1701200844.517324, "relation_name": "doug_demo_v2.snapshots.tpch_supplier_snapshot", "raw_code": "\n\n{{ config(\n    target_database='doug_demo_v2',\n    target_schema='snapshots',\n    unique_key='s_suppkey',\n    strategy='timestamp',\n    updated_at='_etl_updated_timestamp',\n)}}\n\nselect * from {{ source('tpch', 'supplier') }}\n\n", "language": "sql", "refs": [], "sources": [["tpch", "supplier"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.tpch.tpch.supplier"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}}, "snapshot.tpch.tpch_part_snapshot": {"database": "doug_demo_v2", "schema": "snapshots", "name": "tpch_part_snapshot", "resource_type": "snapshot", "package_name": "tpch", "path": "tpch/tpch_part_snapshot.sql", "original_file_path": "snapshots/tpch/tpch_part_snapshot.sql", "unique_id": "snapshot.tpch.tpch_part_snapshot", "fqn": ["tpch", "tpch", "tpch_part_snapshot", "tpch_part_snapshot"], "alias": "tpch_part_snapshot", "checksum": {"name": "sha256", "checksum": "052952412b2ba03ba41cb88d43a5709b18063807c98750501b7288d4c7612642"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "p_partkey", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "strategy": "timestamp", "target_schema": "snapshots", "target_database": "doug_demo_v2", "updated_at": "_etl_updated_timestamp", "check_cols": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_database": "doug_demo_v2", "target_schema": "snapshots", "unique_key": "p_partkey", "strategy": "timestamp", "updated_at": "_etl_updated_timestamp"}, "created_at": 1701200844.523249, "relation_name": "doug_demo_v2.snapshots.tpch_part_snapshot", "raw_code": "\n\n{{ config(\n    target_database='doug_demo_v2',\n    target_schema='snapshots',\n    unique_key='p_partkey',\n    strategy='timestamp',\n    updated_at='_etl_updated_timestamp',\n)}}\n\nselect * from {{ source('tpch', 'part') }}\n\n", "language": "sql", "refs": [], "sources": [["tpch", "part"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.tpch.tpch.part"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}}, "snapshot.tpch.tpch_customer_snapshot": {"database": "doug_demo_v2", "schema": "snapshots", "name": "tpch_customer_snapshot", "resource_type": "snapshot", "package_name": "tpch", "path": "tpch/tpch_customer_snapshot.sql", "original_file_path": "snapshots/tpch/tpch_customer_snapshot.sql", "unique_id": "snapshot.tpch.tpch_customer_snapshot", "fqn": ["tpch", "tpch", "tpch_customer_snapshot", "tpch_customer_snapshot"], "alias": "tpch_customer_snapshot", "checksum": {"name": "sha256", "checksum": "ad4d6b254a3d8260e5de6b207da31f0e294b173ea743eeb8e9e0fd9305216d6b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "c_custkey", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "strategy": "timestamp", "target_schema": "snapshots", "target_database": "doug_demo_v2", "updated_at": "_etl_updated_timestamp", "check_cols": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_database": "doug_demo_v2", "target_schema": "snapshots", "unique_key": "c_custkey", "strategy": "timestamp", "updated_at": "_etl_updated_timestamp"}, "created_at": 1701200844.5264058, "relation_name": "doug_demo_v2.snapshots.tpch_customer_snapshot", "raw_code": "\n\n{{ config(\n    target_database='doug_demo_v2',\n    target_schema='snapshots',\n    unique_key='c_custkey',\n    strategy='timestamp',\n    updated_at='_etl_updated_timestamp',\n)}}\n\nselect * from {{ source('tpch', 'customer') }}\n\n", "language": "sql", "refs": [], "sources": [["tpch", "customer"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.tpch.tpch.customer"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}}, "analysis.tpch.customer_snapshot_query": {"database": "PABLOC", "schema": "MARTS", "name": "customer_snapshot_query", "resource_type": "analysis", "package_name": "tpch", "path": "analysis/customer_snapshot_query.sql", "original_file_path": "analyses/customer_snapshot_query.sql", "unique_id": "analysis.tpch.customer_snapshot_query", "fqn": ["tpch", "analysis", "customer_snapshot_query"], "alias": "customer_snapshot_query", "checksum": {"name": "sha256", "checksum": "3217248d3588f7056ddbc630a1ec7476fbd6e2360ef33253f3a78ce5a1bfa53a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "table"}, "created_at": 1701200844.537975, "relation_name": null, "raw_code": "with counts as (\n    select c_custkey, count(*) as customer_count\n    from {{ ref('tpch_customer_snapshot') }}\n    group by 1\n    having customer_count > 1\n)\n\nselect a.*\nfrom {{ ref('tpch_customer_snapshot') }} a\njoin counts b on a.c_custkey = b.c_custkey\norder by c_custkey, dbt_valid_from", "language": "sql", "refs": [{"name": "tpch_customer_snapshot", "package": null, "version": null}, {"name": "tpch_customer_snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["snapshot.tpch.tpch_customer_snapshot"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}}, "test.tpch.macro_stg_tpch_orders_assert_pos_price": {"database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "macro_stg_tpch_orders_assert_pos_price", "resource_type": "test", "package_name": "tpch", "path": "macro_stg_tpch_orders_assert_pos_price.sql", "original_file_path": "tests/macro_stg_tpch_orders_assert_pos_price.sql", "unique_id": "test.tpch.macro_stg_tpch_orders_assert_pos_price", "fqn": ["tpch", "macro_stg_tpch_orders_assert_pos_price"], "alias": "macro_stg_tpch_orders_assert_pos_price", "checksum": {"name": "sha256", "checksum": "bd383c3dbfe817a0fc1b18fa7431a8d3da0e4b53802e70a10f6c8461bbe89e79"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["finance"], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["finance"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "severity": "error", "tags": ["finance"]}, "created_at": 1701200844.5528698, "relation_name": null, "raw_code": "{{\n    config(\n        enabled=true,\n        severity='error',\n        tags = ['finance']\n    )\n}}\n\n\n{{ test_all_values_gte_zero('stg_tpch_orders', 'total_price') }}", "language": "sql", "refs": [{"name": "stg_tpch_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.tpch.test_all_values_gte_zero"], "nodes": ["model.tpch.stg_tpch_orders"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}}, "test.tpch.stg_tpch_orders_assert_positive_price": {"database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "stg_tpch_orders_assert_positive_price", "resource_type": "test", "package_name": "tpch", "path": "stg_tpch_orders_assert_positive_price.sql", "original_file_path": "tests/stg_tpch_orders_assert_positive_price.sql", "unique_id": "test.tpch.stg_tpch_orders_assert_positive_price", "fqn": ["tpch", "stg_tpch_orders_assert_positive_price"], "alias": "stg_tpch_orders_assert_positive_price", "checksum": {"name": "sha256", "checksum": "8053b8720b4b33690bebc56cb881005b949ee16023e351a1bc962529f18fe038"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["finance"], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["finance"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "severity": "error", "tags": ["finance"]}, "created_at": 1701200844.556355, "relation_name": null, "raw_code": "{{\n    config(\n        enabled=true,\n        severity='error',\n        tags = ['finance']\n    )\n}}\n\nwith orders as ( select * from {{ ref('stg_tpch_orders') }} )\n\nselect *\nfrom   orders \nwhere  total_price < 0", "language": "sql", "refs": [{"name": "stg_tpch_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.tpch.stg_tpch_orders"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}}, "test.tpch.macro_stg_tphc_suppliers_assert_pos_acct_bal": {"database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "macro_stg_tphc_suppliers_assert_pos_acct_bal", "resource_type": "test", "package_name": "tpch", "path": "macro_stg_tphc_suppliers_assert_pos_acct_bal.sql", "original_file_path": "tests/macro_stg_tphc_suppliers_assert_pos_acct_bal.sql", "unique_id": "test.tpch.macro_stg_tphc_suppliers_assert_pos_acct_bal", "fqn": ["tpch", "macro_stg_tphc_suppliers_assert_pos_acct_bal"], "alias": "macro_stg_tphc_suppliers_assert_pos_acct_bal", "checksum": {"name": "sha256", "checksum": "bf636d56abefc837b17711ef1da6b27464592065652f29633fa94905b5eea4cc"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["finance"], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["finance"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "severity": "warn", "tags": ["finance"]}, "created_at": 1701200844.558793, "relation_name": null, "raw_code": "{{\n    config(\n        enabled=true,\n        severity='warn',\n        tags = ['finance']\n    )\n}}\n\n\n{{ test_all_values_gte_zero('stg_tpch_suppliers', 'account_balance') }}", "language": "sql", "refs": [{"name": "stg_tpch_suppliers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.tpch.test_all_values_gte_zero"], "nodes": ["model.tpch.stg_tpch_suppliers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}}, "seed.tpch.snowflake_contract_rates": {"database": "PABLOC", "schema": "MARTS", "name": "snowflake_contract_rates", "resource_type": "seed", "package_name": "tpch", "path": "snowflake_contract_rates.csv", "original_file_path": "seeds/snowflake_contract_rates.csv", "unique_id": "seed.tpch.snowflake_contract_rates", "fqn": ["tpch", "snowflake_contract_rates"], "alias": "snowflake_contract_rates", "checksum": {"name": "sha256", "checksum": "7a45369a64ed269dddd2eee23564d668bcd14ccf702d50a485334398b18c0d29"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"effective_date": "DATE", "rate": "NUMBER"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This is an example of a seed. Seeds are CSV files in your dbt project (typically in your data directory), that dbt can load into your data warehouse using the dbt seed command.\n", "columns": {"effective_date": {"name": "effective_date", "description": "effective date of contract", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rate": {"name": "rate", "description": "rate based on the effective date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://seeds/data.yml", "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"effective_date": "DATE", "rate": "NUMBER"}}, "created_at": 1701200844.6005912, "relation_name": "PABLOC.MARTS.snowflake_contract_rates", "raw_code": "", "root_path": "/Users/pablo.carrera/projects/snowflake-dbt-demo-project/snowflake-dbt-demo-project", "depends_on": {"macros": []}}, "seed.tpch.country_codes": {"database": "PABLOC", "schema": "MARTS", "name": "country_codes", "resource_type": "seed", "package_name": "tpch", "path": "country_codes.csv", "original_file_path": "seeds/country_codes.csv", "unique_id": "seed.tpch.country_codes", "fqn": ["tpch", "country_codes"], "alias": "country_codes", "checksum": {"name": "sha256", "checksum": "ef89ea6f694c374f98a14061acb6674a4337e48262f90b1117e9c8584151b764"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Lookup table for country and two digit ISO codes", "columns": {"Name": {"name": "Name", "description": "Name of the country", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "Code": {"name": "Code", "description": "2-digit ISO code for the country", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://seeds/data.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.601161, "relation_name": "PABLOC.MARTS.country_codes", "raw_code": "", "root_path": "/Users/pablo.carrera/projects/snowflake-dbt-demo-project/snowflake-dbt-demo-project", "depends_on": {"macros": []}}, "test.tpch.unique_stg_tpch_customers_customer_key.7f1a18b1a4": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_key", "model": "{{ get_where_subquery(ref('stg_tpch_customers')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "unique_stg_tpch_customers_customer_key", "resource_type": "test", "package_name": "tpch", "path": "unique_stg_tpch_customers_customer_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.unique_stg_tpch_customers_customer_key.7f1a18b1a4", "fqn": ["tpch", "staging", "tpch", "unique_stg_tpch_customers_customer_key"], "alias": "unique_stg_tpch_customers_customer_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.6348412, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.tpch.stg_tpch_customers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "customer_key", "file_key_name": "models.stg_tpch_customers", "attached_node": "model.tpch.stg_tpch_customers"}, "test.tpch.not_null_stg_tpch_customers_customer_key.a10e15535a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_key", "model": "{{ get_where_subquery(ref('stg_tpch_customers')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "not_null_stg_tpch_customers_customer_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_stg_tpch_customers_customer_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.not_null_stg_tpch_customers_customer_key.a10e15535a", "fqn": ["tpch", "staging", "tpch", "not_null_stg_tpch_customers_customer_key"], "alias": "not_null_stg_tpch_customers_customer_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.635848, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.tpch.stg_tpch_customers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "customer_key", "file_key_name": "models.stg_tpch_customers", "attached_node": "model.tpch.stg_tpch_customers"}, "test.tpch.unique_stg_tpch_line_items_order_item_key.c819d91e0a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "order_item_key", "model": "{{ get_where_subquery(ref('stg_tpch_line_items')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "unique_stg_tpch_line_items_order_item_key", "resource_type": "test", "package_name": "tpch", "path": "unique_stg_tpch_line_items_order_item_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.unique_stg_tpch_line_items_order_item_key.c819d91e0a", "fqn": ["tpch", "staging", "tpch", "unique_stg_tpch_line_items_order_item_key"], "alias": "unique_stg_tpch_line_items_order_item_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.6368818, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_line_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.tpch.stg_tpch_line_items"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "order_item_key", "file_key_name": "models.stg_tpch_line_items", "attached_node": "model.tpch.stg_tpch_line_items"}, "test.tpch.not_null_stg_tpch_line_items_order_item_key.cd47c7a679": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_item_key", "model": "{{ get_where_subquery(ref('stg_tpch_line_items')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "not_null_stg_tpch_line_items_order_item_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_stg_tpch_line_items_order_item_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.not_null_stg_tpch_line_items_order_item_key.cd47c7a679", "fqn": ["tpch", "staging", "tpch", "not_null_stg_tpch_line_items_order_item_key"], "alias": "not_null_stg_tpch_line_items_order_item_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.637789, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_line_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.tpch.stg_tpch_line_items"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "order_item_key", "file_key_name": "models.stg_tpch_line_items", "attached_node": "model.tpch.stg_tpch_line_items"}, "test.tpch.unique_stg_tpch_nations_nation_key.9e3675553d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "nation_key", "model": "{{ get_where_subquery(ref('stg_tpch_nations')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "unique_stg_tpch_nations_nation_key", "resource_type": "test", "package_name": "tpch", "path": "unique_stg_tpch_nations_nation_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.unique_stg_tpch_nations_nation_key.9e3675553d", "fqn": ["tpch", "staging", "tpch", "unique_stg_tpch_nations_nation_key"], "alias": "unique_stg_tpch_nations_nation_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.638697, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_nations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.tpch.stg_tpch_nations"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "nation_key", "file_key_name": "models.stg_tpch_nations", "attached_node": "model.tpch.stg_tpch_nations"}, "test.tpch.not_null_stg_tpch_nations_nation_key.d0c2fe32ed": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "nation_key", "model": "{{ get_where_subquery(ref('stg_tpch_nations')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "not_null_stg_tpch_nations_nation_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_stg_tpch_nations_nation_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.not_null_stg_tpch_nations_nation_key.d0c2fe32ed", "fqn": ["tpch", "staging", "tpch", "not_null_stg_tpch_nations_nation_key"], "alias": "not_null_stg_tpch_nations_nation_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.6396139, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_nations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.tpch.stg_tpch_nations"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "nation_key", "file_key_name": "models.stg_tpch_nations", "attached_node": "model.tpch.stg_tpch_nations"}, "test.tpch.unique_stg_tpch_orders_order_key.bd29f13cc9": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "order_key", "model": "{{ get_where_subquery(ref('stg_tpch_orders')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "unique_stg_tpch_orders_order_key", "resource_type": "test", "package_name": "tpch", "path": "unique_stg_tpch_orders_order_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.unique_stg_tpch_orders_order_key.bd29f13cc9", "fqn": ["tpch", "staging", "tpch", "unique_stg_tpch_orders_order_key"], "alias": "unique_stg_tpch_orders_order_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.640546, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.tpch.stg_tpch_orders"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "order_key", "file_key_name": "models.stg_tpch_orders", "attached_node": "model.tpch.stg_tpch_orders"}, "test.tpch.not_null_stg_tpch_orders_order_key.bb22e75ae8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_key", "model": "{{ get_where_subquery(ref('stg_tpch_orders')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "not_null_stg_tpch_orders_order_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_stg_tpch_orders_order_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.not_null_stg_tpch_orders_order_key.bb22e75ae8", "fqn": ["tpch", "staging", "tpch", "not_null_stg_tpch_orders_order_key"], "alias": "not_null_stg_tpch_orders_order_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.6415958, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.tpch.stg_tpch_orders"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "order_key", "file_key_name": "models.stg_tpch_orders", "attached_node": "model.tpch.stg_tpch_orders"}, "test.tpch.unique_stg_tpch_part_suppliers_part_supplier_key.96ab01c1ae": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "part_supplier_key", "model": "{{ get_where_subquery(ref('stg_tpch_part_suppliers')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "unique_stg_tpch_part_suppliers_part_supplier_key", "resource_type": "test", "package_name": "tpch", "path": "unique_stg_tpch_part_suppliers_part_supplier_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.unique_stg_tpch_part_suppliers_part_supplier_key.96ab01c1ae", "fqn": ["tpch", "staging", "tpch", "unique_stg_tpch_part_suppliers_part_supplier_key"], "alias": "unique_stg_tpch_part_suppliers_part_supplier_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.6424818, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_part_suppliers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.tpch.stg_tpch_part_suppliers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "part_supplier_key", "file_key_name": "models.stg_tpch_part_suppliers", "attached_node": "model.tpch.stg_tpch_part_suppliers"}, "test.tpch.not_null_stg_tpch_part_suppliers_part_supplier_key.3cc6ccee2e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "part_supplier_key", "model": "{{ get_where_subquery(ref('stg_tpch_part_suppliers')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "not_null_stg_tpch_part_suppliers_part_supplier_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_stg_tpch_part_suppliers_part_supplier_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.not_null_stg_tpch_part_suppliers_part_supplier_key.3cc6ccee2e", "fqn": ["tpch", "staging", "tpch", "not_null_stg_tpch_part_suppliers_part_supplier_key"], "alias": "not_null_stg_tpch_part_suppliers_part_supplier_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.643368, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_part_suppliers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.tpch.stg_tpch_part_suppliers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "part_supplier_key", "file_key_name": "models.stg_tpch_part_suppliers", "attached_node": "model.tpch.stg_tpch_part_suppliers"}, "test.tpch.unique_stg_tpch_parts_part_key.afbc7ad489": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "part_key", "model": "{{ get_where_subquery(ref('stg_tpch_parts')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "unique_stg_tpch_parts_part_key", "resource_type": "test", "package_name": "tpch", "path": "unique_stg_tpch_parts_part_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.unique_stg_tpch_parts_part_key.afbc7ad489", "fqn": ["tpch", "staging", "tpch", "unique_stg_tpch_parts_part_key"], "alias": "unique_stg_tpch_parts_part_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.6442618, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_parts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.tpch.stg_tpch_parts"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "part_key", "file_key_name": "models.stg_tpch_parts", "attached_node": "model.tpch.stg_tpch_parts"}, "test.tpch.not_null_stg_tpch_parts_part_key.cc8e610420": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "part_key", "model": "{{ get_where_subquery(ref('stg_tpch_parts')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "not_null_stg_tpch_parts_part_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_stg_tpch_parts_part_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.not_null_stg_tpch_parts_part_key.cc8e610420", "fqn": ["tpch", "staging", "tpch", "not_null_stg_tpch_parts_part_key"], "alias": "not_null_stg_tpch_parts_part_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.645144, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_parts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.tpch.stg_tpch_parts"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "part_key", "file_key_name": "models.stg_tpch_parts", "attached_node": "model.tpch.stg_tpch_parts"}, "test.tpch.unique_stg_tpch_regions_region_key.b2bd891bb5": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "region_key", "model": "{{ get_where_subquery(ref('stg_tpch_regions')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "unique_stg_tpch_regions_region_key", "resource_type": "test", "package_name": "tpch", "path": "unique_stg_tpch_regions_region_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.unique_stg_tpch_regions_region_key.b2bd891bb5", "fqn": ["tpch", "staging", "tpch", "unique_stg_tpch_regions_region_key"], "alias": "unique_stg_tpch_regions_region_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.646192, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_regions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.tpch.stg_tpch_regions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "region_key", "file_key_name": "models.stg_tpch_regions", "attached_node": "model.tpch.stg_tpch_regions"}, "test.tpch.not_null_stg_tpch_regions_region_key.869fa0b326": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "region_key", "model": "{{ get_where_subquery(ref('stg_tpch_regions')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "not_null_stg_tpch_regions_region_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_stg_tpch_regions_region_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.not_null_stg_tpch_regions_region_key.869fa0b326", "fqn": ["tpch", "staging", "tpch", "not_null_stg_tpch_regions_region_key"], "alias": "not_null_stg_tpch_regions_region_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.647071, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_regions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.tpch.stg_tpch_regions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "region_key", "file_key_name": "models.stg_tpch_regions", "attached_node": "model.tpch.stg_tpch_regions"}, "test.tpch.unique_stg_tpch_suppliers_supplier_key.6215308464": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "supplier_key", "model": "{{ get_where_subquery(ref('stg_tpch_suppliers')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "unique_stg_tpch_suppliers_supplier_key", "resource_type": "test", "package_name": "tpch", "path": "unique_stg_tpch_suppliers_supplier_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.unique_stg_tpch_suppliers_supplier_key.6215308464", "fqn": ["tpch", "staging", "tpch", "unique_stg_tpch_suppliers_supplier_key"], "alias": "unique_stg_tpch_suppliers_supplier_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.6479628, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_suppliers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.tpch.stg_tpch_suppliers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "supplier_key", "file_key_name": "models.stg_tpch_suppliers", "attached_node": "model.tpch.stg_tpch_suppliers"}, "test.tpch.not_null_stg_tpch_suppliers_supplier_key.97c31a786d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "supplier_key", "model": "{{ get_where_subquery(ref('stg_tpch_suppliers')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "not_null_stg_tpch_suppliers_supplier_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_stg_tpch_suppliers_supplier_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.not_null_stg_tpch_suppliers_supplier_key.97c31a786d", "fqn": ["tpch", "staging", "tpch", "not_null_stg_tpch_suppliers_supplier_key"], "alias": "not_null_stg_tpch_suppliers_supplier_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.648862, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_tpch_suppliers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.tpch.stg_tpch_suppliers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "supplier_key", "file_key_name": "models.stg_tpch_suppliers", "attached_node": "model.tpch.stg_tpch_suppliers"}, "test.tpch.unique_dim_customers_customer_key.ad8156656e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_key", "model": "{{ get_where_subquery(ref('dim_customers')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "unique_dim_customers_customer_key", "resource_type": "test", "package_name": "tpch", "path": "unique_dim_customers_customer_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.tpch.unique_dim_customers_customer_key.ad8156656e", "fqn": ["tpch", "marts", "core", "unique_dim_customers_customer_key"], "alias": "unique_dim_customers_customer_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.6718569, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.tpch.dim_customers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "customer_key", "file_key_name": "models.dim_customers", "attached_node": "model.tpch.dim_customers"}, "test.tpch.not_null_dim_customers_customer_key.4bebfb3411": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_key", "model": "{{ get_where_subquery(ref('dim_customers')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "not_null_dim_customers_customer_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_dim_customers_customer_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.tpch.not_null_dim_customers_customer_key.4bebfb3411", "fqn": ["tpch", "marts", "core", "not_null_dim_customers_customer_key"], "alias": "not_null_dim_customers_customer_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.67279, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.tpch.dim_customers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "customer_key", "file_key_name": "models.dim_customers", "attached_node": "model.tpch.dim_customers"}, "test.tpch.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.dad4601b69": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["AFRICA", "MIDDLE EAST", "ASIA", "EUROPE", "AMERICA"], "column_name": "region", "model": "{{ get_where_subquery(ref('dim_customers')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA", "resource_type": "test", "package_name": "tpch", "path": "accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.tpch.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.dad4601b69", "fqn": ["tpch", "marts", "core", "accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA"], "alias": "accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc"}, "created_at": 1701200844.6739042, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc\") }}", "language": "sql", "refs": [{"name": "dim_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.tpch.dim_customers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "region", "file_key_name": "models.dim_customers", "attached_node": "model.tpch.dim_customers"}, "test.tpch.unique_dim_parts_part_key.712df18d58": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "part_key", "model": "{{ get_where_subquery(ref('dim_parts')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "unique_dim_parts_part_key", "resource_type": "test", "package_name": "tpch", "path": "unique_dim_parts_part_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.tpch.unique_dim_parts_part_key.712df18d58", "fqn": ["tpch", "marts", "core", "unique_dim_parts_part_key"], "alias": "unique_dim_parts_part_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.6805718, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_parts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.tpch.dim_parts"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "part_key", "file_key_name": "models.dim_parts", "attached_node": "model.tpch.dim_parts"}, "test.tpch.not_null_dim_parts_part_key.4358f880d9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "part_key", "model": "{{ get_where_subquery(ref('dim_parts')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "not_null_dim_parts_part_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_dim_parts_part_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.tpch.not_null_dim_parts_part_key.4358f880d9", "fqn": ["tpch", "marts", "core", "not_null_dim_parts_part_key"], "alias": "not_null_dim_parts_part_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.68149, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_parts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.tpch.dim_parts"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "part_key", "file_key_name": "models.dim_parts", "attached_node": "model.tpch.dim_parts"}, "test.tpch.unique_dim_suppliers_supplier_key.58fc3e4770": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "supplier_key", "model": "{{ get_where_subquery(ref('dim_suppliers')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "unique_dim_suppliers_supplier_key", "resource_type": "test", "package_name": "tpch", "path": "unique_dim_suppliers_supplier_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.tpch.unique_dim_suppliers_supplier_key.58fc3e4770", "fqn": ["tpch", "marts", "core", "unique_dim_suppliers_supplier_key"], "alias": "unique_dim_suppliers_supplier_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.68241, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_suppliers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.tpch.dim_suppliers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "supplier_key", "file_key_name": "models.dim_suppliers", "attached_node": "model.tpch.dim_suppliers"}, "test.tpch.not_null_dim_suppliers_supplier_key.4315350956": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "supplier_key", "model": "{{ get_where_subquery(ref('dim_suppliers')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "not_null_dim_suppliers_supplier_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_dim_suppliers_supplier_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.tpch.not_null_dim_suppliers_supplier_key.4315350956", "fqn": ["tpch", "marts", "core", "not_null_dim_suppliers_supplier_key"], "alias": "not_null_dim_suppliers_supplier_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.683466, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_suppliers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.tpch.dim_suppliers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "supplier_key", "file_key_name": "models.dim_suppliers", "attached_node": "model.tpch.dim_suppliers"}, "test.tpch.unique_fct_order_items_order_item_key.4d6426a255": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "order_item_key", "model": "{{ get_where_subquery(ref('fct_order_items')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "unique_fct_order_items_order_item_key", "resource_type": "test", "package_name": "tpch", "path": "unique_fct_order_items_order_item_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.tpch.unique_fct_order_items_order_item_key.4d6426a255", "fqn": ["tpch", "marts", "core", "unique_fct_order_items_order_item_key"], "alias": "unique_fct_order_items_order_item_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.684384, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_order_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.tpch.fct_order_items"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "order_item_key", "file_key_name": "models.fct_order_items", "attached_node": "model.tpch.fct_order_items"}, "test.tpch.not_null_fct_order_items_order_item_key.47516a6371": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_item_key", "model": "{{ get_where_subquery(ref('fct_order_items')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "not_null_fct_order_items_order_item_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_fct_order_items_order_item_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.tpch.not_null_fct_order_items_order_item_key.47516a6371", "fqn": ["tpch", "marts", "core", "not_null_fct_order_items_order_item_key"], "alias": "not_null_fct_order_items_order_item_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.685299, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_order_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.tpch.fct_order_items"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "order_item_key", "file_key_name": "models.fct_order_items", "attached_node": "model.tpch.fct_order_items"}, "test.tpch.unique_fct_orders_order_key.f5e7a90273": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "order_key", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "unique_fct_orders_order_key", "resource_type": "test", "package_name": "tpch", "path": "unique_fct_orders_order_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.tpch.unique_fct_orders_order_key.f5e7a90273", "fqn": ["tpch", "marts", "core", "unique_fct_orders_order_key"], "alias": "unique_fct_orders_order_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.686197, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.tpch.fct_orders"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "order_key", "file_key_name": "models.fct_orders", "attached_node": "model.tpch.fct_orders"}, "test.tpch.not_null_fct_orders_order_key.6a6f83ab15": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_key", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "not_null_fct_orders_order_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_fct_orders_order_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.tpch.not_null_fct_orders_order_key.6a6f83ab15", "fqn": ["tpch", "marts", "core", "not_null_fct_orders_order_key"], "alias": "not_null_fct_orders_order_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.687084, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.tpch.fct_orders"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "order_key", "file_key_name": "models.fct_orders", "attached_node": "model.tpch.fct_orders"}, "test.tpch.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_customers')", "field": "customer_key", "column_name": "customer_key", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "relationships_fct_orders_customer_key__customer_key__ref_dim_customers_", "resource_type": "test", "package_name": "tpch", "path": "relationships_fct_orders_01863b95ad98bb6a66c90da6f065c2ae.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.tpch.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b", "fqn": ["tpch", "marts", "core", "relationships_fct_orders_customer_key__customer_key__ref_dim_customers_"], "alias": "relationships_fct_orders_01863b95ad98bb6a66c90da6f065c2ae", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_orders_01863b95ad98bb6a66c90da6f065c2ae", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "error", "alias": "relationships_fct_orders_01863b95ad98bb6a66c90da6f065c2ae"}, "created_at": 1701200844.688548, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"relationships_fct_orders_01863b95ad98bb6a66c90da6f065c2ae\") }}", "language": "sql", "refs": [{"name": "dim_customers", "package": null, "version": null}, {"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.tpch.dim_customers", "model.tpch.fct_orders"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "customer_key", "file_key_name": "models.fct_orders", "attached_node": "model.tpch.fct_orders"}, "test.tpch.unique_order_items_order_item_key.43a40b2837": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "order_item_key", "model": "{{ get_where_subquery(ref('order_items')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "unique_order_items_order_item_key", "resource_type": "test", "package_name": "tpch", "path": "unique_order_items_order_item_key.sql", "original_file_path": "models/marts/intermediate/intermediate.yml", "unique_id": "test.tpch.unique_order_items_order_item_key.43a40b2837", "fqn": ["tpch", "marts", "intermediate", "unique_order_items_order_item_key"], "alias": "unique_order_items_order_item_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.733854, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "order_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.tpch.order_items"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "order_item_key", "file_key_name": "models.order_items", "attached_node": "model.tpch.order_items"}, "test.tpch.not_null_order_items_order_item_key.44b9fa7311": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_item_key", "model": "{{ get_where_subquery(ref('order_items')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "not_null_order_items_order_item_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_order_items_order_item_key.sql", "original_file_path": "models/marts/intermediate/intermediate.yml", "unique_id": "test.tpch.not_null_order_items_order_item_key.44b9fa7311", "fqn": ["tpch", "marts", "intermediate", "not_null_order_items_order_item_key"], "alias": "not_null_order_items_order_item_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.7348669, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "order_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.tpch.order_items"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "order_item_key", "file_key_name": "models.order_items", "attached_node": "model.tpch.order_items"}, "test.tpch.unique_part_suppliers_part_supplier_key.909477afa8": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "part_supplier_key", "model": "{{ get_where_subquery(ref('part_suppliers')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "unique_part_suppliers_part_supplier_key", "resource_type": "test", "package_name": "tpch", "path": "unique_part_suppliers_part_supplier_key.sql", "original_file_path": "models/marts/intermediate/intermediate.yml", "unique_id": "test.tpch.unique_part_suppliers_part_supplier_key.909477afa8", "fqn": ["tpch", "marts", "intermediate", "unique_part_suppliers_part_supplier_key"], "alias": "unique_part_suppliers_part_supplier_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.735786, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "part_suppliers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.tpch.part_suppliers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "part_supplier_key", "file_key_name": "models.part_suppliers", "attached_node": "model.tpch.part_suppliers"}, "test.tpch.not_null_part_suppliers_part_supplier_key.b8b2022ed3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "part_supplier_key", "model": "{{ get_where_subquery(ref('part_suppliers')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "not_null_part_suppliers_part_supplier_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_part_suppliers_part_supplier_key.sql", "original_file_path": "models/marts/intermediate/intermediate.yml", "unique_id": "test.tpch.not_null_part_suppliers_part_supplier_key.b8b2022ed3", "fqn": ["tpch", "marts", "intermediate", "not_null_part_suppliers_part_supplier_key"], "alias": "not_null_part_suppliers_part_supplier_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.7368178, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "part_suppliers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.tpch.part_suppliers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "part_supplier_key", "file_key_name": "models.part_suppliers", "attached_node": "model.tpch.part_suppliers"}, "test.tpch.unique_materialization_incremental_customer_key.325783f327": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_key", "model": "{{ get_where_subquery(ref('materialization_incremental')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "unique_materialization_incremental_customer_key", "resource_type": "test", "package_name": "tpch", "path": "unique_materialization_incremental_customer_key.sql", "original_file_path": "models/demo_examples/demo_examples.yml", "unique_id": "test.tpch.unique_materialization_incremental_customer_key.325783f327", "fqn": ["tpch", "demo_examples", "unique_materialization_incremental_customer_key"], "alias": "unique_materialization_incremental_customer_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.743927, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "materialization_incremental", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.tpch.materialization_incremental"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "customer_key", "file_key_name": "models.materialization_incremental", "attached_node": "model.tpch.materialization_incremental"}, "test.tpch.not_null_materialization_incremental_customer_key.e2b95d8009": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_key", "model": "{{ get_where_subquery(ref('materialization_incremental')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "not_null_materialization_incremental_customer_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_materialization_incremental_customer_key.sql", "original_file_path": "models/demo_examples/demo_examples.yml", "unique_id": "test.tpch.not_null_materialization_incremental_customer_key.e2b95d8009", "fqn": ["tpch", "demo_examples", "not_null_materialization_incremental_customer_key"], "alias": "not_null_materialization_incremental_customer_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.7449, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "materialization_incremental", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.tpch.materialization_incremental"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "customer_key", "file_key_name": "models.materialization_incremental", "attached_node": "model.tpch.materialization_incremental"}, "test.tpch.unique_use_variables_order_item_key.fb5576fe0e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "order_item_key", "model": "{{ get_where_subquery(ref('use_variables')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "unique_use_variables_order_item_key", "resource_type": "test", "package_name": "tpch", "path": "unique_use_variables_order_item_key.sql", "original_file_path": "models/demo_examples/demo_examples.yml", "unique_id": "test.tpch.unique_use_variables_order_item_key.fb5576fe0e", "fqn": ["tpch", "demo_examples", "unique_use_variables_order_item_key"], "alias": "unique_use_variables_order_item_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.745806, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "use_variables", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.tpch.use_variables"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "order_item_key", "file_key_name": "models.use_variables", "attached_node": "model.tpch.use_variables"}, "test.tpch.not_null_use_variables_order_item_key.c2bd602686": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_item_key", "model": "{{ get_where_subquery(ref('use_variables')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "not_null_use_variables_order_item_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_use_variables_order_item_key.sql", "original_file_path": "models/demo_examples/demo_examples.yml", "unique_id": "test.tpch.not_null_use_variables_order_item_key.c2bd602686", "fqn": ["tpch", "demo_examples", "not_null_use_variables_order_item_key"], "alias": "not_null_use_variables_order_item_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.746853, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "use_variables", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.tpch.use_variables"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "order_item_key", "file_key_name": "models.use_variables", "attached_node": "model.tpch.use_variables"}, "test.tpch.source_not_null_dbtc_link_clicked_link.f7c8e69ba4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "link", "model": "{{ get_where_subquery(source('dbtc', 'link_clicked')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_not_null_dbtc_link_clicked_link", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_dbtc_link_clicked_link.sql", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "test.tpch.source_not_null_dbtc_link_clicked_link.f7c8e69ba4", "fqn": ["tpch", "staging", "segment", "source_not_null_dbtc_link_clicked_link"], "alias": "source_not_null_dbtc_link_clicked_link", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1701200844.758424, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [], "sources": [["dbtc", "link_clicked"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tpch.dbtc.link_clicked"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "link", "file_key_name": "sources.dbtc", "attached_node": null}, "test.tpch.source_not_null_dbtc_link_clicked_id.9028bfe6aa": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('dbtc', 'link_clicked')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_not_null_dbtc_link_clicked_id", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_dbtc_link_clicked_id.sql", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "test.tpch.source_not_null_dbtc_link_clicked_id.9028bfe6aa", "fqn": ["tpch", "staging", "segment", "source_not_null_dbtc_link_clicked_id"], "alias": "source_not_null_dbtc_link_clicked_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.759501, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbtc", "link_clicked"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tpch.dbtc.link_clicked"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.dbtc", "attached_node": null}, "test.tpch.source_unique_dbtc_link_clicked_id.6a057563bc": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('dbtc', 'link_clicked')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_unique_dbtc_link_clicked_id", "resource_type": "test", "package_name": "tpch", "path": "source_unique_dbtc_link_clicked_id.sql", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "test.tpch.source_unique_dbtc_link_clicked_id.6a057563bc", "fqn": ["tpch", "staging", "segment", "source_unique_dbtc_link_clicked_id"], "alias": "source_unique_dbtc_link_clicked_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.760447, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbtc", "link_clicked"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tpch.dbtc.link_clicked"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.dbtc", "attached_node": null}, "test.tpch.source_not_null_dbtc_link_clicked_event.7882b2f4f6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event", "model": "{{ get_where_subquery(source('dbtc', 'link_clicked')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_not_null_dbtc_link_clicked_event", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_dbtc_link_clicked_event.sql", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "test.tpch.source_not_null_dbtc_link_clicked_event.7882b2f4f6", "fqn": ["tpch", "staging", "segment", "source_not_null_dbtc_link_clicked_event"], "alias": "source_not_null_dbtc_link_clicked_event", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.76151, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbtc", "link_clicked"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tpch.dbtc.link_clicked"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event", "file_key_name": "sources.dbtc", "attached_node": null}, "test.tpch.source_not_null_dbtc_link_clicked_sent_at.39cf8a9ef9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "sent_at", "model": "{{ get_where_subquery(source('dbtc', 'link_clicked')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_not_null_dbtc_link_clicked_sent_at", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_dbtc_link_clicked_sent_at.sql", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "test.tpch.source_not_null_dbtc_link_clicked_sent_at.39cf8a9ef9", "fqn": ["tpch", "staging", "segment", "source_not_null_dbtc_link_clicked_sent_at"], "alias": "source_not_null_dbtc_link_clicked_sent_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.762399, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbtc", "link_clicked"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tpch.dbtc.link_clicked"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "sent_at", "file_key_name": "sources.dbtc", "attached_node": null}, "test.tpch.source_not_null_dbtc_pages_id.f6b6a8c945": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('dbtc', 'pages')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_not_null_dbtc_pages_id", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_dbtc_pages_id.sql", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "test.tpch.source_not_null_dbtc_pages_id.f6b6a8c945", "fqn": ["tpch", "staging", "segment", "source_not_null_dbtc_pages_id"], "alias": "source_not_null_dbtc_pages_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.763675, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbtc", "pages"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tpch.dbtc.pages"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.dbtc", "attached_node": null}, "test.tpch.source_unique_dbtc_pages_id.8457cf34c6": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('dbtc', 'pages')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_unique_dbtc_pages_id", "resource_type": "test", "package_name": "tpch", "path": "source_unique_dbtc_pages_id.sql", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "test.tpch.source_unique_dbtc_pages_id.8457cf34c6", "fqn": ["tpch", "staging", "segment", "source_unique_dbtc_pages_id"], "alias": "source_unique_dbtc_pages_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.764596, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbtc", "pages"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tpch.dbtc.pages"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.dbtc", "attached_node": null}, "test.tpch.source_not_null_dbtc_pages_sent_at.485c11a73d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "sent_at", "model": "{{ get_where_subquery(source('dbtc', 'pages')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_not_null_dbtc_pages_sent_at", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_dbtc_pages_sent_at.sql", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "test.tpch.source_not_null_dbtc_pages_sent_at.485c11a73d", "fqn": ["tpch", "staging", "segment", "source_not_null_dbtc_pages_sent_at"], "alias": "source_not_null_dbtc_pages_sent_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.765661, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbtc", "pages"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tpch.dbtc.pages"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "sent_at", "file_key_name": "sources.dbtc", "attached_node": null}, "test.tpch.source_not_null_dbtc_tracks_event_text.80a027ce56": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_text", "model": "{{ get_where_subquery(source('dbtc', 'tracks')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_not_null_dbtc_tracks_event_text", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_dbtc_tracks_event_text.sql", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "test.tpch.source_not_null_dbtc_tracks_event_text.80a027ce56", "fqn": ["tpch", "staging", "segment", "source_not_null_dbtc_tracks_event_text"], "alias": "source_not_null_dbtc_tracks_event_text", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.766655, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbtc", "tracks"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tpch.dbtc.tracks"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_text", "file_key_name": "sources.dbtc", "attached_node": null}, "test.tpch.source_not_null_dbtc_tracks_id.a88be3eab6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('dbtc', 'tracks')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_not_null_dbtc_tracks_id", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_dbtc_tracks_id.sql", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "test.tpch.source_not_null_dbtc_tracks_id.a88be3eab6", "fqn": ["tpch", "staging", "segment", "source_not_null_dbtc_tracks_id"], "alias": "source_not_null_dbtc_tracks_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.767925, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbtc", "tracks"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tpch.dbtc.tracks"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.dbtc", "attached_node": null}, "test.tpch.source_unique_dbtc_tracks_id.d4b89ee628": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('dbtc', 'tracks')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_unique_dbtc_tracks_id", "resource_type": "test", "package_name": "tpch", "path": "source_unique_dbtc_tracks_id.sql", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "test.tpch.source_unique_dbtc_tracks_id.d4b89ee628", "fqn": ["tpch", "staging", "segment", "source_unique_dbtc_tracks_id"], "alias": "source_unique_dbtc_tracks_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.769003, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbtc", "tracks"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tpch.dbtc.tracks"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.dbtc", "attached_node": null}, "test.tpch.source_not_null_dbtc_tracks_event.1fd1e17274": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event", "model": "{{ get_where_subquery(source('dbtc', 'tracks')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_not_null_dbtc_tracks_event", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_dbtc_tracks_event.sql", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "test.tpch.source_not_null_dbtc_tracks_event.1fd1e17274", "fqn": ["tpch", "staging", "segment", "source_not_null_dbtc_tracks_event"], "alias": "source_not_null_dbtc_tracks_event", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.770314, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbtc", "tracks"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tpch.dbtc.tracks"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event", "file_key_name": "sources.dbtc", "attached_node": null}, "test.tpch.source_not_null_dbtc_tracks_sent_at.1ad9794804": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "sent_at", "model": "{{ get_where_subquery(source('dbtc', 'tracks')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_not_null_dbtc_tracks_sent_at", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_dbtc_tracks_sent_at.sql", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "test.tpch.source_not_null_dbtc_tracks_sent_at.1ad9794804", "fqn": ["tpch", "staging", "segment", "source_not_null_dbtc_tracks_sent_at"], "alias": "source_not_null_dbtc_tracks_sent_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.771342, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbtc", "tracks"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tpch.dbtc.tracks"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "sent_at", "file_key_name": "sources.dbtc", "attached_node": null}, "test.tpch.source_not_null_yahooquery_link_clicked_link.3620c522a2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "link", "model": "{{ get_where_subquery(source('yahooquery', 'link_clicked')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_not_null_yahooquery_link_clicked_link", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_yahooquery_link_clicked_link.sql", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "test.tpch.source_not_null_yahooquery_link_clicked_link.3620c522a2", "fqn": ["tpch", "staging", "segment", "source_not_null_yahooquery_link_clicked_link"], "alias": "source_not_null_yahooquery_link_clicked_link", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1701200844.772434, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [], "sources": [["yahooquery", "link_clicked"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tpch.yahooquery.link_clicked"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "link", "file_key_name": "sources.yahooquery", "attached_node": null}, "test.tpch.source_not_null_yahooquery_link_clicked_id.c548e15a7c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('yahooquery', 'link_clicked')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_not_null_yahooquery_link_clicked_id", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_yahooquery_link_clicked_id.sql", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "test.tpch.source_not_null_yahooquery_link_clicked_id.c548e15a7c", "fqn": ["tpch", "staging", "segment", "source_not_null_yahooquery_link_clicked_id"], "alias": "source_not_null_yahooquery_link_clicked_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.773365, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["yahooquery", "link_clicked"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tpch.yahooquery.link_clicked"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.yahooquery", "attached_node": null}, "test.tpch.source_unique_yahooquery_link_clicked_id.8d33aca289": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('yahooquery', 'link_clicked')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_unique_yahooquery_link_clicked_id", "resource_type": "test", "package_name": "tpch", "path": "source_unique_yahooquery_link_clicked_id.sql", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "test.tpch.source_unique_yahooquery_link_clicked_id.8d33aca289", "fqn": ["tpch", "staging", "segment", "source_unique_yahooquery_link_clicked_id"], "alias": "source_unique_yahooquery_link_clicked_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.774376, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["yahooquery", "link_clicked"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tpch.yahooquery.link_clicked"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.yahooquery", "attached_node": null}, "test.tpch.source_not_null_yahooquery_link_clicked_event.71e08699a9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event", "model": "{{ get_where_subquery(source('yahooquery', 'link_clicked')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_not_null_yahooquery_link_clicked_event", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_yahooquery_link_clicked_event.sql", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "test.tpch.source_not_null_yahooquery_link_clicked_event.71e08699a9", "fqn": ["tpch", "staging", "segment", "source_not_null_yahooquery_link_clicked_event"], "alias": "source_not_null_yahooquery_link_clicked_event", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.7755651, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["yahooquery", "link_clicked"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tpch.yahooquery.link_clicked"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event", "file_key_name": "sources.yahooquery", "attached_node": null}, "test.tpch.source_not_null_yahooquery_link_clicked_sent_at.8b7ef7ad21": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "sent_at", "model": "{{ get_where_subquery(source('yahooquery', 'link_clicked')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_not_null_yahooquery_link_clicked_sent_at", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_yahooquery_link_clicked_sent_at.sql", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "test.tpch.source_not_null_yahooquery_link_clicked_sent_at.8b7ef7ad21", "fqn": ["tpch", "staging", "segment", "source_not_null_yahooquery_link_clicked_sent_at"], "alias": "source_not_null_yahooquery_link_clicked_sent_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.776493, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["yahooquery", "link_clicked"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tpch.yahooquery.link_clicked"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "sent_at", "file_key_name": "sources.yahooquery", "attached_node": null}, "test.tpch.source_not_null_yahooquery_pages_id.9f283dcda5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('yahooquery', 'pages')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_not_null_yahooquery_pages_id", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_yahooquery_pages_id.sql", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "test.tpch.source_not_null_yahooquery_pages_id.9f283dcda5", "fqn": ["tpch", "staging", "segment", "source_not_null_yahooquery_pages_id"], "alias": "source_not_null_yahooquery_pages_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.7775402, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["yahooquery", "pages"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tpch.yahooquery.pages"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.yahooquery", "attached_node": null}, "test.tpch.source_unique_yahooquery_pages_id.6bf98eb61d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('yahooquery', 'pages')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_unique_yahooquery_pages_id", "resource_type": "test", "package_name": "tpch", "path": "source_unique_yahooquery_pages_id.sql", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "test.tpch.source_unique_yahooquery_pages_id.6bf98eb61d", "fqn": ["tpch", "staging", "segment", "source_unique_yahooquery_pages_id"], "alias": "source_unique_yahooquery_pages_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.7786298, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["yahooquery", "pages"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tpch.yahooquery.pages"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.yahooquery", "attached_node": null}, "test.tpch.source_not_null_yahooquery_pages_sent_at.318734adee": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "sent_at", "model": "{{ get_where_subquery(source('yahooquery', 'pages')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_not_null_yahooquery_pages_sent_at", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_yahooquery_pages_sent_at.sql", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "test.tpch.source_not_null_yahooquery_pages_sent_at.318734adee", "fqn": ["tpch", "staging", "segment", "source_not_null_yahooquery_pages_sent_at"], "alias": "source_not_null_yahooquery_pages_sent_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.779815, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["yahooquery", "pages"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tpch.yahooquery.pages"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "sent_at", "file_key_name": "sources.yahooquery", "attached_node": null}, "test.tpch.source_not_null_yahooquery_tracks_event_text.700c8cdeb6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_text", "model": "{{ get_where_subquery(source('yahooquery', 'tracks')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_not_null_yahooquery_tracks_event_text", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_yahooquery_tracks_event_text.sql", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "test.tpch.source_not_null_yahooquery_tracks_event_text.700c8cdeb6", "fqn": ["tpch", "staging", "segment", "source_not_null_yahooquery_tracks_event_text"], "alias": "source_not_null_yahooquery_tracks_event_text", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.78101, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["yahooquery", "tracks"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tpch.yahooquery.tracks"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_text", "file_key_name": "sources.yahooquery", "attached_node": null}, "test.tpch.source_not_null_yahooquery_tracks_id.621874b412": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('yahooquery', 'tracks')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_not_null_yahooquery_tracks_id", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_yahooquery_tracks_id.sql", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "test.tpch.source_not_null_yahooquery_tracks_id.621874b412", "fqn": ["tpch", "staging", "segment", "source_not_null_yahooquery_tracks_id"], "alias": "source_not_null_yahooquery_tracks_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.7819479, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["yahooquery", "tracks"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tpch.yahooquery.tracks"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.yahooquery", "attached_node": null}, "test.tpch.source_unique_yahooquery_tracks_id.7c22f538c9": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('yahooquery', 'tracks')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_unique_yahooquery_tracks_id", "resource_type": "test", "package_name": "tpch", "path": "source_unique_yahooquery_tracks_id.sql", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "test.tpch.source_unique_yahooquery_tracks_id.7c22f538c9", "fqn": ["tpch", "staging", "segment", "source_unique_yahooquery_tracks_id"], "alias": "source_unique_yahooquery_tracks_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.7829602, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["yahooquery", "tracks"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tpch.yahooquery.tracks"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.yahooquery", "attached_node": null}, "test.tpch.source_not_null_yahooquery_tracks_event.70b5c344c0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event", "model": "{{ get_where_subquery(source('yahooquery', 'tracks')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_not_null_yahooquery_tracks_event", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_yahooquery_tracks_event.sql", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "test.tpch.source_not_null_yahooquery_tracks_event.70b5c344c0", "fqn": ["tpch", "staging", "segment", "source_not_null_yahooquery_tracks_event"], "alias": "source_not_null_yahooquery_tracks_event", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.783925, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["yahooquery", "tracks"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tpch.yahooquery.tracks"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event", "file_key_name": "sources.yahooquery", "attached_node": null}, "test.tpch.source_not_null_yahooquery_tracks_sent_at.e5fa5c0d96": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "sent_at", "model": "{{ get_where_subquery(source('yahooquery', 'tracks')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_not_null_yahooquery_tracks_sent_at", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_yahooquery_tracks_sent_at.sql", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "test.tpch.source_not_null_yahooquery_tracks_sent_at.e5fa5c0d96", "fqn": ["tpch", "staging", "segment", "source_not_null_yahooquery_tracks_sent_at"], "alias": "source_not_null_yahooquery_tracks_sent_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.784971, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["yahooquery", "tracks"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tpch.yahooquery.tracks"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "sent_at", "file_key_name": "sources.yahooquery", "attached_node": null}, "test.tpch.source_not_null_tpch_orders_o_orderkey.ebd571817b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "o_orderkey", "model": "{{ get_where_subquery(source('tpch', 'orders')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_not_null_tpch_orders_o_orderkey", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_tpch_orders_o_orderkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_not_null_tpch_orders_o_orderkey.ebd571817b", "fqn": ["tpch", "staging", "tpch", "source_not_null_tpch_orders_o_orderkey"], "alias": "source_not_null_tpch_orders_o_orderkey", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.785992, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["tpch", "orders"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tpch.tpch.orders"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "o_orderkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.tpch.source_unique_tpch_orders_o_orderkey.374f048af2": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "o_orderkey", "model": "{{ get_where_subquery(source('tpch', 'orders')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_unique_tpch_orders_o_orderkey", "resource_type": "test", "package_name": "tpch", "path": "source_unique_tpch_orders_o_orderkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_unique_tpch_orders_o_orderkey.374f048af2", "fqn": ["tpch", "staging", "tpch", "source_unique_tpch_orders_o_orderkey"], "alias": "source_unique_tpch_orders_o_orderkey", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.7869089, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["tpch", "orders"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tpch.tpch.orders"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "o_orderkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.tpch.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.024e40ec67": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('tpch', 'customer')", "field": "c_custkey", "column_name": "o_custkey", "model": "{{ get_where_subquery(source('tpch', 'orders')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_", "resource_type": "test", "package_name": "tpch", "path": "source_relationships_tpch_orde_aa2aa3d71f8f1d2febff342069b4fe2b.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.024e40ec67", "fqn": ["tpch", "staging", "tpch", "source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_"], "alias": "source_relationships_tpch_orde_aa2aa3d71f8f1d2febff342069b4fe2b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_relationships_tpch_orde_aa2aa3d71f8f1d2febff342069b4fe2b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_relationships_tpch_orde_aa2aa3d71f8f1d2febff342069b4fe2b"}, "created_at": 1701200844.7878149, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_orde_aa2aa3d71f8f1d2febff342069b4fe2b\") }}", "language": "sql", "refs": [], "sources": [["tpch", "customer"], ["tpch", "orders"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.tpch.tpch.customer", "source.tpch.tpch.orders"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "o_custkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.tpch.source_not_null_tpch_customer_c_custkey.a95b6298b5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "c_custkey", "model": "{{ get_where_subquery(source('tpch', 'customer')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_not_null_tpch_customer_c_custkey", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_tpch_customer_c_custkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_not_null_tpch_customer_c_custkey.a95b6298b5", "fqn": ["tpch", "staging", "tpch", "source_not_null_tpch_customer_c_custkey"], "alias": "source_not_null_tpch_customer_c_custkey", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.790902, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["tpch", "customer"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tpch.tpch.customer"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "c_custkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.tpch.source_unique_tpch_customer_c_custkey.048e97fc25": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "c_custkey", "model": "{{ get_where_subquery(source('tpch', 'customer')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_unique_tpch_customer_c_custkey", "resource_type": "test", "package_name": "tpch", "path": "source_unique_tpch_customer_c_custkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_unique_tpch_customer_c_custkey.048e97fc25", "fqn": ["tpch", "staging", "tpch", "source_unique_tpch_customer_c_custkey"], "alias": "source_unique_tpch_customer_c_custkey", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.79195, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["tpch", "customer"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tpch.tpch.customer"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "c_custkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.tpch.source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_.c9281c341d": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('tpch', 'nation')", "field": "n_nationkey", "column_name": "c_nationkey", "model": "{{ get_where_subquery(source('tpch', 'customer')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_", "resource_type": "test", "package_name": "tpch", "path": "source_relationships_tpch_cust_995f2a0feb713559c0b1751b26b40aa7.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_.c9281c341d", "fqn": ["tpch", "staging", "tpch", "source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_"], "alias": "source_relationships_tpch_cust_995f2a0feb713559c0b1751b26b40aa7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_relationships_tpch_cust_995f2a0feb713559c0b1751b26b40aa7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_relationships_tpch_cust_995f2a0feb713559c0b1751b26b40aa7"}, "created_at": 1701200844.7932749, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_cust_995f2a0feb713559c0b1751b26b40aa7\") }}", "language": "sql", "refs": [], "sources": [["tpch", "nation"], ["tpch", "customer"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.tpch.tpch.nation", "source.tpch.tpch.customer"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "c_nationkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.tpch.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.f722cb898d": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('tpch', 'orders')", "field": "o_orderkey", "column_name": "l_orderkey", "model": "{{ get_where_subquery(source('tpch', 'lineitem')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_", "resource_type": "test", "package_name": "tpch", "path": "source_relationships_tpch_line_43b59984a4c7b172d1e95c13fec6bd9c.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.f722cb898d", "fqn": ["tpch", "staging", "tpch", "source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_"], "alias": "source_relationships_tpch_line_43b59984a4c7b172d1e95c13fec6bd9c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_relationships_tpch_line_43b59984a4c7b172d1e95c13fec6bd9c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_relationships_tpch_line_43b59984a4c7b172d1e95c13fec6bd9c"}, "created_at": 1701200844.796309, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_line_43b59984a4c7b172d1e95c13fec6bd9c\") }}", "language": "sql", "refs": [], "sources": [["tpch", "orders"], ["tpch", "lineitem"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.tpch.tpch.orders", "source.tpch.tpch.lineitem"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "l_orderkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.tpch.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b761c77df8": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('tpch', 'part')", "field": "p_partkey", "column_name": "l_partkey", "model": "{{ get_where_subquery(source('tpch', 'lineitem')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_", "resource_type": "test", "package_name": "tpch", "path": "source_relationships_tpch_line_0403124f3724b4d6984e362cbdf30740.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b761c77df8", "fqn": ["tpch", "staging", "tpch", "source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_"], "alias": "source_relationships_tpch_line_0403124f3724b4d6984e362cbdf30740", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_relationships_tpch_line_0403124f3724b4d6984e362cbdf30740", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_relationships_tpch_line_0403124f3724b4d6984e362cbdf30740"}, "created_at": 1701200844.799024, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_line_0403124f3724b4d6984e362cbdf30740\") }}", "language": "sql", "refs": [], "sources": [["tpch", "part"], ["tpch", "lineitem"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.tpch.tpch.part", "source.tpch.tpch.lineitem"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "l_partkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.tpch.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f872fb81a2": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('tpch', 'supplier')", "field": "s_suppkey", "column_name": "l_suppkey", "model": "{{ get_where_subquery(source('tpch', 'lineitem')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_", "resource_type": "test", "package_name": "tpch", "path": "source_relationships_tpch_line_56b786676a582f41b4502498079b8292.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f872fb81a2", "fqn": ["tpch", "staging", "tpch", "source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_"], "alias": "source_relationships_tpch_line_56b786676a582f41b4502498079b8292", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_relationships_tpch_line_56b786676a582f41b4502498079b8292", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_relationships_tpch_line_56b786676a582f41b4502498079b8292"}, "created_at": 1701200844.801835, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_line_56b786676a582f41b4502498079b8292\") }}", "language": "sql", "refs": [], "sources": [["tpch", "supplier"], ["tpch", "lineitem"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.tpch.tpch.supplier", "source.tpch.tpch.lineitem"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "l_suppkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.tpch.source_not_null_tpch_nation_n_nationkey.5ac5d27298": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "n_nationkey", "model": "{{ get_where_subquery(source('tpch', 'nation')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_not_null_tpch_nation_n_nationkey", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_tpch_nation_n_nationkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_not_null_tpch_nation_n_nationkey.5ac5d27298", "fqn": ["tpch", "staging", "tpch", "source_not_null_tpch_nation_n_nationkey"], "alias": "source_not_null_tpch_nation_n_nationkey", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.804575, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["tpch", "nation"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tpch.tpch.nation"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "n_nationkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.tpch.source_unique_tpch_nation_n_nationkey.3bd4153064": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "n_nationkey", "model": "{{ get_where_subquery(source('tpch', 'nation')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_unique_tpch_nation_n_nationkey", "resource_type": "test", "package_name": "tpch", "path": "source_unique_tpch_nation_n_nationkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_unique_tpch_nation_n_nationkey.3bd4153064", "fqn": ["tpch", "staging", "tpch", "source_unique_tpch_nation_n_nationkey"], "alias": "source_unique_tpch_nation_n_nationkey", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.8055081, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["tpch", "nation"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tpch.tpch.nation"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "n_nationkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.tpch.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.116e1ee3da": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('tpch', 'region')", "field": "r_regionkey", "column_name": "n_regionkey", "model": "{{ get_where_subquery(source('tpch', 'nation')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_", "resource_type": "test", "package_name": "tpch", "path": "source_relationships_tpch_nati_863138f31f617783ad556b879ab65039.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.116e1ee3da", "fqn": ["tpch", "staging", "tpch", "source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_"], "alias": "source_relationships_tpch_nati_863138f31f617783ad556b879ab65039", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_relationships_tpch_nati_863138f31f617783ad556b879ab65039", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_relationships_tpch_nati_863138f31f617783ad556b879ab65039"}, "created_at": 1701200844.806468, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_nati_863138f31f617783ad556b879ab65039\") }}", "language": "sql", "refs": [], "sources": [["tpch", "region"], ["tpch", "nation"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.tpch.tpch.region", "source.tpch.tpch.nation"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "n_regionkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.tpch.source_not_null_tpch_part_p_partkey.9543847190": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "p_partkey", "model": "{{ get_where_subquery(source('tpch', 'part')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_not_null_tpch_part_p_partkey", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_tpch_part_p_partkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_not_null_tpch_part_p_partkey.9543847190", "fqn": ["tpch", "staging", "tpch", "source_not_null_tpch_part_p_partkey"], "alias": "source_not_null_tpch_part_p_partkey", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.80954, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["tpch", "part"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tpch.tpch.part"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "p_partkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.tpch.source_unique_tpch_part_p_partkey.30b171988e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "p_partkey", "model": "{{ get_where_subquery(source('tpch', 'part')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_unique_tpch_part_p_partkey", "resource_type": "test", "package_name": "tpch", "path": "source_unique_tpch_part_p_partkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_unique_tpch_part_p_partkey.30b171988e", "fqn": ["tpch", "staging", "tpch", "source_unique_tpch_part_p_partkey"], "alias": "source_unique_tpch_part_p_partkey", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.810477, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["tpch", "part"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tpch.tpch.part"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "p_partkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.tpch.dbt_utils_source_accepted_range_tpch_part_p_retailprice__2000__0.534c6e22cc": {"test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 2000, "column_name": "p_retailprice", "model": "{{ get_where_subquery(source('tpch', 'part')) }}"}, "namespace": "dbt_utils"}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "dbt_utils_source_accepted_range_tpch_part_p_retailprice__2000__0", "resource_type": "test", "package_name": "tpch", "path": "dbt_utils_source_accepted_rang_867ec3ee807cbbcbc712784162a33008.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.dbt_utils_source_accepted_range_tpch_part_p_retailprice__2000__0.534c6e22cc", "fqn": ["tpch", "staging", "tpch", "dbt_utils_source_accepted_range_tpch_part_p_retailprice__2000__0"], "alias": "dbt_utils_source_accepted_rang_867ec3ee807cbbcbc712784162a33008", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_source_accepted_rang_867ec3ee807cbbcbc712784162a33008", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_source_accepted_rang_867ec3ee807cbbcbc712784162a33008"}, "created_at": 1701200844.811384, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_source_accepted_rang_867ec3ee807cbbcbc712784162a33008\") }}", "language": "sql", "refs": [], "sources": [["tpch", "part"]], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["source.tpch.tpch.part"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "p_retailprice", "file_key_name": "sources.tpch", "attached_node": null}, "test.tpch.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.511196222f": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('tpch', 'part')", "field": "p_partkey", "column_name": "ps_partkey", "model": "{{ get_where_subquery(source('tpch', 'partsupp')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_", "resource_type": "test", "package_name": "tpch", "path": "source_relationships_tpch_part_a4c1d3c0d0f0db1ff9c10bf48b8c8fe8.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.511196222f", "fqn": ["tpch", "staging", "tpch", "source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_"], "alias": "source_relationships_tpch_part_a4c1d3c0d0f0db1ff9c10bf48b8c8fe8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_relationships_tpch_part_a4c1d3c0d0f0db1ff9c10bf48b8c8fe8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_relationships_tpch_part_a4c1d3c0d0f0db1ff9c10bf48b8c8fe8"}, "created_at": 1701200844.8137228, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_part_a4c1d3c0d0f0db1ff9c10bf48b8c8fe8\") }}", "language": "sql", "refs": [], "sources": [["tpch", "part"], ["tpch", "partsupp"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.tpch.tpch.part", "source.tpch.tpch.partsupp"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "ps_partkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.tpch.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.1c7ef0743e": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('tpch', 'supplier')", "field": "s_suppkey", "column_name": "ps_suppkey", "model": "{{ get_where_subquery(source('tpch', 'partsupp')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_", "resource_type": "test", "package_name": "tpch", "path": "source_relationships_tpch_part_c5396ae9effd9c1528d06af4f91b3817.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.1c7ef0743e", "fqn": ["tpch", "staging", "tpch", "source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_"], "alias": "source_relationships_tpch_part_c5396ae9effd9c1528d06af4f91b3817", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_relationships_tpch_part_c5396ae9effd9c1528d06af4f91b3817", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_relationships_tpch_part_c5396ae9effd9c1528d06af4f91b3817"}, "created_at": 1701200844.8162591, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_part_c5396ae9effd9c1528d06af4f91b3817\") }}", "language": "sql", "refs": [], "sources": [["tpch", "supplier"], ["tpch", "partsupp"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.tpch.tpch.supplier", "source.tpch.tpch.partsupp"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "ps_suppkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.tpch.source_not_null_tpch_region_r_regionkey.8f6ee68076": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "r_regionkey", "model": "{{ get_where_subquery(source('tpch', 'region')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_not_null_tpch_region_r_regionkey", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_tpch_region_r_regionkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_not_null_tpch_region_r_regionkey.8f6ee68076", "fqn": ["tpch", "staging", "tpch", "source_not_null_tpch_region_r_regionkey"], "alias": "source_not_null_tpch_region_r_regionkey", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.8188999, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["tpch", "region"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tpch.tpch.region"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "r_regionkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.tpch.source_unique_tpch_region_r_regionkey.d8eeced103": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "r_regionkey", "model": "{{ get_where_subquery(source('tpch', 'region')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_unique_tpch_region_r_regionkey", "resource_type": "test", "package_name": "tpch", "path": "source_unique_tpch_region_r_regionkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_unique_tpch_region_r_regionkey.d8eeced103", "fqn": ["tpch", "staging", "tpch", "source_unique_tpch_region_r_regionkey"], "alias": "source_unique_tpch_region_r_regionkey", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.819875, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["tpch", "region"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tpch.tpch.region"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "r_regionkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.tpch.source_accepted_values_tpch_region_r_name__AFRICA__AMERICA__ASIA__EUROPE__MIDDLE_EAST.0e96b086b2": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["AFRICA", "AMERICA", "ASIA", "EUROPE", "MIDDLE EAST"], "column_name": "r_name", "model": "{{ get_where_subquery(source('tpch', 'region')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_accepted_values_tpch_region_r_name__AFRICA__AMERICA__ASIA__EUROPE__MIDDLE_EAST", "resource_type": "test", "package_name": "tpch", "path": "source_accepted_values_tpch_re_8cb7df798af7d7dff1ac8c857e950c24.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_accepted_values_tpch_region_r_name__AFRICA__AMERICA__ASIA__EUROPE__MIDDLE_EAST.0e96b086b2", "fqn": ["tpch", "staging", "tpch", "source_accepted_values_tpch_region_r_name__AFRICA__AMERICA__ASIA__EUROPE__MIDDLE_EAST"], "alias": "source_accepted_values_tpch_re_8cb7df798af7d7dff1ac8c857e950c24", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_tpch_re_8cb7df798af7d7dff1ac8c857e950c24", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_accepted_values_tpch_re_8cb7df798af7d7dff1ac8c857e950c24"}, "created_at": 1701200844.820885, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_tpch_re_8cb7df798af7d7dff1ac8c857e950c24\") }}", "language": "sql", "refs": [], "sources": [["tpch", "region"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.tpch.tpch.region"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "r_name", "file_key_name": "sources.tpch", "attached_node": null}, "test.tpch.source_not_null_tpch_supplier_s_suppkey.94660e6dab": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "s_suppkey", "model": "{{ get_where_subquery(source('tpch', 'supplier')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_not_null_tpch_supplier_s_suppkey", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_tpch_supplier_s_suppkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_not_null_tpch_supplier_s_suppkey.94660e6dab", "fqn": ["tpch", "staging", "tpch", "source_not_null_tpch_supplier_s_suppkey"], "alias": "source_not_null_tpch_supplier_s_suppkey", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.823339, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["tpch", "supplier"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tpch.tpch.supplier"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "s_suppkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.tpch.source_unique_tpch_supplier_s_suppkey.1a36cf4370": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "s_suppkey", "model": "{{ get_where_subquery(source('tpch', 'supplier')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_unique_tpch_supplier_s_suppkey", "resource_type": "test", "package_name": "tpch", "path": "source_unique_tpch_supplier_s_suppkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_unique_tpch_supplier_s_suppkey.1a36cf4370", "fqn": ["tpch", "staging", "tpch", "source_unique_tpch_supplier_s_suppkey"], "alias": "source_unique_tpch_supplier_s_suppkey", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701200844.824269, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["tpch", "supplier"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tpch.tpch.supplier"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "s_suppkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.tpch.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2a47ee53da": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('tpch', 'nation')", "field": "n_nationkey", "column_name": "s_nationkey", "model": "{{ get_where_subquery(source('tpch', 'supplier')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_", "resource_type": "test", "package_name": "tpch", "path": "source_relationships_tpch_supp_1c9d96c407a8f937b03dcfc97848e71b.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2a47ee53da", "fqn": ["tpch", "staging", "tpch", "source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_"], "alias": "source_relationships_tpch_supp_1c9d96c407a8f937b03dcfc97848e71b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_relationships_tpch_supp_1c9d96c407a8f937b03dcfc97848e71b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_relationships_tpch_supp_1c9d96c407a8f937b03dcfc97848e71b"}, "created_at": 1701200844.825183, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_supp_1c9d96c407a8f937b03dcfc97848e71b\") }}", "language": "sql", "refs": [], "sources": [["tpch", "nation"], ["tpch", "supplier"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.tpch.tpch.nation", "source.tpch.tpch.supplier"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "s_nationkey", "file_key_name": "sources.tpch", "attached_node": null}, "test.tpch.source_unique_tpch_snapshot_customer_snapshot_src_c_custkey.463ab9515e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "c_custkey", "model": "{{ get_where_subquery(source('tpch_snapshot', 'customer_snapshot_src')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_unique_tpch_snapshot_customer_snapshot_src_c_custkey", "resource_type": "test", "package_name": "tpch", "path": "source_unique_tpch_snapshot_customer_snapshot_src_c_custkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_unique_tpch_snapshot_customer_snapshot_src_c_custkey.463ab9515e", "fqn": ["tpch", "staging", "tpch", "source_unique_tpch_snapshot_customer_snapshot_src_c_custkey"], "alias": "source_unique_tpch_snapshot_customer_snapshot_src_c_custkey", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1701200844.8278651, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [], "sources": [["tpch_snapshot", "customer_snapshot_src"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tpch.tpch_snapshot.customer_snapshot_src"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "c_custkey", "file_key_name": "sources.tpch_snapshot", "attached_node": null}, "test.tpch.source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey.e3f0c54a96": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "c_custkey", "model": "{{ get_where_subquery(source('tpch_snapshot', 'customer_snapshot_src')) }}"}, "namespace": null}, "database": "PABLOC", "schema": "MARTS_dbt_test__audit", "name": "source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey.e3f0c54a96", "fqn": ["tpch", "staging", "tpch", "source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey"], "alias": "source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1701200844.828785, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [], "sources": [["tpch_snapshot", "customer_snapshot_src"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tpch.tpch_snapshot.customer_snapshot_src"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "c_custkey", "file_key_name": "sources.tpch_snapshot", "attached_node": null}}, "sources": {"source.tpch.dbtc.link_clicked": {"database": "PABLOC", "schema": "dbtc", "name": "link_clicked", "resource_type": "source", "package_name": "tpch", "path": "models/staging/segment/_segment__sources.yml", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "source.tpch.dbtc.link_clicked", "fqn": ["tpch", "staging", "segment", "dbtc", "link_clicked"], "source_name": "dbtc", "source_description": "", "loader": "", "identifier": "link_clicked", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"link": {"name": "link", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event": {"name": "event", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sent_at": {"name": "sent_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PABLOC.dbtc.link_clicked", "created_at": 1701200844.763173}, "source.tpch.dbtc.pages": {"database": "PABLOC", "schema": "dbtc", "name": "pages", "resource_type": "source", "package_name": "tpch", "path": "models/staging/segment/_segment__sources.yml", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "source.tpch.dbtc.pages", "fqn": ["tpch", "staging", "segment", "dbtc", "pages"], "source_name": "dbtc", "source_description": "", "loader": "", "identifier": "pages", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sent_at": {"name": "sent_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PABLOC.dbtc.pages", "created_at": 1701200844.766177}, "source.tpch.dbtc.tracks": {"database": "PABLOC", "schema": "dbtc", "name": "tracks", "resource_type": "source", "package_name": "tpch", "path": "models/staging/segment/_segment__sources.yml", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "source.tpch.dbtc.tracks", "fqn": ["tpch", "staging", "segment", "dbtc", "tracks"], "source_name": "dbtc", "source_description": "", "loader": "", "identifier": "tracks", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"event_text": {"name": "event_text", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event": {"name": "event", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sent_at": {"name": "sent_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PABLOC.dbtc.tracks", "created_at": 1701200844.771919}, "source.tpch.yahooquery.link_clicked": {"database": "PABLOC", "schema": "yahooquery", "name": "link_clicked", "resource_type": "source", "package_name": "tpch", "path": "models/staging/segment/_segment__sources.yml", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "source.tpch.yahooquery.link_clicked", "fqn": ["tpch", "staging", "segment", "yahooquery", "link_clicked"], "source_name": "yahooquery", "source_description": "", "loader": "", "identifier": "link_clicked", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"link": {"name": "link", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event": {"name": "event", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sent_at": {"name": "sent_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PABLOC.yahooquery.link_clicked", "created_at": 1701200844.777036}, "source.tpch.yahooquery.pages": {"database": "PABLOC", "schema": "yahooquery", "name": "pages", "resource_type": "source", "package_name": "tpch", "path": "models/staging/segment/_segment__sources.yml", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "source.tpch.yahooquery.pages", "fqn": ["tpch", "staging", "segment", "yahooquery", "pages"], "source_name": "yahooquery", "source_description": "", "loader": "", "identifier": "pages", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sent_at": {"name": "sent_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PABLOC.yahooquery.pages", "created_at": 1701200844.780489}, "source.tpch.yahooquery.tracks": {"database": "PABLOC", "schema": "yahooquery", "name": "tracks", "resource_type": "source", "package_name": "tpch", "path": "models/staging/segment/_segment__sources.yml", "original_file_path": "models/staging/segment/_segment__sources.yml", "unique_id": "source.tpch.yahooquery.tracks", "fqn": ["tpch", "staging", "segment", "yahooquery", "tracks"], "source_name": "yahooquery", "source_description": "", "loader": "", "identifier": "tracks", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"event_text": {"name": "event_text", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event": {"name": "event", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sent_at": {"name": "sent_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PABLOC.yahooquery.tracks", "created_at": 1701200844.785509}, "source.tpch.tpch.orders": {"database": "doug_demo_v2", "schema": "tpch", "name": "orders", "resource_type": "source", "package_name": "tpch", "path": "models/staging/tpch/_tpch__sources.yml", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "source.tpch.tpch.orders", "fqn": ["tpch", "staging", "tpch", "tpch", "orders"], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "orders", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_etl_updated_timestamp", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "main order tracking table", "columns": {"o_orderkey": {"name": "o_orderkey", "description": "SF*1,500,000 are sparsely populated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "o_custkey": {"name": "o_custkey", "description": "Foreign Key to C_CUSTKEY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "o_orderstatus": {"name": "o_orderstatus", "description": "status code of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "o_totalprice": {"name": "o_totalprice", "description": "raw price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "o_orderdate": {"name": "o_orderdate", "description": "date the order was made", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "o_orderpriority": {"name": "o_orderpriority", "description": "code associated with the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "o_clerk": {"name": "o_clerk", "description": "id of the clerk", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "o_shippriority": {"name": "o_shippriority", "description": "numeric representation of the shipping priority, zero being the default", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "o_comment": {"name": "o_comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.orders", "created_at": 1701200844.7903948}, "source.tpch.tpch.customer": {"database": "doug_demo_v2", "schema": "tpch", "name": "customer", "resource_type": "source", "package_name": "tpch", "path": "models/staging/tpch/_tpch__sources.yml", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "source.tpch.tpch.customer", "fqn": ["tpch", "staging", "tpch", "tpch", "customer"], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "customer", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_etl_updated_timestamp", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "main customer table", "columns": {"c_custkey": {"name": "c_custkey", "description": "unique customer key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "c_name": {"name": "c_name", "description": "customer id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "c_address": {"name": "c_address", "description": "address of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "c_nationkey": {"name": "c_nationkey", "description": "foreign key to stg_tpch_nations", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "c_phone": {"name": "c_phone", "description": "phone number of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "c_acctbal": {"name": "c_acctbal", "description": "raw account balance", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "c_mktsegment": {"name": "c_mktsegment", "description": "market segment of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "c_comment": {"name": "c_comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.customer", "created_at": 1701200844.795775}, "source.tpch.tpch.lineitem": {"database": "doug_demo_v2", "schema": "tpch", "name": "lineitem", "resource_type": "source", "package_name": "tpch", "path": "models/staging/tpch/_tpch__sources.yml", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "source.tpch.tpch.lineitem", "fqn": ["tpch", "staging", "tpch", "tpch", "lineitem"], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "lineitem", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_etl_updated_timestamp", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "main lineitem table", "columns": {"l_orderkey": {"name": "l_orderkey", "description": "Foreign Key to O_ORDERKEY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "l_partkey": {"name": "l_partkey", "description": "Foreign key to P_PARTKEY, first part of the compound Foreign Key to (PS_PARTKEY,PS_SUPPKEY) with L_SUPPKEY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "l_suppkey": {"name": "l_suppkey", "description": "Foreign key to S_SUPPKEY, second part of the compound Foreign Key to (PS_PARTKEY, PS_SUPPKEY) with L_PARTKEY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "l_linenumber": {"name": "l_linenumber", "description": "sequence of the order items within the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "l_quantity": {"name": "l_quantity", "description": "total units", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "l_extendedprice": {"name": "l_extendedprice", "description": "line item price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "l_discount": {"name": "l_discount", "description": "percentage of the discount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "l_tax": {"name": "l_tax", "description": "tax rate of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "l_returnflag": {"name": "l_returnflag", "description": "letter determining the status of the return", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "l_linestatus": {"name": "l_linestatus", "description": "status code of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "l_shipdate": {"name": "l_shipdate", "description": "the date the order item is being shipped", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "l_commitdate": {"name": "l_commitdate", "description": "the date the order item is being commited", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "l_receiptdate": {"name": "l_receiptdate", "description": "the receipt date of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "l_shipinstruct": {"name": "l_shipinstruct", "description": "additional instructions on the shipment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "l_shipmode": {"name": "l_shipmode", "description": "method of shipping", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "l_comment": {"name": "l_comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.lineitem", "created_at": 1701200844.804064}, "source.tpch.tpch.nation": {"database": "doug_demo_v2", "schema": "tpch", "name": "nation", "resource_type": "source", "package_name": "tpch", "path": "models/staging/tpch/_tpch__sources.yml", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "source.tpch.tpch.nation", "fqn": ["tpch", "staging", "tpch", "tpch", "nation"], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "nation", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_etl_updated_timestamp", "freshness": null, "external": null, "description": "nation mapping", "columns": {"n_nationkey": {"name": "n_nationkey", "description": "25 nations are populated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "n_name": {"name": "n_name", "description": "nation name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "n_regionkey": {"name": "n_regionkey", "description": "Foreign Key to R_REGIONKEY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "n_comment": {"name": "n_comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.nation", "created_at": 1701200844.8090482}, "source.tpch.tpch.part": {"database": "doug_demo_v2", "schema": "tpch", "name": "part", "resource_type": "source", "package_name": "tpch", "path": "models/staging/tpch/_tpch__sources.yml", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "source.tpch.tpch.part", "fqn": ["tpch", "staging", "tpch", "tpch", "part"], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "part", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_etl_updated_timestamp", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "main part table", "columns": {"p_partkey": {"name": "p_partkey", "description": "SF*200,000 are populated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "p_name": {"name": "p_name", "description": "name of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "p_mfgr": {"name": "p_mfgr", "description": "manufacturer of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "p_brand": {"name": "p_brand", "description": "brand of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "p_type": {"name": "p_type", "description": "type of part including material", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "p_size": {"name": "p_size", "description": "size of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "p_container": {"name": "p_container", "description": "container of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "p_retailprice": {"name": "p_retailprice", "description": "raw retail price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "p_comment": {"name": "p_comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.part", "created_at": 1701200844.8132281}, "source.tpch.tpch.partsupp": {"database": "doug_demo_v2", "schema": "tpch", "name": "partsupp", "resource_type": "source", "package_name": "tpch", "path": "models/staging/tpch/_tpch__sources.yml", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "source.tpch.tpch.partsupp", "fqn": ["tpch", "staging", "tpch", "tpch", "partsupp"], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "partsupp", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_etl_updated_timestamp", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "main part supplier table", "columns": {"ps_partkey": {"name": "ps_partkey", "description": "Foreign Key to P_PARTKEY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ps_suppkey": {"name": "ps_suppkey", "description": "Foreign Key to S_SUPPKEY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ps_availqty": {"name": "ps_availqty", "description": "raw available quantity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ps_supplycost": {"name": "ps_supplycost", "description": "raw cost", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ps_comment": {"name": "ps_comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.partsupp", "created_at": 1701200844.8182662}, "source.tpch.tpch.region": {"database": "doug_demo_v2", "schema": "tpch", "name": "region", "resource_type": "source", "package_name": "tpch", "path": "models/staging/tpch/_tpch__sources.yml", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "source.tpch.tpch.region", "fqn": ["tpch", "staging", "tpch", "tpch", "region"], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "region", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_etl_updated_timestamp", "freshness": null, "external": null, "description": "region mapping", "columns": {"r_regionkey": {"name": "r_regionkey", "description": "5 regions are populated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "r_name": {"name": "r_name", "description": "region name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "r_comment": {"name": "r_comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.region", "created_at": 1701200844.822827}, "source.tpch.tpch.supplier": {"database": "doug_demo_v2", "schema": "tpch", "name": "supplier", "resource_type": "source", "package_name": "tpch", "path": "models/staging/tpch/_tpch__sources.yml", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "source.tpch.tpch.supplier", "fqn": ["tpch", "staging", "tpch", "tpch", "supplier"], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "supplier", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_etl_updated_timestamp", "freshness": null, "external": null, "description": "main supplier table", "columns": {"s_suppkey": {"name": "s_suppkey", "description": "SF*10,000 are populated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "s_name": {"name": "s_name", "description": "id of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "s_address": {"name": "s_address", "description": "address of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "s_nationkey": {"name": "s_nationkey", "description": "Foreign Key to N_NATIONKEY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "s_phone": {"name": "s_phone", "description": "phone number of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "s_acctbal": {"name": "s_acctbal", "description": "raw account balance", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "s_comment": {"name": "s_comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.supplier", "created_at": 1701200844.827362}, "source.tpch.tpch_snapshot.customer_snapshot_src": {"database": "analytics", "schema": "dbt_mwinkler", "name": "customer_snapshot_src", "resource_type": "source", "package_name": "tpch", "path": "models/staging/tpch/_tpch__sources.yml", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "source.tpch.tpch_snapshot.customer_snapshot_src", "fqn": ["tpch", "staging", "tpch", "tpch_snapshot", "customer_snapshot_src"], "source_name": "tpch_snapshot", "source_description": "", "loader": "", "identifier": "customer_snapshot_src", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "slowly changing dimension table", "columns": {"c_custkey": {"name": "c_custkey", "description": "unique customer key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "c_name": {"name": "c_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "c_address": {"name": "c_address", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "c_nationkey": {"name": "c_nationkey", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "c_phone": {"name": "c_phone", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "c_acctbal": {"name": "c_acctbal", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "c_mktsegment": {"name": "c_mktsegment", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "c_comment": {"name": "c_comment", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "analytics.dbt_mwinkler.customer_snapshot_src", "created_at": 1701200844.829312}, "source.tpch.deutsche_boerse.trading_data": {"database": "analytics", "schema": "boerse", "name": "trading_data", "resource_type": "source", "package_name": "tpch", "path": "models/demo_examples/external_sources.yml", "original_file_path": "models/demo_examples/external_sources.yml", "unique_id": "source.tpch.deutsche_boerse.trading_data", "fqn": ["tpch", "demo_examples", "deutsche_boerse", "trading_data"], "source_name": "deutsche_boerse", "source_description": "This is an example of using external sources", "loader": "", "identifier": "trading_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "@boerse", "file_format": "(type=csv field_delimiter=',' skip_header=1)", "row_format": null, "tbl_properties": null, "partitions": [{"name": "source_file_name", "data_type": "varchar", "expression": "metadata$filename"}], "auto_refresh": false}, "description": "The Deutsche B\u00f6rse Public Data Set consists of trade data aggregated to one minute intervals from the Eurex and Xetra trading systems. It provides the initial price, lowest price, highest price, final price and volume for every minute of the trading day, and for every tradeable security.\n", "columns": {"ISIN": {"name": "ISIN", "description": "ISIN of the security", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": []}, "MarketSegment": {"name": "MarketSegment", "description": "The product market segment, following the convention on http://www.eurexchange.com", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": []}, "UnderlyingSymbol": {"name": "UnderlyingSymbol", "description": "The underlying security", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": []}, "UnderlyingISIN": {"name": "UnderlyingISIN", "description": "ISIN of any underlying security\t", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": []}, "Currency": {"name": "Currency", "description": "Currency in which the product is traded\t(ISO 4127)", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": []}, "SecurityType": {"name": "SecurityType", "description": "Type of instrument", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": []}, "MaturityDate": {"name": "MaturityDate", "description": "Maturity date of the security", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": []}, "StrikePrice": {"name": "StrikePrice", "description": "Strike price", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": []}, "PutOrCall": {"name": "PutOrCall", "description": "Type of option (string: PUT or CALL)", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": []}, "MLEG": {"name": "MLEG", "description": "Identifies multi-leg options", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": []}, "ContractGenerationNumber": {"name": "ContractGenerationNumber", "description": "The generation number for options contracts", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": []}, "SecurityID": {"name": "SecurityID", "description": "Unique identifier for each contract", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": []}, "Date": {"name": "Date", "description": "Date of trading period", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "tags": []}, "Time": {"name": "Time", "description": "Minute of trading to which this entry relates", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": []}, "StartPrice": {"name": "StartPrice", "description": "Trading price at the start of period", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": []}, "MaxPrice": {"name": "MaxPrice", "description": "Maximum price over the period", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": []}, "MinPrice": {"name": "MinPrice", "description": "Minimum price over the period", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": []}, "EndPrice": {"name": "EndPrice", "description": "Trading price at the end of the period", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": []}, "NumberOfContracts": {"name": "NumberOfContracts", "description": "Number of contracts traded during the period", "meta": {}, "data_type": "INT", "constraints": [], "quote": null, "tags": []}, "NumberOfTrades": {"name": "NumberOfTrades", "description": "Number of distinct trades during the period", "meta": {}, "data_type": "INT", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "analytics.boerse.trading_data", "created_at": 1701200844.8294232}, "source.tpch.test_eqrx_s3.dummy_data": {"database": "PABLOC", "schema": "dbt_dguthrie", "name": "dummy_data", "resource_type": "source", "package_name": "tpch", "path": "models/demo_examples/demo_examples.yml", "original_file_path": "models/demo_examples/demo_examples.yml", "unique_id": "source.tpch.test_eqrx_s3.dummy_data", "fqn": ["tpch", "demo_examples", "test_eqrx_s3", "dummy_data"], "source_name": "test_eqrx_s3", "source_description": "", "loader": "", "identifier": "dummy_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "@eqrx_test", "file_format": "( type = csv )", "row_format": null, "tbl_properties": null, "partitions": null}, "description": "Testing EQRx setup", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PABLOC.dbt_dguthrie.dummy_data", "created_at": 1701200844.829497}}, "macros": {"macro.tpch.generate_base_models": {"name": "generate_base_models", "resource_type": "macro", "package_name": "tpch", "path": "macros/generate_base_models.sql", "original_file_path": "macros/generate_base_models.sql", "unique_id": "macro.tpch.generate_base_models", "macro_sql": "{% macro generate_base_models(source_name, exclude=[], include=[], leading_commas=False, case_sensitive_cols=False) %}\n\n    {%- if include | length > 0 and exclude | length > 0 -%}\n        -- You cannot use both include and exclude arguments\n    {%- elif execute -%}\n\n        {% set sources = graph.sources.values() | selectattr('source_name', '==', source_name) %}\n\n        {%- if exclude | length > 0 -%}\n            {%- set sources = sources | rejectattr('name', 'in', exclude) -%}\n        {%- endif -%}\n\n        {%- if include | length > 0 -%}\n            {%- set sources = sources | selectattr('name', 'in', include) -%}\n        {%- endif -%}\n\n        {%- for source in sources -%}\n\n            -- ______________________ stg_{{ source_name }}__{{ source.name }}.sql ______________________\n\n            {{ codegen.generate_base_model(source_name, source.name, leading_commas, case_sensitive_cols) }}\n\n        {%- endfor -%}\n\n        -- ______________________ END ______________________\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200843.976972, "supported_languages": null}, "macro.tpch.cents_to_dollars": {"name": "cents_to_dollars", "resource_type": "macro", "package_name": "tpch", "path": "macros/cents_to_dollars.sql", "original_file_path": "macros/cents_to_dollars.sql", "unique_id": "macro.tpch.cents_to_dollars", "macro_sql": "{% macro cents_to_dollars(column_name, precision=2) -%}\n    ({{ column_name }} / 100)::numeric(16, {{ precision }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "A macro to convert cents to dollars", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://macros/macro.yml", "arguments": [{"name": "column_name", "type": "STRING", "description": "The name of the column you want to convert"}, {"name": "precision", "type": "INTEGER", "description": "Number of decimal places. Defaults to 2."}], "created_at": 1701200844.5941298, "supported_languages": null}, "macro.tpch.limit_data_in_dev": {"name": "limit_data_in_dev", "resource_type": "macro", "package_name": "tpch", "path": "macros/limit_data_in_dev.sql", "original_file_path": "macros/limit_data_in_dev.sql", "unique_id": "macro.tpch.limit_data_in_dev", "macro_sql": "{% macro limit_data_in_dev(filter_column_name, lookback_days=7) %}\n\n{% if target.name == 'dev' %}\n\n\nwhere {{ filter_column_name }} >= dateadd('day', -{{ lookback_days }}, current_timestamp)\n{% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "A macro to show conditional logic to limit data when working in dev.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://macros/macro.yml", "arguments": [{"name": "filter_column_name", "type": "DATE", "description": "The name of the column you want to convert"}, {"name": "lookback_days", "type": "NUMBER", "description": "Number of lookback days. Defaults to 7."}], "created_at": 1701200844.594763, "supported_languages": null}, "macro.tpch.omit_soft_deletions": {"name": "omit_soft_deletions", "resource_type": "macro", "package_name": "tpch", "path": "macros/omit_soft_deletions.sql", "original_file_path": "macros/omit_soft_deletions.sql", "unique_id": "macro.tpch.omit_soft_deletions", "macro_sql": "{% macro omit_soft_deletions(table, columns) %}\n\n    select {{ ', '.join(columns) }}\n    from {{ table }}\n    where not is_deleted\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200843.977813, "supported_languages": null}, "macro.tpch._select_extremes": {"name": "_select_extremes", "resource_type": "macro", "package_name": "tpch", "path": "macros/select_extremes.sql", "original_file_path": "macros/select_extremes.sql", "unique_id": "macro.tpch._select_extremes", "macro_sql": "{% macro _select_extremes(fn, table_name, key_columns, timestamp_column='loaded_at') %}\nselect a.* from {{ table_name }} as a\ninner join (\n    select {{ ','.join(key_columns) }}, {{ fn }}({{ timestamp_column }}) as last_update\n    from {{ table_name }}\n    group by {{ ','.join(key_columns) }}\n) as b on (\n    {% for key_column in key_columns %}\n        a.{{ key_column }} = b.{{ key_column }}\n        and\n    {% endfor %}\n    a.{{ timestamp_column }} = b.last_update\n)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200843.978695, "supported_languages": null}, "macro.tpch.select_latest": {"name": "select_latest", "resource_type": "macro", "package_name": "tpch", "path": "macros/select_extremes.sql", "original_file_path": "macros/select_extremes.sql", "unique_id": "macro.tpch.select_latest", "macro_sql": "{% macro select_latest(table_name, key_columns, timestamp_column='loaded_at') %}\n{{ _select_extremes('max', table_name, key_columns, timestamp_column) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.tpch._select_extremes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200843.978913, "supported_languages": null}, "macro.tpch.select_earliest": {"name": "select_earliest", "resource_type": "macro", "package_name": "tpch", "path": "macros/select_extremes.sql", "original_file_path": "macros/select_extremes.sql", "unique_id": "macro.tpch.select_earliest", "macro_sql": "{% macro select_earliest(table_name, key_columns, timestamp_column='loaded_at') %}\n{{ _select_extremes('min', table_name, key_columns, timestamp_column) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.tpch._select_extremes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200843.979115, "supported_languages": null}, "macro.tpch.grant_all_on_schemas": {"name": "grant_all_on_schemas", "resource_type": "macro", "package_name": "tpch", "path": "macros/grant_all_on_schemas.sql", "original_file_path": "macros/grant_all_on_schemas.sql", "unique_id": "macro.tpch.grant_all_on_schemas", "macro_sql": "{% macro grant_all_on_schemas(schemas, role) %}\n  {% for schema in schemas %}\n    grant usage on schema {{ schema }} to role {{ role }};\n    grant select on all tables in schema {{ schema }} to role {{ role }};\n    grant select on all views in schema {{ schema }} to role {{ role }};\n    grant select on future tables in schema {{ schema }} to role {{ role }};\n    grant select on future views in schema {{ schema }} to role {{ role }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "An example of how to grant permissions on schema", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://macros/macro.yml", "arguments": [{"name": "schemas", "type": "STRING", "description": "name of the schema you would like to give the role access to"}, {"name": "role", "type": "STRING", "description": "user/role within your warehouse you would like to give dbt access to"}], "created_at": 1701200844.595894, "supported_languages": null}, "macro.tpch.block_on_tests": {"name": "block_on_tests", "resource_type": "macro", "package_name": "tpch", "path": "macros/block_on_tests.sql", "original_file_path": "macros/block_on_tests.sql", "unique_id": "macro.tpch.block_on_tests", "macro_sql": "{% macro block_on_tests(list_of_test_macros) %}\n\n    {% if execute %}\n        {% for test in list_of_test_macros %}\n            {% set results = run_query(test) %}\n            {% if results[0][0] == 0 %}\n                -- TEST {{loop.index}}: PASS\n            {% else %}\n                {% set msg %} TEST {{loop.index}}: FAIL {% endset %}\n                {% do exceptions.raise_compiler_error(msg) %}\n            {% endif %}\n        {% endfor %}\n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200843.980549, "supported_languages": null}, "macro.tpch.generate_models_yaml": {"name": "generate_models_yaml", "resource_type": "macro", "package_name": "tpch", "path": "macros/generate_models_yaml.sql", "original_file_path": "macros/generate_models_yaml.sql", "unique_id": "macro.tpch.generate_models_yaml", "macro_sql": "{% macro generate_models_yaml(model_names) %}\n\n{% set model_yaml=[] %}\n\n{% do model_yaml.append('version: 2') %}\n{% do model_yaml.append('') %}\n{% do model_yaml.append('models:') %}\n\n{% for model_name in model_names %}\n\n    {% do model_yaml.append('  - name: ' ~ model_name | lower) %}\n    {% do model_yaml.append('    description: \"\"') %}\n    {% do model_yaml.append('    columns:') %}\n\n    {% set relation=ref(model_name) %}\n    {%- set columns = adapter.get_columns_in_relation(relation) -%}\n\n    {% for column in columns %}\n        {% do model_yaml.append('      - name: ' ~ column.name | lower ) %}\n        {% do model_yaml.append('        description: \"\"') %}\n    {% endfor %}\n\n    {% do model_yaml.append('') %}\n\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200843.982154, "supported_languages": null}, "macro.tpch.create_udfs": {"name": "create_udfs", "resource_type": "macro", "package_name": "tpch", "path": "macros/create_udfs.sql", "original_file_path": "macros/create_udfs.sql", "unique_id": "macro.tpch.create_udfs", "macro_sql": "{% macro create_udfs() %}\n\n{% do run_query(create_area_of_circle()) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.tpch.create_area_of_circle"]}, "description": "An example of how to create UDFs via macros", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://macros/macro.yml", "arguments": [], "created_at": 1701200844.5953522, "supported_languages": null}, "macro.tpch.drop_old_nodes": {"name": "drop_old_nodes", "resource_type": "macro", "package_name": "tpch", "path": "macros/drop_old_nodes.sql", "original_file_path": "macros/drop_old_nodes.sql", "unique_id": "macro.tpch.drop_old_nodes", "macro_sql": "{% macro drop_old_nodes(dryrun=True) %}\n\n    {% set nodes = graph.nodes.values() | list %}\n\n    {% set dbs = nodes | map(attribute='database') | unique %}\n\n    {% set all_tables_to_drop = [] %}\n\n    {% set drop_table_sql %}\n\n    {% for db in dbs %}\n\n        -- Database: {{ db }}\n\n        {% set schemas = nodes | selectattr('database', '==', db) | map(attribute='schema') | unique %}\n\n        {% for schema in schemas %}\n\n            -- Schema: {{ schema }}\n\n            {% set model_names = nodes | selectattr('database', '==', db) | selectattr('schema', '==', schema) | map(attribute='name') | map('upper') | join(\"', '\") %}\n\n            {% set find_tables_sql %}\n                USE DATABASE {{ db }};\n                SELECT DISTINCT TABLE_NAME, TABLE_TYPE\n                FROM INFORMATION_SCHEMA.TABLES\n                WHERE TABLE_SCHEMA = '{{ schema | upper }}'\n                    AND TABLE_TYPE IN ('VIEW', 'BASE TABLE')\n                    AND TABLE_NAME NOT IN ('{{ model_names }}');\n            {% endset %}\n            {% set tables_to_drop = run_query(find_tables_sql) %}\n\n            {% for row in tables_to_drop %}\n                DROP {% if row[1] == 'BASE TABLE' %}TABLE{% else %}VIEW{% endif %} {{ db | upper }}.{{ schema | upper }}.{{ row[0] }};\n                {% do all_tables_to_drop.append('{}.{}.{}'.format(db.upper(), schema.upper(), row[0].upper())) %}\n            {% endfor %}\n\n\n        {% endfor %}\n    {% endfor %}\n\n    {% endset %}\n\n    {% if all_tables_to_drop %}\n        {% if dryrun %}\n            {% do log('*NOT* dropping {}'.format(all_tables_to_drop), info=True) %}\n        {% else %}\n            {% do log('Dropping: {} ...'.format(all_tables_to_drop), info=True) %}\n            {% do run_query(drop_table_sql) %}\n            {% do log('Done.', info=True) %}\n        {% endif %}\n    {% else %}\n        {% do log('No tables to drop!', info=True) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200843.985655, "supported_languages": null}, "macro.tpch.money": {"name": "money", "resource_type": "macro", "package_name": "tpch", "path": "macros/convert_money.sql", "original_file_path": "macros/convert_money.sql", "unique_id": "macro.tpch.money", "macro_sql": "{% macro money(col) -%}\n::decimal(16,4)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "A macro to convert a column to consistent precision", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://macros/macro.yml", "arguments": [{"name": "col", "type": "INTEGER", "description": "column getting converted to decimal(16,4)"}], "created_at": 1701200844.5951622, "supported_languages": null}, "macro.tpch.create_area_of_circle": {"name": "create_area_of_circle", "resource_type": "macro", "package_name": "tpch", "path": "macros/udf_area_of_circle.sql", "original_file_path": "macros/udf_area_of_circle.sql", "unique_id": "macro.tpch.create_area_of_circle", "macro_sql": "{% macro create_area_of_circle() %}\n\nuse database {{target.database}};\n\ndrop function if exists {{target.schema}}.area_of_circle(float);\n\ncreate function {{target.schema}}.area_of_circle(radius float)\n  returns float\n  as\n  $$\n    pi() * radius * radius\n  $$\n  ;\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Continuation of UDF example", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://macros/macro.yml", "arguments": [], "created_at": 1701200844.596261, "supported_languages": null}, "macro.tpch.drop_ci_schemas": {"name": "drop_ci_schemas", "resource_type": "macro", "package_name": "tpch", "path": "macros/drop_ci_schemas.sql", "original_file_path": "macros/drop_ci_schemas.sql", "unique_id": "macro.tpch.drop_ci_schemas", "macro_sql": "{% macro drop_ci_schemas(database=target.database, dryrun=True) %}\n\n    {% set all_schemas_to_drop = [] %}\n\n    {% set drop_schema_sql %}\n\n    {% set find_schemas_sql %}\n        SELECT SCHEMA_NAME\n        FROM {{ database | upper }}.INFORMATION_SCHEMA.SCHEMATA\n        WHERE SCHEMA_NAME LIKE 'DBT_CLOUD_PR_%';\n    {% endset %}\n\n    {% set schemas_to_drop = run_query(find_schemas_sql) %}\n\n    {% for row in schemas_to_drop %}\n        DROP SCHEMA {{ database | upper }}.{{ row[0] | upper }};\n        {% do all_schemas_to_drop.append('{}.{}'.format(database.upper(), row[0].upper())) %}\n    {% endfor %}\n\n    {% endset %}\n\n    {% if all_schemas_to_drop %}\n        {% if dryrun %}\n            {% do log('*NOT* dropping {}'.format(all_schemas_to_drop), info=True) %}\n        {% else %}\n            {% do log('Dropping: {} ...'.format(all_schemas_to_drop), info=True) %}\n            {% do run_query(drop_schema_sql) %}\n            {% do log('Done.', info=True) %}\n        {% endif %}\n    {% else %}\n        {% do log('No schemas to drop!', info=True) %}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200843.987794, "supported_languages": null}, "macro.tpch.unit_test_mode": {"name": "unit_test_mode", "resource_type": "macro", "package_name": "tpch", "path": "macros/unit_test_mode.sql", "original_file_path": "macros/unit_test_mode.sql", "unique_id": "macro.tpch.unit_test_mode", "macro_sql": "{% macro unit_test_mode() %}\n  \n  {% if var is not defined %}\n    {{ return(False) }}\n\n  {% elif var('test') == 'true' %}\n     {{ return(True) }}\n\n  {% else %}\n    {{ return(False) }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "An example of how to create a unit test", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://macros/macro.yml", "arguments": [], "created_at": 1701200844.59608, "supported_languages": null}, "macro.tpch.test_all_values_gte_zero": {"name": "test_all_values_gte_zero", "resource_type": "macro", "package_name": "tpch", "path": "macros/test_all_values_gte_zero.sql", "original_file_path": "macros/test_all_values_gte_zero.sql", "unique_id": "macro.tpch.test_all_values_gte_zero", "macro_sql": "{% macro test_all_values_gte_zero(table, column) %}\n\nselect * from {{ ref(table) }} where {{ column }} < 0\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Macro to ensure values are greater than zero -- perfect for data tests", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://macros/macro.yml", "arguments": [{"name": "table", "type": "STRING", "description": "name of the table being tested"}, {"name": "column", "type": "STRING", "description": "name of the column being tested"}], "created_at": 1701200844.5966651, "supported_languages": null}, "macro.tpch.standard_account_fields": {"name": "standard_account_fields", "resource_type": "macro", "package_name": "tpch", "path": "macros/standard_account_fields.sql", "original_file_path": "macros/standard_account_fields.sql", "unique_id": "macro.tpch.standard_account_fields", "macro_sql": "{% macro standard_account_fields() %}\n\n{# How to use\n\nselect {{ standard_account_fields() }}\nfrom {{ ref('fct_orders') }}\n\n#}\n\n{%- set return_fields = [\"gross_item_sales_amount\", \n                        \"item_discount_amount\",\n                        \"item_tax_amount\",\n                        \"net_item_sales_amount\"]\n                        -%}\n\n {%- for field in return_fields %}\n     {{ field }}{% if not loop.last %},{% endif %}{% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "An example of using a macro to standardize the fiels within the analysis", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "tpch://macros/macro.yml", "arguments": [{"name": "return_fields", "type": "STRING", "description": "fields you would like returned for analysis"}], "created_at": 1701200844.597034, "supported_languages": null}, "macro.tpch.dont_do_this": {"name": "dont_do_this", "resource_type": "macro", "package_name": "tpch", "path": "macros/snowflake/dont_do_this.sql", "original_file_path": "macros/snowflake/dont_do_this.sql", "unique_id": "macro.tpch.dont_do_this", "macro_sql": "{% macro dont_do_this() %}\n\n{% set sql %}\n\nselect * from {{ ref('dim_customers') }}\nlimit 10\n\n{% endset %}\n\n{% set results = run_query(sql).rows %}\n\n{% for result in results %}\n\n    {{ log(result, info=True) }}\n\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200843.9893491, "supported_languages": null}, "macro.tpch.share_view": {"name": "share_view", "resource_type": "macro", "package_name": "tpch", "path": "macros/snowflake/share_view.sql", "original_file_path": "macros/snowflake/share_view.sql", "unique_id": "macro.tpch.share_view", "macro_sql": "{% macro share_view() %}\n\n{#\n\nUsage:\n\nThis would be used as a post-hook in the config block at the top of a model\n\nExample:\n\n{{ config(post_hook='{{ share_view() }}') }}\n\n#}\n\n    -- Only run in production\n    {% if target.name == 'prod' %}\n\n        {% set sql %}\n        -- Create a table with all data to be shared\n        create or replace table share_db.private.{{ this.name }} as\n            select * from {{ this }};\n        \n        grant select on share_db.private.{{ this.name }} to role transformer;\n\n        -- Create a secure view which selects based on current account\n        create or replace secure view share_db.public.{{ this.name }} as\n            select a.*\n            from share_db.private.{{ this.name }} as a\n            inner join share_db.private.company_shares as b on (\n                a.customer_id = b.customer_id\n                and b.snowflake_account = current_account()\n            );\n        \n        grant select on share_db.public.{{ this.name }} to share customer_share;\n        {% endset %}\n\n        {% set table = run_query(sql) %}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200843.990201, "supported_languages": null}, "macro.tpch.dbt_snowflake_validate_get_incremental_strategy": {"name": "dbt_snowflake_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "tpch", "path": "macros/snowflake/materializations/incremental_custom.sql", "original_file_path": "macros/snowflake/materializations/incremental_custom.sql", "unique_id": "macro.tpch.dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200843.992306, "supported_languages": null}, "macro.tpch.dbt_snowflake_get_incremental_sql": {"name": "dbt_snowflake_get_incremental_sql", "resource_type": "macro", "package_name": "tpch", "path": "macros/snowflake/materializations/incremental_custom.sql", "original_file_path": "macros/snowflake/materializations/incremental_custom.sql", "unique_id": "macro.tpch.dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'insert_overwrite' %}\n    {% do return(get_insert_overwrite_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200843.993078, "supported_languages": null}, "macro.tpch.incremental_validate_delete_target_not_in_source": {"name": "incremental_validate_delete_target_not_in_source", "resource_type": "macro", "package_name": "tpch", "path": "macros/snowflake/materializations/incremental_custom.sql", "original_file_path": "macros/snowflake/materializations/incremental_custom.sql", "unique_id": "macro.tpch.incremental_validate_delete_target_not_in_source", "macro_sql": "{% macro incremental_validate_delete_target_not_in_source(delete_target_not_in_source, strategy, unique_key, default) %}\n   \n   {% if not delete_target_not_in_source %}\n      {{ return(False) }}\n   {% elif delete_target_not_in_source and strategy not in ['merge', 'delete+insert'] %}\n      {% do exceptions.raise_compiler_error('invalid strategy for delete_target_not_in_source, must be one of: [merge, delete+insert]') %}\n   {% elif delete_target_not_in_source and not unique_key %}\n      {% do exceptions.raise_compiler_error('invalid configuration, must specify a unique_key to when delete_target_not_in_source is set to True') %}\n   {% else %}\n      {{ return(True) }}\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200843.993589, "supported_languages": null}, "macro.tpch.delete_from_target_not_in_source": {"name": "delete_from_target_not_in_source", "resource_type": "macro", "package_name": "tpch", "path": "macros/snowflake/materializations/incremental_custom.sql", "original_file_path": "macros/snowflake/materializations/incremental_custom.sql", "unique_id": "macro.tpch.delete_from_target_not_in_source", "macro_sql": "{% macro delete_from_target_not_in_source(tmp_relation, target_relation, unique_key) %}\n   \n    delete from {{ target_relation }} where {{ unique_key }} not in (select {{ unique_key }} from {{ tmp_relation }} );\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200843.993771, "supported_languages": null}, "macro.tpch.materialization_incremental_custom_snowflake": {"name": "materialization_incremental_custom_snowflake", "resource_type": "macro", "package_name": "tpch", "path": "macros/snowflake/materializations/incremental_custom.sql", "original_file_path": "macros/snowflake/materializations/incremental_custom.sql", "unique_id": "macro.tpch.materialization_incremental_custom_snowflake", "macro_sql": "{% materialization incremental_custom, adapter='snowflake' -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set delete_target_not_in_source = incremental_validate_delete_target_not_in_source(\n       delete_target_not_in_source = config.get('delete_target_not_in_source'), \n       strategy=strategy,\n       unique_key=unique_key,\n       default=False\n    )\n  %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n    {% set delete_sql = delete_from_target_not_in_source(tmp_relation, target_relation, unique_key) %}\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n    {% if delete_target_not_in_source %}\n      {{ delete_sql }}\n    {% endif %}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.tpch.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.tpch.incremental_validate_delete_target_not_in_source", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.tpch.dbt_snowflake_get_incremental_sql", "macro.tpch.delete_from_target_not_in_source", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200843.996025, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__get_catalog": {"name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n          where (\n            {%- for schema in schemas -%}\n              upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n            {%- endfor -%}\n          )\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n          where (\n            {%- for schema in schemas -%}\n              upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n            {%- endfor -%}\n          )\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200843.9972181, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set transient = config.get('transient', default=true) -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {% if temporary -%}\n          temporary\n        {%- elif transient -%}\n          transient\n        {%- endif %} table {{ relation }}\n        {%- set contract_config = config.get('contract') -%}\n        {%- if contract_config.enforced -%}\n          {{ get_assert_columns_equivalent(sql) }}\n          {{ get_table_columns_and_constraints() }}\n          {% set compiled_code = get_select_subquery(compiled_code) %}\n        {% endif %}\n        {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from (\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n        alter table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, temporary=temporary) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.01337, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.014099, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.014379, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {"name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.0153239, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.0154822, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.016236, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.016782, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_paginated_relations_array": {"name": "snowflake__get_paginated_relations_array", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_paginated_relations_array", "macro_sql": "{% macro snowflake__get_paginated_relations_array(max_iter, max_results_per_iter, max_total_results, schema_relation, watermark) %}\n\n  {% set paginated_relations = [] %}\n\n  {% for _ in range(0, max_iter) %}\n\n      {%- set paginated_sql -%}\n         show terse objects in {{ schema_relation }} limit {{ max_results_per_iter }} from '{{ watermark.table_name }}'\n      {%- endset -%}\n\n      {%- set paginated_result = run_query(paginated_sql) %}\n      {%- set paginated_n = (paginated_result | length) -%}\n\n      {#\n        terminating condition: if there are 0 records in the result we reached\n        the end exactly on the previous iteration\n      #}\n      {%- if paginated_n == 0 -%}\n        {%- break -%}\n      {%- endif -%}\n\n      {#\n        terminating condition: At some point the user needs to be reasonable with how\n        many objects are contained in their schemas. Since there was already\n        one iteration before attempting pagination, loop.index == max_iter means\n        the limit has been surpassed.\n      #}\n\n      {%- if loop.index == max_iter -%}\n        {%- set msg -%}\n           dbt will list a maximum of {{ max_total_results }} objects in schema {{ schema_relation }}.\n           Your schema exceeds this limit. Please contact support@getdbt.com for troubleshooting tips,\n           or review and reduce the number of objects contained.\n        {%- endset -%}\n\n        {% do exceptions.raise_compiler_error(msg) %}\n      {%- endif -%}\n\n      {%- do paginated_relations.append(paginated_result) -%}\n      {% set watermark.table_name = paginated_result.columns[1].values()[-1] %}\n\n      {#\n        terminating condition: paginated_n < max_results_per_iter means we reached the end\n      #}\n      {%- if paginated_n < max_results_per_iter -%}\n         {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n\n  {{ return(paginated_relations) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.0178251, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation, max_iter=10, max_results_per_iter=10000) %}\n\n  {%- set max_total_results = max_results_per_iter * max_iter -%}\n\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }} limit {{ max_results_per_iter }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n\n  {%- set n = (result | length) -%}\n  {%- set watermark = namespace(table_name=result.columns[1].values()[-1]) -%}\n  {%- set paginated = namespace(result=[]) -%}\n\n  {% if n >= max_results_per_iter %}\n\n    {% set paginated.result = snowflake__get_paginated_relations_array(\n         max_iter,\n         max_results_per_iter,\n         max_total_results,\n         schema_relation,\n         watermark\n       )\n    %}\n\n  {% endif %}\n\n  {%- set all_results_array = [result] + paginated.result -%}\n  {%- set result = result.merge(all_results_array) -%}\n  {%- do return(result) -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_snowflake.snowflake__get_paginated_relations_array"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.0188448, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.0191731, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.019372, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.019627, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n    {%- if relation.is_dynamic_table -%}\n        {%- set relation_type = 'dynamic table' -%}\n    {%- else -%}\n        {%- set relation_type = relation.type -%}\n    {%- endif -%}\n    comment on {{ relation_type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.019955, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"dynamic table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n    alter {{ relation_type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.0206132, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.020803, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.0209658, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.021434, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.021626, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.022112, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"dynamic table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n\n    {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation_type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n    {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation_type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.0229912, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.023211, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.023456, "supported_languages": null}, "macro.dbt_snowflake.snowflake__drop_relation": {"name": "snowflake__drop_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__drop_relation", "macro_sql": "{% macro snowflake__drop_relation(relation) -%}\n    {%- if relation.is_dynamic_table -%}\n        {% call statement('drop_relation', auto_begin=False) -%}\n            drop dynamic table if exists {{ relation }}\n        {%- endcall %}\n    {%- else -%}\n        {{- default__drop_relation(relation) -}}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.0237389, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.024056, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.024172, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.024519, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.025723, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.0260348, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.026293, "supported_languages": null}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.028477, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.028794, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_view_snowflake": {"name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.029343, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.031776, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False) %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          session.use_database(target_relation.database)\n          session.use_schema(target_relation.schema)\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    {% set target_relation_name = resolve_model_name(target_relation) %}\n    df.write.mode(\"overwrite\").save_as_table('{{ target_relation_name }}', create_temp_table={{temporary}})\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.032085, "supported_languages": null}, "macro.dbt_snowflake.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_script_comment", "macro_sql": "{% macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.032192, "supported_languages": null}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert strategy can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy == \"delete+insert\" and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `delete+insert` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\") %}\n    {{ return(\"view\") }}\n  {% elif strategy == \"delete+insert\" and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.034663, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.038035, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.038226, "supported_languages": null}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.038594, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__can_clone_table": {"name": "snowflake__can_clone_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__can_clone_table", "macro_sql": "{% macro snowflake__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.038846, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_clone": {"name": "snowflake__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_clone", "macro_sql": "{% macro snowflake__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      {{ \"transient\" if config.get(\"transient\", true) }}\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n      {{ \"copy grants\" if config.get(\"copy_grants\", false) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.039135, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql": {"name": "snowflake__get_alter_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/ddl.sql", "original_file_path": "macros/materializations/dynamic_table/ddl.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_alter_dynamic_table_as_sql(\n    target_relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) -%}\n    {{- log('Applying ALTER to: ' ~ target_relation) -}}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{- snowflake__get_replace_dynamic_table_as_sql(target_relation, sql, existing_relation, backup_relation, intermediate_relation) -}}\n\n    {% else %}\n\n        {%- set target_lag = configuration_changes.target_lag -%}\n        {%- if target_lag -%}{{- log('Applying UPDATE TARGET_LAG to: ' ~ existing_relation) -}}{%- endif -%}\n        {%- set snowflake_warehouse = configuration_changes.snowflake_warehouse -%}\n        {%- if snowflake_warehouse -%}{{- log('Applying UPDATE WAREHOUSE to: ' ~ existing_relation) -}}{%- endif -%}\n\n        alter dynamic table {{ existing_relation }} set\n            {% if target_lag %}target_lag = '{{ target_lag.context }}'{% endif %}\n            {% if snowflake_warehouse %}warehouse = {{ snowflake_warehouse.context }}{% endif %}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_dynamic_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.04211, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql": {"name": "snowflake__get_create_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/ddl.sql", "original_file_path": "macros/materializations/dynamic_table/ddl.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_create_dynamic_table_as_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n\n    create or replace dynamic table {{ relation }}\n        target_lag = '{{ config.get(\"target_lag\") }}'\n        warehouse = {{ config.get(\"snowflake_warehouse\") }}\n        as (\n            {{ sql }}\n        )\n    ;\n    {{ snowflake__refresh_dynamic_table(relation) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__refresh_dynamic_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.0424361, "supported_languages": null}, "macro.dbt_snowflake.snowflake__describe_dynamic_table": {"name": "snowflake__describe_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/ddl.sql", "original_file_path": "macros/materializations/dynamic_table/ddl.sql", "unique_id": "macro.dbt_snowflake.snowflake__describe_dynamic_table", "macro_sql": "{% macro snowflake__describe_dynamic_table(relation) %}\n    {%- set _dynamic_table_sql -%}\n        show dynamic tables\n            like '{{ relation.identifier }}'\n            in schema {{ relation.database }}.{{ relation.schema }}\n        ;\n        select\n            \"name\",\n            \"schema_name\",\n            \"database_name\",\n            \"text\",\n            \"target_lag\",\n            \"warehouse\"\n        from table(result_scan(last_query_id()))\n    {%- endset %}\n    {% set _dynamic_table = run_query(_dynamic_table_sql) %}\n\n    {% do return({'dynamic_table': _dynamic_table}) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.0428002, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_as_sql": {"name": "snowflake__get_replace_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/ddl.sql", "original_file_path": "macros/materializations/dynamic_table/ddl.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_replace_dynamic_table_as_sql(target_relation, sql, existing_relation, backup_relation, intermediate_relation) -%}\n    {{- log('Applying REPLACE to: ' ~ target_relation) -}}\n    {{ snowflake__get_drop_dynamic_table_sql(existing_relation) }};\n    {{ snowflake__get_create_dynamic_table_as_sql(target_relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.043068, "supported_languages": null}, "macro.dbt_snowflake.snowflake__refresh_dynamic_table": {"name": "snowflake__refresh_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/ddl.sql", "original_file_path": "macros/materializations/dynamic_table/ddl.sql", "unique_id": "macro.dbt_snowflake.snowflake__refresh_dynamic_table", "macro_sql": "{% macro snowflake__refresh_dynamic_table(relation) -%}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n\n    alter dynamic table {{ relation }} refresh\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.043224, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes": {"name": "snowflake__get_dynamic_table_configuration_changes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/ddl.sql", "original_file_path": "macros/materializations/dynamic_table/ddl.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro_sql": "{% macro snowflake__get_dynamic_table_configuration_changes(existing_relation, new_config) -%}\n    {% set _existing_dynamic_table = snowflake__describe_dynamic_table(existing_relation) %}\n    {% set _configuration_changes = existing_relation.dynamic_table_config_changeset(_existing_dynamic_table, new_config) %}\n    {% do return(_configuration_changes) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__describe_dynamic_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.0435, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql": {"name": "snowflake__get_drop_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/ddl.sql", "original_file_path": "macros/materializations/dynamic_table/ddl.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_drop_dynamic_table_sql(relation) %}\n    drop dynamic table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.043608, "supported_languages": null}, "macro.dbt_snowflake.materialization_dynamic_table_snowflake": {"name": "materialization_dynamic_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/materialization.sql", "original_file_path": "macros/materializations/dynamic_table/materialization.sql", "unique_id": "macro.dbt_snowflake.materialization_dynamic_table_snowflake", "macro_sql": "{% materialization dynamic_table, adapter='snowflake' %}\n\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.DynamicTable) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.DynamicTable if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ dynamic_table_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = dynamic_table_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ dynamic_table_execute_no_op(target_relation) }}\n        {% else %}\n            {{ dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ dynamic_table_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt_snowflake.dynamic_table_setup", "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro.dbt_snowflake.dynamic_table_teardown", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.0484831, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dynamic_table_setup": {"name": "dynamic_table_setup", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/materialization.sql", "original_file_path": "macros/materializations/dynamic_table/materialization.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_setup", "macro_sql": "{% macro dynamic_table_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ snowflake__get_drop_dynamic_table_sql(preexisting_backup_relation) }}\n    {{ snowflake__get_drop_dynamic_table_sql(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.048864, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_teardown": {"name": "dynamic_table_teardown", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/materialization.sql", "original_file_path": "macros/materializations/dynamic_table/materialization.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_teardown", "macro_sql": "{% macro dynamic_table_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ snowflake__get_drop_dynamic_table_sql(backup_relation) }}\n    {{ snowflake__get_drop_dynamic_table_sql(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.049091, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_get_build_sql": {"name": "dynamic_table_get_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/materialization.sql", "original_file_path": "macros/materializations/dynamic_table/materialization.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro_sql": "{% macro dynamic_table_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = snowflake__get_create_dynamic_table_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_dynamic_table %}\n        {% set build_sql = snowflake__get_replace_dynamic_table_as_sql(target_relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = snowflake__get_dynamic_table_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"No configuration changes were identified on: `\" ~ target_relation ~ \"`. Continuing.\") }}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = snowflake__get_alter_dynamic_table_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'continue', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario: `\" ~ on_configuration_change ~ \"`\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_as_sql", "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.0505412, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_no_op": {"name": "dynamic_table_execute_no_op", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/materialization.sql", "original_file_path": "macros/materializations/dynamic_table/materialization.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro_sql": "{% macro dynamic_table_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.0507782, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_build_sql": {"name": "dynamic_table_execute_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/materialization.sql", "original_file_path": "macros/materializations/dynamic_table/materialization.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro_sql": "{% macro dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.051275, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.05157, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.051747, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.051851, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.051957, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.052094, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.0522938, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.052536, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.0527081, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.052845, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.053025, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.054105, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.0543098, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.0544581, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.054603, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.054762, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.0551429, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.055448, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.055846, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.056279, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.056548, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.060069, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.060297, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.060544, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.061286, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.061463, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.061641, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.063054, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.06444, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.068244, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.068531, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.0686998, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.068788, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.068932, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.069054, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.069262, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.070326, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.0705888, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.070864, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.071323, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.077559, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.0796008, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.080054, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.0803661, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.080745, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.081126, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.082697, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.0832891, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.08399, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.084247, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.0849762, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.090982, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.092739, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.093035, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.09422, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.094547, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.095222, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.095928, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.096829, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.0970938, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.097297, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.097611, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.097814, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.098123, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.098321, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.0986, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.0988019, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.098971, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.099264, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.10467, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.109865, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.111105, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.112322, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.113185, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1181371, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.118578, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.118857, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_materialized_view_as_sql(target_relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_materialized_view_as_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1202629, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.120518, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.12121, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "original_file_path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1216881, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "original_file_path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1218429, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1223402, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1225321, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.12285, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.122992, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_as_sql": {"name": "get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "unique_id": "macro.dbt.get_replace_materialized_view_as_sql", "macro_sql": "{% macro get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {{- log('Applying REPLACE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_replace_materialized_view_as_sql', 'dbt')(relation, sql, existing_relation, backup_relation, intermediate_relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.123428, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_as_sql": {"name": "default__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_as_sql", "macro_sql": "{% macro default__get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.123725, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.124175, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1244211, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1246579, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.12478, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.125082, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.125225, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {{ create_or_replace_clone(target_relation, defer_relation) }}\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.128521, "supported_languages": ["sql"]}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.129598, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.129719, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1302478, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.130425, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.130562, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.131816, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.13219, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.132524, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1355891, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.136526, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.136731, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1371899, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1379, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.138381, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.13858, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1387641, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.141582, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1419039, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.142129, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.143611, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.144033, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.144199, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.144386, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.144811, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.14803, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.152544, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1534479, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.153692, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.154177, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.154376, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.154508, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.154649, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.15477, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1549282, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.155048, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.155518, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.155712, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.157002, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.157448, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1578429, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.15837, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1586401, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.158935, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.159358, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.159638, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.160026, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.160353, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1606212, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.161231, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.162816, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.16354, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.163863, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1658182, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.167142, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1679308, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.168177, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.168431, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.168514, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1688619, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.169034, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.169313, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.169464, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.169755, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.169868, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.170221, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1704042, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1706471, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.170725, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1709921, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.171137, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.171424, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.171644, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.172255, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.172655, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.172987, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.173152, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.173436, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.173584, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.173837, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.174001, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1742551, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.174423, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.174674, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.174783, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1750789, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.175224, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.175468, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1755772, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.176488, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.176651, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.176897, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.177066, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.177237, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.177402, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1775758, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.177759, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.17792, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.178067, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.178237, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1783922, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.178549, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1786938, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.178984, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1791182, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1793761, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.179486, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.179826, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1801019, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.180251, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.180767, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.180935, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1812239, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.181498, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.181628, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.182039, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.182285, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.182571, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.182708, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.183085, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.183272, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.18344, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.183619, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1840901, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.184244, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.184386, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.184494, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.18466, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.184737, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.184902, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.18507, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.185868, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1860778, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.186235, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.186659, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.186852, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1870022, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1871831, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.187328, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.189879, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.190057, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.190277, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.190573, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.190826, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.191139, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.191317, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.191473, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.191666, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.191952, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1922, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.192977, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.193203, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.193341, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1935291, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.193929, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.19432, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.194582, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.194797, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.19637, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.196481, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.196643, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.196751, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.197095, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.19728, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1973782, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.197595, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.197779, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.198005, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.198185, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.1984158, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.2257102, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.225944, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.226193, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.2264268, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.22754, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.2280698, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.228257, "supported_languages": null}, "macro.dbt.default__get_limit_subquery_sql": {"name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.228389, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.229006, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.229175, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.229375, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.2295418, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.229805, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.230272, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.2316108, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.2318752, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.232079, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.232227, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.2324648, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.232704, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.232905, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.2332, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.233384, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.233541, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.234396, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {%- if relation.is_table -%}\n            {{- drop_table(relation) -}}\n        {%- elif relation.is_view -%}\n            {{- drop_view(relation) -}}\n        {%- elif relation.is_materialized_view -%}\n            {{- drop_materialized_view(relation) -}}\n        {%- else -%}\n            drop {{ relation.type }} if exists {{ relation }} cascade\n        {%- endif -%}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.drop_table", "macro.dbt.drop_view", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.234853, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n  {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.235033, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.235134, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n  {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.235316, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.2354171, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n  {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.235585, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.2356858, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.2376928, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.237848, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.238146, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.2383602, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.238556, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.238736, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.239546, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.2398841, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.240064, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.2404292, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.240654, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.241241, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.24149, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.2422678, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.243801, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.243952, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.244735, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.24513, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.245694, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.246165, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.246239, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.246709, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.246932, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.24721, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701200844.247475, "supported_languages": null}}, "docs": {"doc.tpch.__dbt_utils__": {"name": "__dbt_utils__", "resource_type": "doc", "package_name": "tpch", "path": "overview.md", "original_file_path": "models/overview.md", "unique_id": "doc.tpch.__dbt_utils__", "block_contents": "# Utility macros\nThis package is maintained by dbt Labs.\n\nOur dbt project heavily uses this suite of utility macros, especially:\n- `surrogate_key`\n- `test_equality`\n- `pivot`\n\nfor more info, please check [dbt_utils](https://hub.getdbt.com/dbt-labs/dbt_utils/latest/)"}, "doc.tpch.__codegen__": {"name": "__codegen__", "resource_type": "doc", "package_name": "tpch", "path": "overview.md", "original_file_path": "models/overview.md", "unique_id": "doc.tpch.__codegen__", "block_contents": "# codegen\nThis package is maintained by dbt Labs.\n\nIt provides macros that are especially helpful in creating yml files and base models quickly.\n\nfor more info, please check [codgen](https://hub.getdbt.com/dbt-labs/codegen/latest/)"}, "doc.tpch.__snowflake_spend__": {"name": "__snowflake_spend__", "resource_type": "doc", "package_name": "tpch", "path": "overview.md", "original_file_path": "models/overview.md", "unique_id": "doc.tpch.__snowflake_spend__", "block_contents": "# snowflake_spend\nThis package is provided by the community -- created by gitlabhq. \n\nThe intent of this package is to understand the cost your Snowflake Data Warehouse is accruing\n\nfor more info, please check [snowflake_spend](https://hub.getdbt.com/gitlabhq/snowflake_spend/latest/)"}, "doc.tpch.__dbt_external_tables__": {"name": "__dbt_external_tables__", "resource_type": "doc", "package_name": "tpch", "path": "overview.md", "original_file_path": "models/overview.md", "unique_id": "doc.tpch.__dbt_external_tables__", "block_contents": "# dbt_external_tables\nThis package is maintained by dbt Labs.\n\nIt provides macros to create/replace external tables and refresh their partitions, using the metadata provided in your .yml file source definitions\n\nfor more info, please check [dbt_external_tables](https://hub.getdbt.com/dbt-labs/dbt_external_tables/latest/)"}, "doc.tpch.tpch_source": {"name": "tpch_source", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.tpch_source", "block_contents": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)"}, "doc.tpch.order_item_key": {"name": "order_item_key", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.order_item_key", "block_contents": "surrogate key for the model -- combo of order_key + line_number"}, "doc.tpch.line_number": {"name": "line_number", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.line_number", "block_contents": "sequence of the order items within the order"}, "doc.tpch.return_flag": {"name": "return_flag", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.return_flag", "block_contents": "letter determining the status of the return"}, "doc.tpch.ship_date": {"name": "ship_date", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.ship_date", "block_contents": "the date the order item is being shipped"}, "doc.tpch.commit_date": {"name": "commit_date", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.commit_date", "block_contents": "the date the order item is being commited"}, "doc.tpch.receipt_date": {"name": "receipt_date", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.receipt_date", "block_contents": "the receipt date of the order item"}, "doc.tpch.ship_mode": {"name": "ship_mode", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.ship_mode", "block_contents": "method of shipping"}, "doc.tpch.comment": {"name": "comment", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.comment", "block_contents": "additional commentary"}, "doc.tpch.extended_price": {"name": "extended_price", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.extended_price", "block_contents": "line item price"}, "doc.tpch.discount_percentage": {"name": "discount_percentage", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.discount_percentage", "block_contents": "percentage of the discount"}, "doc.tpch.supplier_name": {"name": "supplier_name", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.supplier_name", "block_contents": "id of the supplier"}, "doc.tpch.supplier_address": {"name": "supplier_address", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.supplier_address", "block_contents": "address of the supplier"}, "doc.tpch.phone_number": {"name": "phone_number", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.phone_number", "block_contents": "phone number of the supplier"}, "doc.tpch.account_balance": {"name": "account_balance", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.account_balance", "block_contents": "raw account balance"}, "doc.tpch.retail_price": {"name": "retail_price", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.retail_price", "block_contents": "raw retail price"}, "doc.tpch.available_quantity": {"name": "available_quantity", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.available_quantity", "block_contents": "raw available quantity"}, "doc.tpch.cost": {"name": "cost", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.cost", "block_contents": "raw cost"}, "doc.tpch.base_price": {"name": "base_price", "resource_type": "doc", "package_name": "tpch", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.tpch.base_price", "block_contents": "since extended_price is the line item total, we back out the price per item"}, "doc.tpch.discounted_price": {"name": "discounted_price", "resource_type": "doc", "package_name": "tpch", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.tpch.discounted_price", "block_contents": "factoring in the discount_percentage, the line item discount total"}, "doc.tpch.tax_rate": {"name": "tax_rate", "resource_type": "doc", "package_name": "tpch", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.tpch.tax_rate", "block_contents": "tax rate of the order item"}, "doc.tpch.gross_item_sales_amount": {"name": "gross_item_sales_amount", "resource_type": "doc", "package_name": "tpch", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.tpch.gross_item_sales_amount", "block_contents": "same as extended_price"}, "doc.tpch.discounted_item_sales_amount": {"name": "discounted_item_sales_amount", "resource_type": "doc", "package_name": "tpch", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.tpch.discounted_item_sales_amount", "block_contents": "line item (includes quantity) discount amount"}, "doc.tpch.item_discount_amount": {"name": "item_discount_amount", "resource_type": "doc", "package_name": "tpch", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.tpch.item_discount_amount", "block_contents": "item level discount amount. this is always a negative number"}, "doc.tpch.item_tax_amount": {"name": "item_tax_amount", "resource_type": "doc", "package_name": "tpch", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.tpch.item_tax_amount", "block_contents": "item level tax total"}, "doc.tpch.net_item_sales_amount": {"name": "net_item_sales_amount", "resource_type": "doc", "package_name": "tpch", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.tpch.net_item_sales_amount", "block_contents": "the net total which factors in discount and tax"}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {"exposure.tpch.sales_by_region": {"name": "sales_by_region", "resource_type": "exposure", "package_name": "tpch", "path": "marts/aggregates/exposures.yml", "original_file_path": "models/marts/aggregates/exposures.yml", "unique_id": "exposure.tpch.sales_by_region", "fqn": ["tpch", "marts", "aggregates", "sales_by_region"], "type": "dashboard", "owner": {"email": "doug.guthrie@dbtlabs.com", "name": "Doug Guthrie"}, "description": "# An h1 header\n============\n\nParagraphs are separated by a blank line.\n\n2nd paragraph. *Italic*, **bold**, and `monospace`\nItemized lists look like:\n  * this one\n  * that one\n  * the other one\n", "label": null, "maturity": "high", "meta": {}, "tags": [], "config": {"enabled": true}, "unrendered_config": {}, "url": "https://10az.online.tableau.com/#/site/dbtlabspartner/views/SalesWorkbook/Dashboard1", "depends_on": {"macros": [], "nodes": ["model.tpch.fct_orders"]}, "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1701200844.724601}}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {"model.tpch.fct_orders_stats_py": [{"database": "PABLOC", "schema": "MARTS", "name": "fct_orders_stats_py", "resource_type": "model", "package_name": "tpch", "path": "marts/core/fct_orders_stats_py.py", "original_file_path": "models/marts/core/fct_orders_stats_py.py", "unique_id": "model.tpch.fct_orders_stats_py", "fqn": ["tpch", "marts", "core", "fct_orders_stats_py"], "alias": "fct_orders_stats_py", "checksum": {"name": "sha256", "checksum": "bff9c52d4d54331d1e593255657a6be16cb1099189ac1026ced51ff521a7e640"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "snowflake_warehouse": "SNOWPARK_WH", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "table", "snowflake_warehouse": "SNOWPARK_WH", "enabled": false}, "created_at": 1701200844.497906, "config_call_dict": {"materialized": "table", "snowflake_warehouse": "SNOWPARK_WH", "enabled": false}, "relation_name": "PABLOC.MARTS.fct_orders_stats_py", "raw_code": "def model(dbt, session):\n\n    # Access to config block\n    dbt.config(\n        materialized='table',\n        snowflake_warehouse='SNOWPARK_WH',\n        enabled=False,\n    )\n\n    # Get upstream data\n    df = dbt.ref('fct_orders')\n\n    # Describe the data\n    df = df.describe()\n\n    return df", "language": "python", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.tpch.forecast_score_py": [{"database": "PABLOC", "schema": "MARTS", "name": "forecast_score_py", "resource_type": "model", "package_name": "tpch", "path": "ml/forecast_score_py.py", "original_file_path": "models/ml/forecast_score_py.py", "unique_id": "model.tpch.forecast_score_py", "fqn": ["tpch", "ml", "forecast_score_py"], "alias": "forecast_score_py", "checksum": {"name": "sha256", "checksum": "1c20c529b9c20f2c7a83d2885b162b9dfce14767deae9e356eb5404e05135e5f"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": ["pandas", "prophet"], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "snowflake_warehouse": "SNOWPARK_WH", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "table", "enabled": false, "packages": ["pandas", "prophet"], "snowflake_warehouse": "SNOWPARK_WH"}, "created_at": 1701200844.500243, "config_call_dict": {"materialized": "table", "packages": ["pandas", "prophet"], "snowflake_warehouse": "SNOWPARK_WH"}, "relation_name": "PABLOC.MARTS.forecast_score_py", "raw_code": "import pandas as pd\n\nfrom prophet import Prophet\nfrom prophet.serialize import model_from_json\n\n\ndef model(dbt, session):\n\n    # dbt configuration\n    dbt.config(packages=['pandas', 'prophet'], snowflake_warehouse='SNOWPARK_WH')\n\n    # get trained ML models\n    # TODO: filter by trained_at to last X days or something\n    models = dbt.ref('forecast_train_py').to_pandas()\n\n    # get most recent trained_at\n    most_recent_trained_at = models['trained_at'].max()\n\n    # filter models by most recent trained_at\n    models = models[models['trained_at'] == most_recent_trained_at]\n\n    # get list of unique locations dynamically\n    locations = sorted(list(models['location'].unique()))\n\n    # hydrate models as Prophet objects\n    models = {\n        location: model_from_json(\n            models[models['location'] == location]['model'].iloc[0]\n        )\n        for location in locations\n    }\n\n    # create future dataframe to forecast on\n    future = models[locations[0]].make_future_dataframe(periods=52 * 3, freq='W')\n\n    # score model per location\n    forecasts = {location: models[location].predict(future) for location in locations}\n\n    # dataframe magic (use location to filter forecasts from single table)\n    for location, forecast in forecasts.items():\n        forecast['location'] = location\n\n    # create a single dataframe to return\n    df = pd.concat(forecasts.values())\n\n    return df", "language": "python", "refs": [{"name": "forecast_train_py", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.tpch.forecast_train_py": [{"database": "PABLOC", "schema": "MARTS", "name": "forecast_train_py", "resource_type": "model", "package_name": "tpch", "path": "ml/forecast_train_py.py", "original_file_path": "models/ml/forecast_train_py.py", "unique_id": "model.tpch.forecast_train_py", "fqn": ["tpch", "ml", "forecast_train_py"], "alias": "forecast_train_py", "checksum": {"name": "sha256", "checksum": "ad2555bf17cf4d66fcde0c27186f19f0e2371eae2c14a2788d6abd462c4b760c"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": ["pandas", "prophet"], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "use_anonymous_sproc": true, "snowflake_warehouse": "SNOWPARK_WH", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"use_anonymous_sproc": true, "materialized": "incremental", "enabled": false, "packages": ["pandas", "prophet"], "snowflake_warehouse": "SNOWPARK_WH"}, "created_at": 1701200844.502599, "config_call_dict": {"materialized": "incremental", "packages": ["pandas", "prophet"], "snowflake_warehouse": "SNOWPARK_WH"}, "relation_name": "PABLOC.MARTS.forecast_train_py", "raw_code": "import pandas as pd\n\nfrom datetime import datetime\n\nfrom prophet import Prophet\nfrom prophet.serialize import model_to_json\n\n\ndef model(dbt, session):\n\n    # dbt configuration\n    dbt.config(\n        materialized='incremental',\n        packages=['pandas', 'prophet'],\n        snowflake_warehouse='SNOWPARK_WH',\n    )\n\n    # get upstream data\n    revenue = dbt.ref('revenue_weekly_by_ship_mode').to_pandas()\n\n    # rename to match Prophet's expected column names\n    renames = {\n        'date_week'.upper(): 'ds',\n        'ship_mode'.upper(): 'location',\n        'total_revenue'.upper(): 'y',\n    }\n    revenue = revenue.rename(columns=renames)\n\n    # get list of unique locations dynamically\n    locations = sorted(list(revenue['location'].unique()))\n\n    # train the ML models per location\n    models = [\n        Prophet().fit(revenue[revenue['location'] == location])\n        for location in locations\n    ]\n\n    # use current time to 'version' models\n    trained_at = datetime.now()\n\n    # persist models -- serialize Prophet as JSON via provided method\n    df = pd.DataFrame(\n        {\n            'trained_at': [trained_at] * len(locations),\n            'location': locations,\n            'model': [model_to_json(model) for model in models],\n        }\n    )\n\n    return df", "language": "python", "refs": [{"name": "revenue_weekly_by_ship_mode", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}]}, "parent_map": {"model.tpch.stg_dbtc__pages": ["source.tpch.dbtc.pages"], "model.tpch.stg_dbtc__tracks": ["source.tpch.dbtc.tracks"], "model.tpch.stg_dbtc__link_clicked": ["source.tpch.dbtc.link_clicked"], "model.tpch.stg_yahooquery__pages": ["source.tpch.yahooquery.pages"], "model.tpch.stg_yahooquery__link_clicked": ["source.tpch.yahooquery.link_clicked"], "model.tpch.stg_yahooquery__tracks": ["source.tpch.yahooquery.tracks"], "model.tpch.stg_tpch_orders": ["source.tpch.tpch.orders"], "model.tpch.stg_tpch_part_suppliers": ["source.tpch.tpch.partsupp"], "model.tpch.stg_tpch_suppliers": ["source.tpch.tpch.supplier"], "model.tpch.stg_tpch_regions": ["source.tpch.tpch.region"], "model.tpch.stg_tpch_customers": ["source.tpch.tpch.customer"], "model.tpch.stg_tpch_nations": ["source.tpch.tpch.nation"], "model.tpch.stg_tpch_line_items": ["source.tpch.tpch.lineitem"], "model.tpch.stg_tpch_parts": ["source.tpch.tpch.part"], "model.tpch.dim_suppliers": ["model.tpch.stg_tpch_nations", "model.tpch.stg_tpch_regions", "model.tpch.stg_tpch_suppliers"], "model.tpch.dim_parts": ["model.tpch.stg_tpch_parts"], "model.tpch.dim_customers": ["model.tpch.stg_tpch_customers", "model.tpch.stg_tpch_nations", "model.tpch.stg_tpch_regions"], "model.tpch.fct_orders_stats_sql": ["model.tpch.fct_orders"], "model.tpch.fct_order_items": ["model.tpch.order_items", "model.tpch.part_suppliers"], "model.tpch.fct_orders": ["model.tpch.order_items", "model.tpch.stg_tpch_orders"], "model.tpch.agg_ship_modes_hardcoded_pivot": ["model.tpch.fct_order_items"], "model.tpch.agg_ship_modes_dynamic_pivot": ["model.tpch.fct_order_items"], "model.tpch.int_segment__link_clicked": ["model.tpch.stg_dbtc__link_clicked", "model.tpch.stg_yahooquery__link_clicked"], "model.tpch.int_segment__pages": ["model.tpch.stg_dbtc__pages", "model.tpch.stg_yahooquery__pages"], "model.tpch.int_segment__tracks": ["model.tpch.stg_dbtc__tracks", "model.tpch.stg_yahooquery__tracks"], "model.tpch.part_suppliers": ["model.tpch.stg_tpch_part_suppliers", "model.tpch.stg_tpch_parts", "model.tpch.stg_tpch_suppliers"], "model.tpch.order_items": ["model.tpch.stg_tpch_line_items", "model.tpch.stg_tpch_orders"], "model.tpch.all_days": [], "model.tpch.use_variables": ["model.tpch.fct_order_items"], "model.tpch.materialization_incremental": ["source.tpch.tpch.customer"], "snapshot.tpch.tpch_supplier_snapshot": ["source.tpch.tpch.supplier"], "snapshot.tpch.tpch_part_snapshot": ["source.tpch.tpch.part"], "snapshot.tpch.tpch_customer_snapshot": ["source.tpch.tpch.customer"], "analysis.tpch.customer_snapshot_query": ["snapshot.tpch.tpch_customer_snapshot"], "test.tpch.macro_stg_tpch_orders_assert_pos_price": ["model.tpch.stg_tpch_orders"], "test.tpch.stg_tpch_orders_assert_positive_price": ["model.tpch.stg_tpch_orders"], "test.tpch.macro_stg_tphc_suppliers_assert_pos_acct_bal": ["model.tpch.stg_tpch_suppliers"], "seed.tpch.snowflake_contract_rates": [], "seed.tpch.country_codes": [], "test.tpch.unique_stg_tpch_customers_customer_key.7f1a18b1a4": ["model.tpch.stg_tpch_customers"], "test.tpch.not_null_stg_tpch_customers_customer_key.a10e15535a": ["model.tpch.stg_tpch_customers"], "test.tpch.unique_stg_tpch_line_items_order_item_key.c819d91e0a": ["model.tpch.stg_tpch_line_items"], "test.tpch.not_null_stg_tpch_line_items_order_item_key.cd47c7a679": ["model.tpch.stg_tpch_line_items"], "test.tpch.unique_stg_tpch_nations_nation_key.9e3675553d": ["model.tpch.stg_tpch_nations"], "test.tpch.not_null_stg_tpch_nations_nation_key.d0c2fe32ed": ["model.tpch.stg_tpch_nations"], "test.tpch.unique_stg_tpch_orders_order_key.bd29f13cc9": ["model.tpch.stg_tpch_orders"], "test.tpch.not_null_stg_tpch_orders_order_key.bb22e75ae8": ["model.tpch.stg_tpch_orders"], "test.tpch.unique_stg_tpch_part_suppliers_part_supplier_key.96ab01c1ae": ["model.tpch.stg_tpch_part_suppliers"], "test.tpch.not_null_stg_tpch_part_suppliers_part_supplier_key.3cc6ccee2e": ["model.tpch.stg_tpch_part_suppliers"], "test.tpch.unique_stg_tpch_parts_part_key.afbc7ad489": ["model.tpch.stg_tpch_parts"], "test.tpch.not_null_stg_tpch_parts_part_key.cc8e610420": ["model.tpch.stg_tpch_parts"], "test.tpch.unique_stg_tpch_regions_region_key.b2bd891bb5": ["model.tpch.stg_tpch_regions"], "test.tpch.not_null_stg_tpch_regions_region_key.869fa0b326": ["model.tpch.stg_tpch_regions"], "test.tpch.unique_stg_tpch_suppliers_supplier_key.6215308464": ["model.tpch.stg_tpch_suppliers"], "test.tpch.not_null_stg_tpch_suppliers_supplier_key.97c31a786d": ["model.tpch.stg_tpch_suppliers"], "test.tpch.unique_dim_customers_customer_key.ad8156656e": ["model.tpch.dim_customers"], "test.tpch.not_null_dim_customers_customer_key.4bebfb3411": ["model.tpch.dim_customers"], "test.tpch.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.dad4601b69": ["model.tpch.dim_customers"], "test.tpch.unique_dim_parts_part_key.712df18d58": ["model.tpch.dim_parts"], "test.tpch.not_null_dim_parts_part_key.4358f880d9": ["model.tpch.dim_parts"], "test.tpch.unique_dim_suppliers_supplier_key.58fc3e4770": ["model.tpch.dim_suppliers"], "test.tpch.not_null_dim_suppliers_supplier_key.4315350956": ["model.tpch.dim_suppliers"], "test.tpch.unique_fct_order_items_order_item_key.4d6426a255": ["model.tpch.fct_order_items"], "test.tpch.not_null_fct_order_items_order_item_key.47516a6371": ["model.tpch.fct_order_items"], "test.tpch.unique_fct_orders_order_key.f5e7a90273": ["model.tpch.fct_orders"], "test.tpch.not_null_fct_orders_order_key.6a6f83ab15": ["model.tpch.fct_orders"], "test.tpch.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b": ["model.tpch.dim_customers", "model.tpch.fct_orders"], "test.tpch.unique_order_items_order_item_key.43a40b2837": ["model.tpch.order_items"], "test.tpch.not_null_order_items_order_item_key.44b9fa7311": ["model.tpch.order_items"], "test.tpch.unique_part_suppliers_part_supplier_key.909477afa8": ["model.tpch.part_suppliers"], "test.tpch.not_null_part_suppliers_part_supplier_key.b8b2022ed3": ["model.tpch.part_suppliers"], "test.tpch.unique_materialization_incremental_customer_key.325783f327": ["model.tpch.materialization_incremental"], "test.tpch.not_null_materialization_incremental_customer_key.e2b95d8009": ["model.tpch.materialization_incremental"], "test.tpch.unique_use_variables_order_item_key.fb5576fe0e": ["model.tpch.use_variables"], "test.tpch.not_null_use_variables_order_item_key.c2bd602686": ["model.tpch.use_variables"], "test.tpch.source_not_null_dbtc_link_clicked_link.f7c8e69ba4": ["source.tpch.dbtc.link_clicked"], "test.tpch.source_not_null_dbtc_link_clicked_id.9028bfe6aa": ["source.tpch.dbtc.link_clicked"], "test.tpch.source_unique_dbtc_link_clicked_id.6a057563bc": ["source.tpch.dbtc.link_clicked"], "test.tpch.source_not_null_dbtc_link_clicked_event.7882b2f4f6": ["source.tpch.dbtc.link_clicked"], "test.tpch.source_not_null_dbtc_link_clicked_sent_at.39cf8a9ef9": ["source.tpch.dbtc.link_clicked"], "test.tpch.source_not_null_dbtc_pages_id.f6b6a8c945": ["source.tpch.dbtc.pages"], "test.tpch.source_unique_dbtc_pages_id.8457cf34c6": ["source.tpch.dbtc.pages"], "test.tpch.source_not_null_dbtc_pages_sent_at.485c11a73d": ["source.tpch.dbtc.pages"], "test.tpch.source_not_null_dbtc_tracks_event_text.80a027ce56": ["source.tpch.dbtc.tracks"], "test.tpch.source_not_null_dbtc_tracks_id.a88be3eab6": ["source.tpch.dbtc.tracks"], "test.tpch.source_unique_dbtc_tracks_id.d4b89ee628": ["source.tpch.dbtc.tracks"], "test.tpch.source_not_null_dbtc_tracks_event.1fd1e17274": ["source.tpch.dbtc.tracks"], "test.tpch.source_not_null_dbtc_tracks_sent_at.1ad9794804": ["source.tpch.dbtc.tracks"], "test.tpch.source_not_null_yahooquery_link_clicked_link.3620c522a2": ["source.tpch.yahooquery.link_clicked"], "test.tpch.source_not_null_yahooquery_link_clicked_id.c548e15a7c": ["source.tpch.yahooquery.link_clicked"], "test.tpch.source_unique_yahooquery_link_clicked_id.8d33aca289": ["source.tpch.yahooquery.link_clicked"], "test.tpch.source_not_null_yahooquery_link_clicked_event.71e08699a9": ["source.tpch.yahooquery.link_clicked"], "test.tpch.source_not_null_yahooquery_link_clicked_sent_at.8b7ef7ad21": ["source.tpch.yahooquery.link_clicked"], "test.tpch.source_not_null_yahooquery_pages_id.9f283dcda5": ["source.tpch.yahooquery.pages"], "test.tpch.source_unique_yahooquery_pages_id.6bf98eb61d": ["source.tpch.yahooquery.pages"], "test.tpch.source_not_null_yahooquery_pages_sent_at.318734adee": ["source.tpch.yahooquery.pages"], "test.tpch.source_not_null_yahooquery_tracks_event_text.700c8cdeb6": ["source.tpch.yahooquery.tracks"], "test.tpch.source_not_null_yahooquery_tracks_id.621874b412": ["source.tpch.yahooquery.tracks"], "test.tpch.source_unique_yahooquery_tracks_id.7c22f538c9": ["source.tpch.yahooquery.tracks"], "test.tpch.source_not_null_yahooquery_tracks_event.70b5c344c0": ["source.tpch.yahooquery.tracks"], "test.tpch.source_not_null_yahooquery_tracks_sent_at.e5fa5c0d96": ["source.tpch.yahooquery.tracks"], "test.tpch.source_not_null_tpch_orders_o_orderkey.ebd571817b": ["source.tpch.tpch.orders"], "test.tpch.source_unique_tpch_orders_o_orderkey.374f048af2": ["source.tpch.tpch.orders"], "test.tpch.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.024e40ec67": ["source.tpch.tpch.customer", "source.tpch.tpch.orders"], "test.tpch.source_not_null_tpch_customer_c_custkey.a95b6298b5": ["source.tpch.tpch.customer"], "test.tpch.source_unique_tpch_customer_c_custkey.048e97fc25": ["source.tpch.tpch.customer"], "test.tpch.source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_.c9281c341d": ["source.tpch.tpch.customer", "source.tpch.tpch.nation"], "test.tpch.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.f722cb898d": ["source.tpch.tpch.lineitem", "source.tpch.tpch.orders"], "test.tpch.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b761c77df8": ["source.tpch.tpch.lineitem", "source.tpch.tpch.part"], "test.tpch.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f872fb81a2": ["source.tpch.tpch.lineitem", "source.tpch.tpch.supplier"], "test.tpch.source_not_null_tpch_nation_n_nationkey.5ac5d27298": ["source.tpch.tpch.nation"], "test.tpch.source_unique_tpch_nation_n_nationkey.3bd4153064": ["source.tpch.tpch.nation"], "test.tpch.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.116e1ee3da": ["source.tpch.tpch.nation", "source.tpch.tpch.region"], "test.tpch.source_not_null_tpch_part_p_partkey.9543847190": ["source.tpch.tpch.part"], "test.tpch.source_unique_tpch_part_p_partkey.30b171988e": ["source.tpch.tpch.part"], "test.tpch.dbt_utils_source_accepted_range_tpch_part_p_retailprice__2000__0.534c6e22cc": ["source.tpch.tpch.part"], "test.tpch.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.511196222f": ["source.tpch.tpch.part", "source.tpch.tpch.partsupp"], "test.tpch.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.1c7ef0743e": ["source.tpch.tpch.partsupp", "source.tpch.tpch.supplier"], "test.tpch.source_not_null_tpch_region_r_regionkey.8f6ee68076": ["source.tpch.tpch.region"], "test.tpch.source_unique_tpch_region_r_regionkey.d8eeced103": ["source.tpch.tpch.region"], "test.tpch.source_accepted_values_tpch_region_r_name__AFRICA__AMERICA__ASIA__EUROPE__MIDDLE_EAST.0e96b086b2": ["source.tpch.tpch.region"], "test.tpch.source_not_null_tpch_supplier_s_suppkey.94660e6dab": ["source.tpch.tpch.supplier"], "test.tpch.source_unique_tpch_supplier_s_suppkey.1a36cf4370": ["source.tpch.tpch.supplier"], "test.tpch.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2a47ee53da": ["source.tpch.tpch.nation", "source.tpch.tpch.supplier"], "test.tpch.source_unique_tpch_snapshot_customer_snapshot_src_c_custkey.463ab9515e": ["source.tpch.tpch_snapshot.customer_snapshot_src"], "test.tpch.source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey.e3f0c54a96": ["source.tpch.tpch_snapshot.customer_snapshot_src"], "source.tpch.dbtc.link_clicked": [], "source.tpch.dbtc.pages": [], "source.tpch.dbtc.tracks": [], "source.tpch.yahooquery.link_clicked": [], "source.tpch.yahooquery.pages": [], "source.tpch.yahooquery.tracks": [], "source.tpch.tpch.orders": [], "source.tpch.tpch.customer": [], "source.tpch.tpch.lineitem": [], "source.tpch.tpch.nation": [], "source.tpch.tpch.part": [], "source.tpch.tpch.partsupp": [], "source.tpch.tpch.region": [], "source.tpch.tpch.supplier": [], "source.tpch.tpch_snapshot.customer_snapshot_src": [], "source.tpch.deutsche_boerse.trading_data": [], "source.tpch.test_eqrx_s3.dummy_data": [], "exposure.tpch.sales_by_region": ["model.tpch.fct_orders"]}, "child_map": {"model.tpch.stg_dbtc__pages": ["model.tpch.int_segment__pages"], "model.tpch.stg_dbtc__tracks": ["model.tpch.int_segment__tracks"], "model.tpch.stg_dbtc__link_clicked": ["model.tpch.int_segment__link_clicked"], "model.tpch.stg_yahooquery__pages": ["model.tpch.int_segment__pages"], "model.tpch.stg_yahooquery__link_clicked": ["model.tpch.int_segment__link_clicked"], "model.tpch.stg_yahooquery__tracks": ["model.tpch.int_segment__tracks"], "model.tpch.stg_tpch_orders": ["model.tpch.fct_orders", "model.tpch.order_items", "test.tpch.macro_stg_tpch_orders_assert_pos_price", "test.tpch.not_null_stg_tpch_orders_order_key.bb22e75ae8", "test.tpch.stg_tpch_orders_assert_positive_price", "test.tpch.unique_stg_tpch_orders_order_key.bd29f13cc9"], "model.tpch.stg_tpch_part_suppliers": ["model.tpch.part_suppliers", "test.tpch.not_null_stg_tpch_part_suppliers_part_supplier_key.3cc6ccee2e", "test.tpch.unique_stg_tpch_part_suppliers_part_supplier_key.96ab01c1ae"], "model.tpch.stg_tpch_suppliers": ["model.tpch.dim_suppliers", "model.tpch.part_suppliers", "test.tpch.macro_stg_tphc_suppliers_assert_pos_acct_bal", "test.tpch.not_null_stg_tpch_suppliers_supplier_key.97c31a786d", "test.tpch.unique_stg_tpch_suppliers_supplier_key.6215308464"], "model.tpch.stg_tpch_regions": ["model.tpch.dim_customers", "model.tpch.dim_suppliers", "test.tpch.not_null_stg_tpch_regions_region_key.869fa0b326", "test.tpch.unique_stg_tpch_regions_region_key.b2bd891bb5"], "model.tpch.stg_tpch_customers": ["model.tpch.dim_customers", "test.tpch.not_null_stg_tpch_customers_customer_key.a10e15535a", "test.tpch.unique_stg_tpch_customers_customer_key.7f1a18b1a4"], "model.tpch.stg_tpch_nations": ["model.tpch.dim_customers", "model.tpch.dim_suppliers", "test.tpch.not_null_stg_tpch_nations_nation_key.d0c2fe32ed", "test.tpch.unique_stg_tpch_nations_nation_key.9e3675553d"], "model.tpch.stg_tpch_line_items": ["model.tpch.order_items", "test.tpch.not_null_stg_tpch_line_items_order_item_key.cd47c7a679", "test.tpch.unique_stg_tpch_line_items_order_item_key.c819d91e0a"], "model.tpch.stg_tpch_parts": ["model.tpch.dim_parts", "model.tpch.part_suppliers", "test.tpch.not_null_stg_tpch_parts_part_key.cc8e610420", "test.tpch.unique_stg_tpch_parts_part_key.afbc7ad489"], "model.tpch.dim_suppliers": ["test.tpch.not_null_dim_suppliers_supplier_key.4315350956", "test.tpch.unique_dim_suppliers_supplier_key.58fc3e4770"], "model.tpch.dim_parts": ["test.tpch.not_null_dim_parts_part_key.4358f880d9", "test.tpch.unique_dim_parts_part_key.712df18d58"], "model.tpch.dim_customers": ["test.tpch.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.dad4601b69", "test.tpch.not_null_dim_customers_customer_key.4bebfb3411", "test.tpch.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b", "test.tpch.unique_dim_customers_customer_key.ad8156656e"], "model.tpch.fct_orders_stats_sql": [], "model.tpch.fct_order_items": ["model.tpch.agg_ship_modes_dynamic_pivot", "model.tpch.agg_ship_modes_hardcoded_pivot", "model.tpch.use_variables", "test.tpch.not_null_fct_order_items_order_item_key.47516a6371", "test.tpch.unique_fct_order_items_order_item_key.4d6426a255"], "model.tpch.fct_orders": ["exposure.tpch.sales_by_region", "model.tpch.fct_orders_stats_sql", "test.tpch.not_null_fct_orders_order_key.6a6f83ab15", "test.tpch.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b", "test.tpch.unique_fct_orders_order_key.f5e7a90273"], "model.tpch.agg_ship_modes_hardcoded_pivot": [], "model.tpch.agg_ship_modes_dynamic_pivot": [], "model.tpch.int_segment__link_clicked": [], "model.tpch.int_segment__pages": [], "model.tpch.int_segment__tracks": [], "model.tpch.part_suppliers": ["model.tpch.fct_order_items", "test.tpch.not_null_part_suppliers_part_supplier_key.b8b2022ed3", "test.tpch.unique_part_suppliers_part_supplier_key.909477afa8"], "model.tpch.order_items": ["model.tpch.fct_order_items", "model.tpch.fct_orders", "test.tpch.not_null_order_items_order_item_key.44b9fa7311", "test.tpch.unique_order_items_order_item_key.43a40b2837"], "model.tpch.all_days": [], "model.tpch.use_variables": ["test.tpch.not_null_use_variables_order_item_key.c2bd602686", "test.tpch.unique_use_variables_order_item_key.fb5576fe0e"], "model.tpch.materialization_incremental": ["test.tpch.not_null_materialization_incremental_customer_key.e2b95d8009", "test.tpch.unique_materialization_incremental_customer_key.325783f327"], "snapshot.tpch.tpch_supplier_snapshot": [], "snapshot.tpch.tpch_part_snapshot": [], "snapshot.tpch.tpch_customer_snapshot": ["analysis.tpch.customer_snapshot_query"], "analysis.tpch.customer_snapshot_query": [], "test.tpch.macro_stg_tpch_orders_assert_pos_price": [], "test.tpch.stg_tpch_orders_assert_positive_price": [], "test.tpch.macro_stg_tphc_suppliers_assert_pos_acct_bal": [], "seed.tpch.snowflake_contract_rates": [], "seed.tpch.country_codes": [], "test.tpch.unique_stg_tpch_customers_customer_key.7f1a18b1a4": [], "test.tpch.not_null_stg_tpch_customers_customer_key.a10e15535a": [], "test.tpch.unique_stg_tpch_line_items_order_item_key.c819d91e0a": [], "test.tpch.not_null_stg_tpch_line_items_order_item_key.cd47c7a679": [], "test.tpch.unique_stg_tpch_nations_nation_key.9e3675553d": [], "test.tpch.not_null_stg_tpch_nations_nation_key.d0c2fe32ed": [], "test.tpch.unique_stg_tpch_orders_order_key.bd29f13cc9": [], "test.tpch.not_null_stg_tpch_orders_order_key.bb22e75ae8": [], "test.tpch.unique_stg_tpch_part_suppliers_part_supplier_key.96ab01c1ae": [], "test.tpch.not_null_stg_tpch_part_suppliers_part_supplier_key.3cc6ccee2e": [], "test.tpch.unique_stg_tpch_parts_part_key.afbc7ad489": [], "test.tpch.not_null_stg_tpch_parts_part_key.cc8e610420": [], "test.tpch.unique_stg_tpch_regions_region_key.b2bd891bb5": [], "test.tpch.not_null_stg_tpch_regions_region_key.869fa0b326": [], "test.tpch.unique_stg_tpch_suppliers_supplier_key.6215308464": [], "test.tpch.not_null_stg_tpch_suppliers_supplier_key.97c31a786d": [], "test.tpch.unique_dim_customers_customer_key.ad8156656e": [], "test.tpch.not_null_dim_customers_customer_key.4bebfb3411": [], "test.tpch.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.dad4601b69": [], "test.tpch.unique_dim_parts_part_key.712df18d58": [], "test.tpch.not_null_dim_parts_part_key.4358f880d9": [], "test.tpch.unique_dim_suppliers_supplier_key.58fc3e4770": [], "test.tpch.not_null_dim_suppliers_supplier_key.4315350956": [], "test.tpch.unique_fct_order_items_order_item_key.4d6426a255": [], "test.tpch.not_null_fct_order_items_order_item_key.47516a6371": [], "test.tpch.unique_fct_orders_order_key.f5e7a90273": [], "test.tpch.not_null_fct_orders_order_key.6a6f83ab15": [], "test.tpch.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b": [], "test.tpch.unique_order_items_order_item_key.43a40b2837": [], "test.tpch.not_null_order_items_order_item_key.44b9fa7311": [], "test.tpch.unique_part_suppliers_part_supplier_key.909477afa8": [], "test.tpch.not_null_part_suppliers_part_supplier_key.b8b2022ed3": [], "test.tpch.unique_materialization_incremental_customer_key.325783f327": [], "test.tpch.not_null_materialization_incremental_customer_key.e2b95d8009": [], "test.tpch.unique_use_variables_order_item_key.fb5576fe0e": [], "test.tpch.not_null_use_variables_order_item_key.c2bd602686": [], "test.tpch.source_not_null_dbtc_link_clicked_link.f7c8e69ba4": [], "test.tpch.source_not_null_dbtc_link_clicked_id.9028bfe6aa": [], "test.tpch.source_unique_dbtc_link_clicked_id.6a057563bc": [], "test.tpch.source_not_null_dbtc_link_clicked_event.7882b2f4f6": [], "test.tpch.source_not_null_dbtc_link_clicked_sent_at.39cf8a9ef9": [], "test.tpch.source_not_null_dbtc_pages_id.f6b6a8c945": [], "test.tpch.source_unique_dbtc_pages_id.8457cf34c6": [], "test.tpch.source_not_null_dbtc_pages_sent_at.485c11a73d": [], "test.tpch.source_not_null_dbtc_tracks_event_text.80a027ce56": [], "test.tpch.source_not_null_dbtc_tracks_id.a88be3eab6": [], "test.tpch.source_unique_dbtc_tracks_id.d4b89ee628": [], "test.tpch.source_not_null_dbtc_tracks_event.1fd1e17274": [], "test.tpch.source_not_null_dbtc_tracks_sent_at.1ad9794804": [], "test.tpch.source_not_null_yahooquery_link_clicked_link.3620c522a2": [], "test.tpch.source_not_null_yahooquery_link_clicked_id.c548e15a7c": [], "test.tpch.source_unique_yahooquery_link_clicked_id.8d33aca289": [], "test.tpch.source_not_null_yahooquery_link_clicked_event.71e08699a9": [], "test.tpch.source_not_null_yahooquery_link_clicked_sent_at.8b7ef7ad21": [], "test.tpch.source_not_null_yahooquery_pages_id.9f283dcda5": [], "test.tpch.source_unique_yahooquery_pages_id.6bf98eb61d": [], "test.tpch.source_not_null_yahooquery_pages_sent_at.318734adee": [], "test.tpch.source_not_null_yahooquery_tracks_event_text.700c8cdeb6": [], "test.tpch.source_not_null_yahooquery_tracks_id.621874b412": [], "test.tpch.source_unique_yahooquery_tracks_id.7c22f538c9": [], "test.tpch.source_not_null_yahooquery_tracks_event.70b5c344c0": [], "test.tpch.source_not_null_yahooquery_tracks_sent_at.e5fa5c0d96": [], "test.tpch.source_not_null_tpch_orders_o_orderkey.ebd571817b": [], "test.tpch.source_unique_tpch_orders_o_orderkey.374f048af2": [], "test.tpch.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.024e40ec67": [], "test.tpch.source_not_null_tpch_customer_c_custkey.a95b6298b5": [], "test.tpch.source_unique_tpch_customer_c_custkey.048e97fc25": [], "test.tpch.source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_.c9281c341d": [], "test.tpch.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.f722cb898d": [], "test.tpch.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b761c77df8": [], "test.tpch.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f872fb81a2": [], "test.tpch.source_not_null_tpch_nation_n_nationkey.5ac5d27298": [], "test.tpch.source_unique_tpch_nation_n_nationkey.3bd4153064": [], "test.tpch.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.116e1ee3da": [], "test.tpch.source_not_null_tpch_part_p_partkey.9543847190": [], "test.tpch.source_unique_tpch_part_p_partkey.30b171988e": [], "test.tpch.dbt_utils_source_accepted_range_tpch_part_p_retailprice__2000__0.534c6e22cc": [], "test.tpch.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.511196222f": [], "test.tpch.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.1c7ef0743e": [], "test.tpch.source_not_null_tpch_region_r_regionkey.8f6ee68076": [], "test.tpch.source_unique_tpch_region_r_regionkey.d8eeced103": [], "test.tpch.source_accepted_values_tpch_region_r_name__AFRICA__AMERICA__ASIA__EUROPE__MIDDLE_EAST.0e96b086b2": [], "test.tpch.source_not_null_tpch_supplier_s_suppkey.94660e6dab": [], "test.tpch.source_unique_tpch_supplier_s_suppkey.1a36cf4370": [], "test.tpch.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2a47ee53da": [], "test.tpch.source_unique_tpch_snapshot_customer_snapshot_src_c_custkey.463ab9515e": [], "test.tpch.source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey.e3f0c54a96": [], "source.tpch.dbtc.link_clicked": ["model.tpch.stg_dbtc__link_clicked", "test.tpch.source_not_null_dbtc_link_clicked_event.7882b2f4f6", "test.tpch.source_not_null_dbtc_link_clicked_id.9028bfe6aa", "test.tpch.source_not_null_dbtc_link_clicked_link.f7c8e69ba4", "test.tpch.source_not_null_dbtc_link_clicked_sent_at.39cf8a9ef9", "test.tpch.source_unique_dbtc_link_clicked_id.6a057563bc"], "source.tpch.dbtc.pages": ["model.tpch.stg_dbtc__pages", "test.tpch.source_not_null_dbtc_pages_id.f6b6a8c945", "test.tpch.source_not_null_dbtc_pages_sent_at.485c11a73d", "test.tpch.source_unique_dbtc_pages_id.8457cf34c6"], "source.tpch.dbtc.tracks": ["model.tpch.stg_dbtc__tracks", "test.tpch.source_not_null_dbtc_tracks_event.1fd1e17274", "test.tpch.source_not_null_dbtc_tracks_event_text.80a027ce56", "test.tpch.source_not_null_dbtc_tracks_id.a88be3eab6", "test.tpch.source_not_null_dbtc_tracks_sent_at.1ad9794804", "test.tpch.source_unique_dbtc_tracks_id.d4b89ee628"], "source.tpch.yahooquery.link_clicked": ["model.tpch.stg_yahooquery__link_clicked", "test.tpch.source_not_null_yahooquery_link_clicked_event.71e08699a9", "test.tpch.source_not_null_yahooquery_link_clicked_id.c548e15a7c", "test.tpch.source_not_null_yahooquery_link_clicked_link.3620c522a2", "test.tpch.source_not_null_yahooquery_link_clicked_sent_at.8b7ef7ad21", "test.tpch.source_unique_yahooquery_link_clicked_id.8d33aca289"], "source.tpch.yahooquery.pages": ["model.tpch.stg_yahooquery__pages", "test.tpch.source_not_null_yahooquery_pages_id.9f283dcda5", "test.tpch.source_not_null_yahooquery_pages_sent_at.318734adee", "test.tpch.source_unique_yahooquery_pages_id.6bf98eb61d"], "source.tpch.yahooquery.tracks": ["model.tpch.stg_yahooquery__tracks", "test.tpch.source_not_null_yahooquery_tracks_event.70b5c344c0", "test.tpch.source_not_null_yahooquery_tracks_event_text.700c8cdeb6", "test.tpch.source_not_null_yahooquery_tracks_id.621874b412", "test.tpch.source_not_null_yahooquery_tracks_sent_at.e5fa5c0d96", "test.tpch.source_unique_yahooquery_tracks_id.7c22f538c9"], "source.tpch.tpch.orders": ["model.tpch.stg_tpch_orders", "test.tpch.source_not_null_tpch_orders_o_orderkey.ebd571817b", "test.tpch.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.f722cb898d", "test.tpch.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.024e40ec67", "test.tpch.source_unique_tpch_orders_o_orderkey.374f048af2"], "source.tpch.tpch.customer": ["model.tpch.materialization_incremental", "model.tpch.stg_tpch_customers", "snapshot.tpch.tpch_customer_snapshot", "test.tpch.source_not_null_tpch_customer_c_custkey.a95b6298b5", "test.tpch.source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_.c9281c341d", "test.tpch.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.024e40ec67", "test.tpch.source_unique_tpch_customer_c_custkey.048e97fc25"], "source.tpch.tpch.lineitem": ["model.tpch.stg_tpch_line_items", "test.tpch.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.f722cb898d", "test.tpch.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b761c77df8", "test.tpch.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f872fb81a2"], "source.tpch.tpch.nation": ["model.tpch.stg_tpch_nations", "test.tpch.source_not_null_tpch_nation_n_nationkey.5ac5d27298", "test.tpch.source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_.c9281c341d", "test.tpch.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.116e1ee3da", "test.tpch.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2a47ee53da", "test.tpch.source_unique_tpch_nation_n_nationkey.3bd4153064"], "source.tpch.tpch.part": ["model.tpch.stg_tpch_parts", "snapshot.tpch.tpch_part_snapshot", "test.tpch.dbt_utils_source_accepted_range_tpch_part_p_retailprice__2000__0.534c6e22cc", "test.tpch.source_not_null_tpch_part_p_partkey.9543847190", "test.tpch.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b761c77df8", "test.tpch.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.511196222f", "test.tpch.source_unique_tpch_part_p_partkey.30b171988e"], "source.tpch.tpch.partsupp": ["model.tpch.stg_tpch_part_suppliers", "test.tpch.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.511196222f", "test.tpch.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.1c7ef0743e"], "source.tpch.tpch.region": ["model.tpch.stg_tpch_regions", "test.tpch.source_accepted_values_tpch_region_r_name__AFRICA__AMERICA__ASIA__EUROPE__MIDDLE_EAST.0e96b086b2", "test.tpch.source_not_null_tpch_region_r_regionkey.8f6ee68076", "test.tpch.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.116e1ee3da", "test.tpch.source_unique_tpch_region_r_regionkey.d8eeced103"], "source.tpch.tpch.supplier": ["model.tpch.stg_tpch_suppliers", "snapshot.tpch.tpch_supplier_snapshot", "test.tpch.source_not_null_tpch_supplier_s_suppkey.94660e6dab", "test.tpch.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f872fb81a2", "test.tpch.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.1c7ef0743e", "test.tpch.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2a47ee53da", "test.tpch.source_unique_tpch_supplier_s_suppkey.1a36cf4370"], "source.tpch.tpch_snapshot.customer_snapshot_src": ["test.tpch.source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey.e3f0c54a96", "test.tpch.source_unique_tpch_snapshot_customer_snapshot_src_c_custkey.463ab9515e"], "source.tpch.deutsche_boerse.trading_data": [], "source.tpch.test_eqrx_s3.dummy_data": [], "exposure.tpch.sales_by_region": []}, "group_map": {}, "semantic_models": {}}